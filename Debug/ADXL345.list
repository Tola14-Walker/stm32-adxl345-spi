
ADXL345.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e7c  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08005fc0  08005fc0  00006fc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006368  08006368  000081e0  2**0
                  CONTENTS
  4 .ARM          00000008  08006368  08006368  00007368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006370  08006370  000081e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006370  08006370  00007370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006374  08006374  00007374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08006378  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  200001e0  08006558  000081e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08006558  000083c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005f8d  00000000  00000000  00008209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001622  00000000  00000000  0000e196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0000f7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000507  00000000  00000000  0000fe88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b9c  00000000  00000000  0001038f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007c97  00000000  00000000  00025f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000832a1  00000000  00000000  0002dbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b0e63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b18  00000000  00000000  000b0ea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000b39c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	08005fa4 	.word	0x08005fa4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	08005fa4 	.word	0x08005fa4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2f>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac0:	bf24      	itt	cs
 8000ac2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ac6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aca:	d90d      	bls.n	8000ae8 <__aeabi_d2f+0x30>
 8000acc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000adc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae0:	bf08      	it	eq
 8000ae2:	f020 0001 	biceq.w	r0, r0, #1
 8000ae6:	4770      	bx	lr
 8000ae8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aec:	d121      	bne.n	8000b32 <__aeabi_d2f+0x7a>
 8000aee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af2:	bfbc      	itt	lt
 8000af4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af8:	4770      	bxlt	lr
 8000afa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000afe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b02:	f1c2 0218 	rsb	r2, r2, #24
 8000b06:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b12:	bf18      	it	ne
 8000b14:	f040 0001 	orrne.w	r0, r0, #1
 8000b18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b24:	ea40 000c 	orr.w	r0, r0, ip
 8000b28:	fa23 f302 	lsr.w	r3, r3, r2
 8000b2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b30:	e7cc      	b.n	8000acc <__aeabi_d2f+0x14>
 8000b32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b36:	d107      	bne.n	8000b48 <__aeabi_d2f+0x90>
 8000b38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b3c:	bf1e      	ittt	ne
 8000b3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b46:	4770      	bxne	lr
 8000b48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_uldivmod>:
 8000d74:	b953      	cbnz	r3, 8000d8c <__aeabi_uldivmod+0x18>
 8000d76:	b94a      	cbnz	r2, 8000d8c <__aeabi_uldivmod+0x18>
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	bf08      	it	eq
 8000d7c:	2800      	cmpeq	r0, #0
 8000d7e:	bf1c      	itt	ne
 8000d80:	f04f 31ff 	movne.w	r1, #4294967295
 8000d84:	f04f 30ff 	movne.w	r0, #4294967295
 8000d88:	f000 b968 	b.w	800105c <__aeabi_idiv0>
 8000d8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d94:	f000 f806 	bl	8000da4 <__udivmoddi4>
 8000d98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da0:	b004      	add	sp, #16
 8000da2:	4770      	bx	lr

08000da4 <__udivmoddi4>:
 8000da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da8:	9d08      	ldr	r5, [sp, #32]
 8000daa:	460c      	mov	r4, r1
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d14e      	bne.n	8000e4e <__udivmoddi4+0xaa>
 8000db0:	4694      	mov	ip, r2
 8000db2:	458c      	cmp	ip, r1
 8000db4:	4686      	mov	lr, r0
 8000db6:	fab2 f282 	clz	r2, r2
 8000dba:	d962      	bls.n	8000e82 <__udivmoddi4+0xde>
 8000dbc:	b14a      	cbz	r2, 8000dd2 <__udivmoddi4+0x2e>
 8000dbe:	f1c2 0320 	rsb	r3, r2, #32
 8000dc2:	4091      	lsls	r1, r2
 8000dc4:	fa20 f303 	lsr.w	r3, r0, r3
 8000dc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dcc:	4319      	orrs	r1, r3
 8000dce:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dda:	fb07 1114 	mls	r1, r7, r4, r1
 8000dde:	fa1f f68c 	uxth.w	r6, ip
 8000de2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb04 f106 	mul.w	r1, r4, r6
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x64>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dfa:	f080 8110 	bcs.w	800101e <__udivmoddi4+0x27a>
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	f240 810d 	bls.w	800101e <__udivmoddi4+0x27a>
 8000e04:	3c02      	subs	r4, #2
 8000e06:	4463      	add	r3, ip
 8000e08:	1a59      	subs	r1, r3, r1
 8000e0a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0e:	fb07 1110 	mls	r1, r7, r0, r1
 8000e12:	fb00 f606 	mul.w	r6, r0, r6
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	d90a      	bls.n	8000e38 <__udivmoddi4+0x94>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e2a:	f080 80fa 	bcs.w	8001022 <__udivmoddi4+0x27e>
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	f240 80f7 	bls.w	8001022 <__udivmoddi4+0x27e>
 8000e34:	4463      	add	r3, ip
 8000e36:	3802      	subs	r0, #2
 8000e38:	2100      	movs	r1, #0
 8000e3a:	1b9b      	subs	r3, r3, r6
 8000e3c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e40:	b11d      	cbz	r5, 8000e4a <__udivmoddi4+0xa6>
 8000e42:	40d3      	lsrs	r3, r2
 8000e44:	2200      	movs	r2, #0
 8000e46:	e9c5 3200 	strd	r3, r2, [r5]
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d905      	bls.n	8000e5e <__udivmoddi4+0xba>
 8000e52:	b10d      	cbz	r5, 8000e58 <__udivmoddi4+0xb4>
 8000e54:	e9c5 0100 	strd	r0, r1, [r5]
 8000e58:	2100      	movs	r1, #0
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e7f5      	b.n	8000e4a <__udivmoddi4+0xa6>
 8000e5e:	fab3 f183 	clz	r1, r3
 8000e62:	2900      	cmp	r1, #0
 8000e64:	d146      	bne.n	8000ef4 <__udivmoddi4+0x150>
 8000e66:	42a3      	cmp	r3, r4
 8000e68:	d302      	bcc.n	8000e70 <__udivmoddi4+0xcc>
 8000e6a:	4290      	cmp	r0, r2
 8000e6c:	f0c0 80ee 	bcc.w	800104c <__udivmoddi4+0x2a8>
 8000e70:	1a86      	subs	r6, r0, r2
 8000e72:	eb64 0303 	sbc.w	r3, r4, r3
 8000e76:	2001      	movs	r0, #1
 8000e78:	2d00      	cmp	r5, #0
 8000e7a:	d0e6      	beq.n	8000e4a <__udivmoddi4+0xa6>
 8000e7c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e80:	e7e3      	b.n	8000e4a <__udivmoddi4+0xa6>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	f040 808f 	bne.w	8000fa6 <__udivmoddi4+0x202>
 8000e88:	eba1 040c 	sub.w	r4, r1, ip
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e92:	fa1f f78c 	uxth.w	r7, ip
 8000e96:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e9a:	fb08 4416 	mls	r4, r8, r6, r4
 8000e9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ea2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ea6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eaa:	4298      	cmp	r0, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x11c>
 8000eae:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000eb6:	d202      	bcs.n	8000ebe <__udivmoddi4+0x11a>
 8000eb8:	4298      	cmp	r0, r3
 8000eba:	f200 80cb 	bhi.w	8001054 <__udivmoddi4+0x2b0>
 8000ebe:	4626      	mov	r6, r4
 8000ec0:	1a1c      	subs	r4, r3, r0
 8000ec2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ec6:	fb08 4410 	mls	r4, r8, r0, r4
 8000eca:	fb00 f707 	mul.w	r7, r0, r7
 8000ece:	fa1f f38e 	uxth.w	r3, lr
 8000ed2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ed6:	429f      	cmp	r7, r3
 8000ed8:	d908      	bls.n	8000eec <__udivmoddi4+0x148>
 8000eda:	eb1c 0303 	adds.w	r3, ip, r3
 8000ede:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ee2:	d202      	bcs.n	8000eea <__udivmoddi4+0x146>
 8000ee4:	429f      	cmp	r7, r3
 8000ee6:	f200 80ae 	bhi.w	8001046 <__udivmoddi4+0x2a2>
 8000eea:	4620      	mov	r0, r4
 8000eec:	1bdb      	subs	r3, r3, r7
 8000eee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ef2:	e7a5      	b.n	8000e40 <__udivmoddi4+0x9c>
 8000ef4:	f1c1 0720 	rsb	r7, r1, #32
 8000ef8:	408b      	lsls	r3, r1
 8000efa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000efe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f02:	fa24 f607 	lsr.w	r6, r4, r7
 8000f06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f0a:	fbb6 f8f9 	udiv	r8, r6, r9
 8000f0e:	fa1f fe8c 	uxth.w	lr, ip
 8000f12:	fb09 6618 	mls	r6, r9, r8, r6
 8000f16:	fa20 f307 	lsr.w	r3, r0, r7
 8000f1a:	408c      	lsls	r4, r1
 8000f1c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f20:	fb08 f00e 	mul.w	r0, r8, lr
 8000f24:	431c      	orrs	r4, r3
 8000f26:	0c23      	lsrs	r3, r4, #16
 8000f28:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f2c:	4298      	cmp	r0, r3
 8000f2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f32:	d90a      	bls.n	8000f4a <__udivmoddi4+0x1a6>
 8000f34:	eb1c 0303 	adds.w	r3, ip, r3
 8000f38:	f108 36ff 	add.w	r6, r8, #4294967295
 8000f3c:	f080 8081 	bcs.w	8001042 <__udivmoddi4+0x29e>
 8000f40:	4298      	cmp	r0, r3
 8000f42:	d97e      	bls.n	8001042 <__udivmoddi4+0x29e>
 8000f44:	f1a8 0802 	sub.w	r8, r8, #2
 8000f48:	4463      	add	r3, ip
 8000f4a:	1a1e      	subs	r6, r3, r0
 8000f4c:	fbb6 f3f9 	udiv	r3, r6, r9
 8000f50:	fb09 6613 	mls	r6, r9, r3, r6
 8000f54:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f58:	b2a4      	uxth	r4, r4
 8000f5a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000f5e:	45a6      	cmp	lr, r4
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x1d0>
 8000f62:	eb1c 0404 	adds.w	r4, ip, r4
 8000f66:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f6a:	d266      	bcs.n	800103a <__udivmoddi4+0x296>
 8000f6c:	45a6      	cmp	lr, r4
 8000f6e:	d964      	bls.n	800103a <__udivmoddi4+0x296>
 8000f70:	3b02      	subs	r3, #2
 8000f72:	4464      	add	r4, ip
 8000f74:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000f78:	fba0 8302 	umull	r8, r3, r0, r2
 8000f7c:	eba4 040e 	sub.w	r4, r4, lr
 8000f80:	429c      	cmp	r4, r3
 8000f82:	46c6      	mov	lr, r8
 8000f84:	461e      	mov	r6, r3
 8000f86:	d350      	bcc.n	800102a <__udivmoddi4+0x286>
 8000f88:	d04d      	beq.n	8001026 <__udivmoddi4+0x282>
 8000f8a:	b155      	cbz	r5, 8000fa2 <__udivmoddi4+0x1fe>
 8000f8c:	ebba 030e 	subs.w	r3, sl, lr
 8000f90:	eb64 0406 	sbc.w	r4, r4, r6
 8000f94:	fa04 f707 	lsl.w	r7, r4, r7
 8000f98:	40cb      	lsrs	r3, r1
 8000f9a:	431f      	orrs	r7, r3
 8000f9c:	40cc      	lsrs	r4, r1
 8000f9e:	e9c5 7400 	strd	r7, r4, [r5]
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	e751      	b.n	8000e4a <__udivmoddi4+0xa6>
 8000fa6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000faa:	f1c2 0320 	rsb	r3, r2, #32
 8000fae:	40d9      	lsrs	r1, r3
 8000fb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000fb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fbc:	fbb1 f0f8 	udiv	r0, r1, r8
 8000fc0:	fb08 1110 	mls	r1, r8, r0, r1
 8000fc4:	4094      	lsls	r4, r2
 8000fc6:	431c      	orrs	r4, r3
 8000fc8:	fa1f f78c 	uxth.w	r7, ip
 8000fcc:	0c23      	lsrs	r3, r4, #16
 8000fce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fd2:	fb00 f107 	mul.w	r1, r0, r7
 8000fd6:	4299      	cmp	r1, r3
 8000fd8:	d908      	bls.n	8000fec <__udivmoddi4+0x248>
 8000fda:	eb1c 0303 	adds.w	r3, ip, r3
 8000fde:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fe2:	d22c      	bcs.n	800103e <__udivmoddi4+0x29a>
 8000fe4:	4299      	cmp	r1, r3
 8000fe6:	d92a      	bls.n	800103e <__udivmoddi4+0x29a>
 8000fe8:	3802      	subs	r0, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	1a5b      	subs	r3, r3, r1
 8000fee:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ff2:	fb08 3311 	mls	r3, r8, r1, r3
 8000ff6:	b2a4      	uxth	r4, r4
 8000ff8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ffc:	fb01 f307 	mul.w	r3, r1, r7
 8001000:	42a3      	cmp	r3, r4
 8001002:	d908      	bls.n	8001016 <__udivmoddi4+0x272>
 8001004:	eb1c 0404 	adds.w	r4, ip, r4
 8001008:	f101 36ff 	add.w	r6, r1, #4294967295
 800100c:	d213      	bcs.n	8001036 <__udivmoddi4+0x292>
 800100e:	42a3      	cmp	r3, r4
 8001010:	d911      	bls.n	8001036 <__udivmoddi4+0x292>
 8001012:	3902      	subs	r1, #2
 8001014:	4464      	add	r4, ip
 8001016:	1ae4      	subs	r4, r4, r3
 8001018:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800101c:	e73b      	b.n	8000e96 <__udivmoddi4+0xf2>
 800101e:	4604      	mov	r4, r0
 8001020:	e6f2      	b.n	8000e08 <__udivmoddi4+0x64>
 8001022:	4608      	mov	r0, r1
 8001024:	e708      	b.n	8000e38 <__udivmoddi4+0x94>
 8001026:	45c2      	cmp	sl, r8
 8001028:	d2af      	bcs.n	8000f8a <__udivmoddi4+0x1e6>
 800102a:	ebb8 0e02 	subs.w	lr, r8, r2
 800102e:	eb63 060c 	sbc.w	r6, r3, ip
 8001032:	3801      	subs	r0, #1
 8001034:	e7a9      	b.n	8000f8a <__udivmoddi4+0x1e6>
 8001036:	4631      	mov	r1, r6
 8001038:	e7ed      	b.n	8001016 <__udivmoddi4+0x272>
 800103a:	4603      	mov	r3, r0
 800103c:	e79a      	b.n	8000f74 <__udivmoddi4+0x1d0>
 800103e:	4630      	mov	r0, r6
 8001040:	e7d4      	b.n	8000fec <__udivmoddi4+0x248>
 8001042:	46b0      	mov	r8, r6
 8001044:	e781      	b.n	8000f4a <__udivmoddi4+0x1a6>
 8001046:	4463      	add	r3, ip
 8001048:	3802      	subs	r0, #2
 800104a:	e74f      	b.n	8000eec <__udivmoddi4+0x148>
 800104c:	4606      	mov	r6, r0
 800104e:	4623      	mov	r3, r4
 8001050:	4608      	mov	r0, r1
 8001052:	e711      	b.n	8000e78 <__udivmoddi4+0xd4>
 8001054:	3e02      	subs	r6, #2
 8001056:	4463      	add	r3, ip
 8001058:	e732      	b.n	8000ec0 <__udivmoddi4+0x11c>
 800105a:	bf00      	nop

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001068:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800106c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b00      	cmp	r3, #0
 8001076:	d013      	beq.n	80010a0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001078:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800107c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001080:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001084:	2b00      	cmp	r3, #0
 8001086:	d00b      	beq.n	80010a0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001088:	e000      	b.n	800108c <ITM_SendChar+0x2c>
    {
      __NOP();
 800108a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800108c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d0f9      	beq.n	800108a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001096:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80010a0:	687b      	ldr	r3, [r7, #4]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr

080010ac <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < len; i++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	e009      	b.n	80010d2 <_write+0x26>
    {
        ITM_SendChar(*ptr++);
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	60ba      	str	r2, [r7, #8]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ffca 	bl	8001060 <ITM_SendChar>
    for (int i = 0; i < len; i++)
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	3301      	adds	r3, #1
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	dbf1      	blt.n	80010be <_write+0x12>
    }
    return len;
 80010da:	687b      	ldr	r3, [r7, #4]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3718      	adds	r7, #24
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_GPIO_EXTI_Callback>:
uint8_t FIFO_CTL        = 0x38 ; 	// FIFO control
uint8_t FIFO_STATUS     = 0x39 ; 	// FIFO status


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	4603      	mov	r3, r0
 80010ec:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_9)  // INT2 - Activity
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010f4:	d108      	bne.n	8001108 <HAL_GPIO_EXTI_Callback+0x24>
    {
    	if(int_source & (1 << 4)) // check D4 activity
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <HAL_GPIO_EXTI_Callback+0x2c>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	f003 0310 	and.w	r3, r3, #16
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d002      	beq.n	8001108 <HAL_GPIO_EXTI_Callback+0x24>
    	{

    		printf("Activity Detection.\r\n");
 8001102:	4804      	ldr	r0, [pc, #16]	@ (8001114 <HAL_GPIO_EXTI_Callback+0x30>)
 8001104:	f002 ffd8 	bl	80040b8 <puts>
    	}
    }
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000270 	.word	0x20000270
 8001114:	08005fc0 	.word	0x08005fc0

08001118 <adxl_write>:

void adxl_write (uint8_t Reg, uint8_t data)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	460a      	mov	r2, r1
 8001122:	71fb      	strb	r3, [r7, #7]
 8001124:	4613      	mov	r3, r2
 8001126:	71bb      	strb	r3, [r7, #6]
	uint8_t writeBuf[2];
	writeBuf[0] = Reg|0x40;  // multibyte write enabled
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800112e:	b2db      	uxtb	r3, r3
 8001130:	733b      	strb	r3, [r7, #12]
	writeBuf[1] = data;
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // pull the cs pin low to enable the slave
 8001136:	2200      	movs	r2, #0
 8001138:	2140      	movs	r1, #64	@ 0x40
 800113a:	4809      	ldr	r0, [pc, #36]	@ (8001160 <adxl_write+0x48>)
 800113c:	f000 fed2 	bl	8001ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, writeBuf, 2, 100);  // transmit the address and data
 8001140:	f107 010c 	add.w	r1, r7, #12
 8001144:	2364      	movs	r3, #100	@ 0x64
 8001146:	2202      	movs	r2, #2
 8001148:	4806      	ldr	r0, [pc, #24]	@ (8001164 <adxl_write+0x4c>)
 800114a:	f001 fd06 	bl	8002b5a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_6, GPIO_PIN_SET); // pull the cs pin high to disable the slave
 800114e:	2201      	movs	r2, #1
 8001150:	2140      	movs	r1, #64	@ 0x40
 8001152:	4803      	ldr	r0, [pc, #12]	@ (8001160 <adxl_write+0x48>)
 8001154:	f000 fec6 	bl	8001ee4 <HAL_GPIO_WritePin>
}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40020400 	.word	0x40020400
 8001164:	200001fc 	.word	0x200001fc

08001168 <adxl_read>:

void adxl_read (uint8_t Reg, uint8_t *Buffer, size_t len)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	73fb      	strb	r3, [r7, #15]
	Reg |= 0x80;  // read operation
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800117c:	b2db      	uxtb	r3, r3
 800117e:	73fb      	strb	r3, [r7, #15]
	Reg |= 0x40;  // multi-byte read
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001186:	b2db      	uxtb	r3, r3
 8001188:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);  // pull the CS pin low to enable the slave
 800118a:	2200      	movs	r2, #0
 800118c:	2140      	movs	r1, #64	@ 0x40
 800118e:	480d      	ldr	r0, [pc, #52]	@ (80011c4 <adxl_read+0x5c>)
 8001190:	f000 fea8 	bl	8001ee4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi1, &Reg, 1, 10);  // send the address from where you want to read data
 8001194:	f107 010f 	add.w	r1, r7, #15
 8001198:	230a      	movs	r3, #10
 800119a:	2201      	movs	r2, #1
 800119c:	480a      	ldr	r0, [pc, #40]	@ (80011c8 <adxl_read+0x60>)
 800119e:	f001 fcdc 	bl	8002b5a <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi1, Buffer, len, 10);  // read 6 BYTES of data
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	230a      	movs	r3, #10
 80011a8:	68b9      	ldr	r1, [r7, #8]
 80011aa:	4807      	ldr	r0, [pc, #28]	@ (80011c8 <adxl_read+0x60>)
 80011ac:	f001 fe18 	bl	8002de0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin (GPIOB, GPIO_PIN_6, GPIO_PIN_SET);  // pull the CS pin high to disable the slave
 80011b0:	2201      	movs	r2, #1
 80011b2:	2140      	movs	r1, #64	@ 0x40
 80011b4:	4803      	ldr	r0, [pc, #12]	@ (80011c4 <adxl_read+0x5c>)
 80011b6:	f000 fe95 	bl	8001ee4 <HAL_GPIO_WritePin>
}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40020400 	.word	0x40020400
 80011c8:	200001fc 	.word	0x200001fc

080011cc <adxl_init>:

void adxl_init (void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	adxl_read(DEVICE, &chipID, 1);
 80011d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001284 <adxl_init+0xb8>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2201      	movs	r2, #1
 80011d6:	492c      	ldr	r1, [pc, #176]	@ (8001288 <adxl_init+0xbc>)
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ffc5 	bl	8001168 <adxl_read>
	if (chipID == 0xE5)
 80011de:	4b2a      	ldr	r3, [pc, #168]	@ (8001288 <adxl_init+0xbc>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2be5      	cmp	r3, #229	@ 0xe5
 80011e4:	d14b      	bne.n	800127e <adxl_init+0xb2>
	{
		adxl_write (POWER_CTL, 0x00);		// Standby mode for initialize
 80011e6:	4b29      	ldr	r3, [pc, #164]	@ (800128c <adxl_init+0xc0>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2100      	movs	r1, #0
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ff93 	bl	8001118 <adxl_write>

		adxl_write (BW_RATE, 0x0D);			// Disable sleep mode Output Data Rate 800Hz
 80011f2:	4b27      	ldr	r3, [pc, #156]	@ (8001290 <adxl_init+0xc4>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	210d      	movs	r1, #13
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff8d 	bl	8001118 <adxl_write>

		adxl_write (DATA_FORMAT, 0x0B);		// ±16 g full resolution 13-bit mode and right-justified mode
 80011fe:	4b25      	ldr	r3, [pc, #148]	@ (8001294 <adxl_init+0xc8>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	210b      	movs	r1, #11
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff87 	bl	8001118 <adxl_write>


		// The scale factor of offset is 15.6mg/LSB = 0.0156g/LSB
		adxl_write (OFSX, 0x03);			// x_avg (100 samples) = -0.04989g
 800120a:	4b23      	ldr	r3, [pc, #140]	@ (8001298 <adxl_init+0xcc>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2103      	movs	r1, #3
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff ff81 	bl	8001118 <adxl_write>
		adxl_write (OFSY, 0x03);			// y_avg (100 samples) = -0.03662g
 8001216:	4b21      	ldr	r3, [pc, #132]	@ (800129c <adxl_init+0xd0>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2103      	movs	r1, #3
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff7b 	bl	8001118 <adxl_write>
		adxl_write (OFSZ, 0x03);			// z_avg (100 samples) = 0.946931g
 8001222:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <adxl_init+0xd4>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2103      	movs	r1, #3
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff75 	bl	8001118 <adxl_write>



		// The scale factor of threshold activity is 62.5mg/LSB = 0.0625g/LSB
		adxl_write (THRESH_ACT, 0x03);		// set threshold activity
 800122e:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <adxl_init+0xd8>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2103      	movs	r1, #3
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff6f 	bl	8001118 <adxl_write>
//		adxl_write (TIME_INACT, 0x1E);		// set time inactivity 30s

		// Control activity detection axis
		// ACT_ACT_CTL 0x60: 0110 0000 DC-coupled and detected X and Y axis
		// ACT_INACT_CTL 0x06: 0000 0110 DC-coupled and detected X and Y axis
		adxl_write (ACT_INACT_CTL, 0x60);
 800123a:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <adxl_init+0xdc>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2160      	movs	r1, #96	@ 0x60
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff69 	bl	8001118 <adxl_write>

		adxl_write (INT_ENABLE, 0x00);		// Clear interrupt functions
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <adxl_init+0xe0>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff ff63 	bl	8001118 <adxl_write>
		adxl_write (INT_MAP, 0x10);			// Activity D4 INIT2
 8001252:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <adxl_init+0xe4>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2110      	movs	r1, #16
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff5d 	bl	8001118 <adxl_write>
		adxl_write (INT_ENABLE, 0x10);		// Enable interrupt activity and inactivity function
 800125e:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <adxl_init+0xe0>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2110      	movs	r1, #16
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff57 	bl	8001118 <adxl_write>

//		adxl_write (FIFO_CTL, 0xCA);		// 10-sample, trigger mode and link with INT1

//		adxl_write (BW_RATE, 0x0D);			// Disable sleep mode Output Data Rate 800Hz
//
		adxl_write (POWER_CTL, 0x08);		// Charge power mode to measure mode and enable link bit
 800126a:	4b08      	ldr	r3, [pc, #32]	@ (800128c <adxl_init+0xc0>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2108      	movs	r1, #8
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff51 	bl	8001118 <adxl_write>

		HAL_Delay(1000);
 8001276:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800127a:	f000 fb83 	bl	8001984 <HAL_Delay>
	}
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000271 	.word	0x20000271
 8001288:	20000260 	.word	0x20000260
 800128c:	20000006 	.word	0x20000006
 8001290:	20000005 	.word	0x20000005
 8001294:	2000000a 	.word	0x2000000a
 8001298:	20000000 	.word	0x20000000
 800129c:	20000001 	.word	0x20000001
 80012a0:	20000002 	.word	0x20000002
 80012a4:	20000003 	.word	0x20000003
 80012a8:	20000004 	.word	0x20000004
 80012ac:	20000007 	.word	0x20000007
 80012b0:	20000008 	.word	0x20000008
 80012b4:	00000000 	.word	0x00000000

080012b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012bc:	f000 faf3 	bl	80018a6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c0:	f000 f89a 	bl	80013f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c4:	f000 f91c 	bl	8001500 <MX_GPIO_Init>
  MX_SPI1_Init();
 80012c8:	f000 f8e4 	bl	8001494 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  adxl_init();
 80012cc:	f7ff ff7e 	bl	80011cc <adxl_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  adxl_read (INT_SOURCE , &int_source, 1 );
 80012d0:	4b3f      	ldr	r3, [pc, #252]	@ (80013d0 <main+0x118>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2201      	movs	r2, #1
 80012d6:	493f      	ldr	r1, [pc, #252]	@ (80013d4 <main+0x11c>)
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff45 	bl	8001168 <adxl_read>
	  adxl_read (DATAX0, RxData, 6);
 80012de:	4b3e      	ldr	r3, [pc, #248]	@ (80013d8 <main+0x120>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2206      	movs	r2, #6
 80012e4:	493d      	ldr	r1, [pc, #244]	@ (80013dc <main+0x124>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff ff3e 	bl	8001168 <adxl_read>

	  x = ((RxData[1] << 8) | RxData[0]);
 80012ec:	4b3b      	ldr	r3, [pc, #236]	@ (80013dc <main+0x124>)
 80012ee:	785b      	ldrb	r3, [r3, #1]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	b21a      	sxth	r2, r3
 80012f4:	4b39      	ldr	r3, [pc, #228]	@ (80013dc <main+0x124>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	4b38      	ldr	r3, [pc, #224]	@ (80013e0 <main+0x128>)
 8001300:	801a      	strh	r2, [r3, #0]
	  y = ((RxData[3] << 8) | RxData[2]);
 8001302:	4b36      	ldr	r3, [pc, #216]	@ (80013dc <main+0x124>)
 8001304:	78db      	ldrb	r3, [r3, #3]
 8001306:	021b      	lsls	r3, r3, #8
 8001308:	b21a      	sxth	r2, r3
 800130a:	4b34      	ldr	r3, [pc, #208]	@ (80013dc <main+0x124>)
 800130c:	789b      	ldrb	r3, [r3, #2]
 800130e:	b21b      	sxth	r3, r3
 8001310:	4313      	orrs	r3, r2
 8001312:	b21a      	sxth	r2, r3
 8001314:	4b33      	ldr	r3, [pc, #204]	@ (80013e4 <main+0x12c>)
 8001316:	801a      	strh	r2, [r3, #0]
	  z = ((RxData[5] << 8) | RxData[4]);
 8001318:	4b30      	ldr	r3, [pc, #192]	@ (80013dc <main+0x124>)
 800131a:	795b      	ldrb	r3, [r3, #5]
 800131c:	021b      	lsls	r3, r3, #8
 800131e:	b21a      	sxth	r2, r3
 8001320:	4b2e      	ldr	r3, [pc, #184]	@ (80013dc <main+0x124>)
 8001322:	791b      	ldrb	r3, [r3, #4]
 8001324:	b21b      	sxth	r3, r3
 8001326:	4313      	orrs	r3, r2
 8001328:	b21a      	sxth	r2, r3
 800132a:	4b2f      	ldr	r3, [pc, #188]	@ (80013e8 <main+0x130>)
 800132c:	801a      	strh	r2, [r3, #0]

	  // Convert into 'g'
	  xg = (float)x*0.0039 ;
 800132e:	4b2c      	ldr	r3, [pc, #176]	@ (80013e0 <main+0x128>)
 8001330:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff fcc9 	bl	8000ccc <__aeabi_i2f>
 800133a:	4603      	mov	r3, r0
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f88b 	bl	8000458 <__aeabi_f2d>
 8001342:	a321      	add	r3, pc, #132	@ (adr r3, 80013c8 <main+0x110>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff f8de 	bl	8000508 <__aeabi_dmul>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fbb0 	bl	8000ab8 <__aeabi_d2f>
 8001358:	4603      	mov	r3, r0
 800135a:	4a24      	ldr	r2, [pc, #144]	@ (80013ec <main+0x134>)
 800135c:	6013      	str	r3, [r2, #0]
	  yg = (float)y*0.0039 ;
 800135e:	4b21      	ldr	r3, [pc, #132]	@ (80013e4 <main+0x12c>)
 8001360:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fcb1 	bl	8000ccc <__aeabi_i2f>
 800136a:	4603      	mov	r3, r0
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff f873 	bl	8000458 <__aeabi_f2d>
 8001372:	a315      	add	r3, pc, #84	@ (adr r3, 80013c8 <main+0x110>)
 8001374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001378:	f7ff f8c6 	bl	8000508 <__aeabi_dmul>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f7ff fb98 	bl	8000ab8 <__aeabi_d2f>
 8001388:	4603      	mov	r3, r0
 800138a:	4a19      	ldr	r2, [pc, #100]	@ (80013f0 <main+0x138>)
 800138c:	6013      	str	r3, [r2, #0]
	  zg = (float)z*0.0039 ;
 800138e:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <main+0x130>)
 8001390:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fc99 	bl	8000ccc <__aeabi_i2f>
 800139a:	4603      	mov	r3, r0
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff f85b 	bl	8000458 <__aeabi_f2d>
 80013a2:	a309      	add	r3, pc, #36	@ (adr r3, 80013c8 <main+0x110>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	f7ff f8ae 	bl	8000508 <__aeabi_dmul>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fb80 	bl	8000ab8 <__aeabi_d2f>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a0e      	ldr	r2, [pc, #56]	@ (80013f4 <main+0x13c>)
 80013bc:	6013      	str	r3, [r2, #0]
//		  printf("ID Device: 0x%X === X:\%.3f; Y:%.3f ; Z:%.3f \r\n",chipID,xg,yg,zg);
//	  }

//	  printf("0x%X",int_source);
//	  printf("ID Device: 0x%X === X:\%.3f; Y:%.3f ; Z:%.3f \r\n",chipID,xg,yg,zg);
	  HAL_Delay(10);
 80013be:	200a      	movs	r0, #10
 80013c0:	f000 fae0 	bl	8001984 <HAL_Delay>
	  adxl_read (INT_SOURCE , &int_source, 1 );
 80013c4:	bf00      	nop
 80013c6:	e783      	b.n	80012d0 <main+0x18>
 80013c8:	8e8a71de 	.word	0x8e8a71de
 80013cc:	3f6ff2e4 	.word	0x3f6ff2e4
 80013d0:	20000009 	.word	0x20000009
 80013d4:	20000270 	.word	0x20000270
 80013d8:	2000000b 	.word	0x2000000b
 80013dc:	20000254 	.word	0x20000254
 80013e0:	2000025a 	.word	0x2000025a
 80013e4:	2000025c 	.word	0x2000025c
 80013e8:	2000025e 	.word	0x2000025e
 80013ec:	20000264 	.word	0x20000264
 80013f0:	20000268 	.word	0x20000268
 80013f4:	2000026c 	.word	0x2000026c

080013f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b092      	sub	sp, #72	@ 0x48
 80013fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	2234      	movs	r2, #52	@ 0x34
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f002 ff36 	bl	8004278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140c:	463b      	mov	r3, r7
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800141a:	4b1d      	ldr	r3, [pc, #116]	@ (8001490 <SystemClock_Config+0x98>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8001422:	4a1b      	ldr	r2, [pc, #108]	@ (8001490 <SystemClock_Config+0x98>)
 8001424:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001428:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800142a:	2302      	movs	r3, #2
 800142c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142e:	2301      	movs	r3, #1
 8001430:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001432:	2310      	movs	r3, #16
 8001434:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001436:	2302      	movs	r3, #2
 8001438:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800143a:	2300      	movs	r3, #0
 800143c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800143e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001442:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001444:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001448:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4618      	mov	r0, r3
 8001450:	f000 fd78 	bl	8001f44 <HAL_RCC_OscConfig>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800145a:	f000 f8a7 	bl	80015ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145e:	230f      	movs	r3, #15
 8001460:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001462:	2303      	movs	r3, #3
 8001464:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001466:	2300      	movs	r3, #0
 8001468:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001472:	463b      	mov	r3, r7
 8001474:	2101      	movs	r1, #1
 8001476:	4618      	mov	r0, r3
 8001478:	f001 f894 	bl	80025a4 <HAL_RCC_ClockConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001482:	f000 f893 	bl	80015ac <Error_Handler>
  }
}
 8001486:	bf00      	nop
 8001488:	3748      	adds	r7, #72	@ 0x48
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40007000 	.word	0x40007000

08001494 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001498:	4b17      	ldr	r3, [pc, #92]	@ (80014f8 <MX_SPI1_Init+0x64>)
 800149a:	4a18      	ldr	r2, [pc, #96]	@ (80014fc <MX_SPI1_Init+0x68>)
 800149c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <MX_SPI1_Init+0x64>)
 80014a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80014a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014a6:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <MX_SPI1_Init+0x64>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014ac:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <MX_SPI1_Init+0x64>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80014b2:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <MX_SPI1_Init+0x64>)
 80014b4:	2202      	movs	r2, #2
 80014b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <MX_SPI1_Init+0x64>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014be:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <MX_SPI1_Init+0x64>)
 80014c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014c6:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <MX_SPI1_Init+0x64>)
 80014c8:	2218      	movs	r2, #24
 80014ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014cc:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <MX_SPI1_Init+0x64>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014d2:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <MX_SPI1_Init+0x64>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d8:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <MX_SPI1_Init+0x64>)
 80014da:	2200      	movs	r2, #0
 80014dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014de:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <MX_SPI1_Init+0x64>)
 80014e0:	220a      	movs	r2, #10
 80014e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014e4:	4804      	ldr	r0, [pc, #16]	@ (80014f8 <MX_SPI1_Init+0x64>)
 80014e6:	f001 faaf 	bl	8002a48 <HAL_SPI_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014f0:	f000 f85c 	bl	80015ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	200001fc 	.word	0x200001fc
 80014fc:	40013000 	.word	0x40013000

08001500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b22      	ldr	r3, [pc, #136]	@ (80015a0 <MX_GPIO_Init+0xa0>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a21      	ldr	r2, [pc, #132]	@ (80015a0 <MX_GPIO_Init+0xa0>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b1f      	ldr	r3, [pc, #124]	@ (80015a0 <MX_GPIO_Init+0xa0>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	4b1c      	ldr	r3, [pc, #112]	@ (80015a0 <MX_GPIO_Init+0xa0>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a1b      	ldr	r2, [pc, #108]	@ (80015a0 <MX_GPIO_Init+0xa0>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <MX_GPIO_Init+0xa0>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	2140      	movs	r1, #64	@ 0x40
 800154a:	4816      	ldr	r0, [pc, #88]	@ (80015a4 <MX_GPIO_Init+0xa4>)
 800154c:	f000 fcca 	bl	8001ee4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001550:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001554:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001556:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800155a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800155c:	2302      	movs	r3, #2
 800155e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	4619      	mov	r1, r3
 8001566:	4810      	ldr	r0, [pc, #64]	@ (80015a8 <MX_GPIO_Init+0xa8>)
 8001568:	f000 fb3c 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800156c:	2340      	movs	r3, #64	@ 0x40
 800156e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001570:	2301      	movs	r3, #1
 8001572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	4619      	mov	r1, r3
 8001582:	4808      	ldr	r0, [pc, #32]	@ (80015a4 <MX_GPIO_Init+0xa4>)
 8001584:	f000 fb2e 	bl	8001be4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2100      	movs	r1, #0
 800158c:	2017      	movs	r0, #23
 800158e:	f000 faf2 	bl	8001b76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001592:	2017      	movs	r0, #23
 8001594:	f000 fb0b 	bl	8001bae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001598:	bf00      	nop
 800159a:	3720      	adds	r7, #32
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020400 	.word	0x40020400
 80015a8:	40020000 	.word	0x40020000

080015ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b0:	b672      	cpsid	i
}
 80015b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <Error_Handler+0x8>

080015b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80015be:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <HAL_MspInit+0x58>)
 80015c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c2:	4a13      	ldr	r2, [pc, #76]	@ (8001610 <HAL_MspInit+0x58>)
 80015c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80015c8:	6253      	str	r3, [r2, #36]	@ 0x24
 80015ca:	4b11      	ldr	r3, [pc, #68]	@ (8001610 <HAL_MspInit+0x58>)
 80015cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <HAL_MspInit+0x58>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4a0d      	ldr	r2, [pc, #52]	@ (8001610 <HAL_MspInit+0x58>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6213      	str	r3, [r2, #32]
 80015e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <HAL_MspInit+0x58>)
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ee:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <HAL_MspInit+0x58>)
 80015f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f2:	4a07      	ldr	r2, [pc, #28]	@ (8001610 <HAL_MspInit+0x58>)
 80015f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f8:	6253      	str	r3, [r2, #36]	@ 0x24
 80015fa:	4b05      	ldr	r3, [pc, #20]	@ (8001610 <HAL_MspInit+0x58>)
 80015fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	40023800 	.word	0x40023800

08001614 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	@ 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a17      	ldr	r2, [pc, #92]	@ (8001690 <HAL_SPI_MspInit+0x7c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d127      	bne.n	8001686 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001636:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <HAL_SPI_MspInit+0x80>)
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4a16      	ldr	r2, [pc, #88]	@ (8001694 <HAL_SPI_MspInit+0x80>)
 800163c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001640:	6213      	str	r3, [r2, #32]
 8001642:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <HAL_SPI_MspInit+0x80>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	4b11      	ldr	r3, [pc, #68]	@ (8001694 <HAL_SPI_MspInit+0x80>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a10      	ldr	r2, [pc, #64]	@ (8001694 <HAL_SPI_MspInit+0x80>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	61d3      	str	r3, [r2, #28]
 800165a:	4b0e      	ldr	r3, [pc, #56]	@ (8001694 <HAL_SPI_MspInit+0x80>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	60fb      	str	r3, [r7, #12]
 8001664:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001666:	23e0      	movs	r3, #224	@ 0xe0
 8001668:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001676:	2305      	movs	r3, #5
 8001678:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	4805      	ldr	r0, [pc, #20]	@ (8001698 <HAL_SPI_MspInit+0x84>)
 8001682:	f000 faaf 	bl	8001be4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	@ 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40013000 	.word	0x40013000
 8001694:	40023800 	.word	0x40023800
 8001698:	40020000 	.word	0x40020000

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <NMI_Handler+0x4>

080016a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <MemManage_Handler+0x4>

080016b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr

080016dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ec:	f000 f92e 	bl	800194c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80016f8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80016fc:	f000 fc0a 	bl	8001f14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}

08001704 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return 1;
 8001708:	2301      	movs	r3, #1
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <_kill>:

int _kill(int pid, int sig)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800171c:	f002 fdfe 	bl	800431c <__errno>
 8001720:	4603      	mov	r3, r0
 8001722:	2216      	movs	r2, #22
 8001724:	601a      	str	r2, [r3, #0]
  return -1;
 8001726:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_exit>:

void _exit (int status)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800173a:	f04f 31ff 	mov.w	r1, #4294967295
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffe7 	bl	8001712 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001744:	bf00      	nop
 8001746:	e7fd      	b.n	8001744 <_exit+0x12>

08001748 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	60b9      	str	r1, [r7, #8]
 8001752:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e00a      	b.n	8001770 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800175a:	f3af 8000 	nop.w
 800175e:	4601      	mov	r1, r0
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	1c5a      	adds	r2, r3, #1
 8001764:	60ba      	str	r2, [r7, #8]
 8001766:	b2ca      	uxtb	r2, r1
 8001768:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	3301      	adds	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	429a      	cmp	r2, r3
 8001776:	dbf0      	blt.n	800175a <_read+0x12>
  }

  return len;
 8001778:	687b      	ldr	r3, [r7, #4]
}
 800177a:	4618      	mov	r0, r3
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800178a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017a8:	605a      	str	r2, [r3, #4]
  return 0;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bc80      	pop	{r7}
 80017b4:	4770      	bx	lr

080017b6 <_isatty>:

int _isatty(int file)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017be:	2301      	movs	r3, #1
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr

080017ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b085      	sub	sp, #20
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
	...

080017e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ec:	4a14      	ldr	r2, [pc, #80]	@ (8001840 <_sbrk+0x5c>)
 80017ee:	4b15      	ldr	r3, [pc, #84]	@ (8001844 <_sbrk+0x60>)
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f8:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001800:	4b11      	ldr	r3, [pc, #68]	@ (8001848 <_sbrk+0x64>)
 8001802:	4a12      	ldr	r2, [pc, #72]	@ (800184c <_sbrk+0x68>)
 8001804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	429a      	cmp	r2, r3
 8001812:	d207      	bcs.n	8001824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001814:	f002 fd82 	bl	800431c <__errno>
 8001818:	4603      	mov	r3, r0
 800181a:	220c      	movs	r2, #12
 800181c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
 8001822:	e009      	b.n	8001838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001824:	4b08      	ldr	r3, [pc, #32]	@ (8001848 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800182a:	4b07      	ldr	r3, [pc, #28]	@ (8001848 <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	4a05      	ldr	r2, [pc, #20]	@ (8001848 <_sbrk+0x64>)
 8001834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20008000 	.word	0x20008000
 8001844:	00000400 	.word	0x00000400
 8001848:	20000274 	.word	0x20000274
 800184c:	200003c8 	.word	0x200003c8

08001850 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 800185c:	f7ff fff8 	bl	8001850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001860:	480b      	ldr	r0, [pc, #44]	@ (8001890 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001862:	490c      	ldr	r1, [pc, #48]	@ (8001894 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001864:	4a0c      	ldr	r2, [pc, #48]	@ (8001898 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800186c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001876:	4a09      	ldr	r2, [pc, #36]	@ (800189c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001878:	4c09      	ldr	r4, [pc, #36]	@ (80018a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001886:	f002 fd4f 	bl	8004328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800188a:	f7ff fd15 	bl	80012b8 <main>
  bx lr
 800188e:	4770      	bx	lr
  ldr r0, =_sdata
 8001890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001894:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001898:	08006378 	.word	0x08006378
  ldr r2, =_sbss
 800189c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80018a0:	200003c8 	.word	0x200003c8

080018a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC1_IRQHandler>

080018a6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b0:	2003      	movs	r0, #3
 80018b2:	f000 f955 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b6:	200f      	movs	r0, #15
 80018b8:	f000 f80e 	bl	80018d8 <HAL_InitTick>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	71fb      	strb	r3, [r7, #7]
 80018c6:	e001      	b.n	80018cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018c8:	f7ff fe76 	bl	80015b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018cc:	79fb      	ldrb	r3, [r7, #7]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3708      	adds	r7, #8
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
	...

080018d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018e4:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <HAL_InitTick+0x68>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d022      	beq.n	8001932 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018ec:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <HAL_InitTick+0x6c>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b13      	ldr	r3, [pc, #76]	@ (8001940 <HAL_InitTick+0x68>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80018f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80018fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001900:	4618      	mov	r0, r3
 8001902:	f000 f962 	bl	8001bca <HAL_SYSTICK_Config>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10f      	bne.n	800192c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b0f      	cmp	r3, #15
 8001910:	d809      	bhi.n	8001926 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001912:	2200      	movs	r2, #0
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	f04f 30ff 	mov.w	r0, #4294967295
 800191a:	f000 f92c 	bl	8001b76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800191e:	4a0a      	ldr	r2, [pc, #40]	@ (8001948 <HAL_InitTick+0x70>)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	e007      	b.n	8001936 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	73fb      	strb	r3, [r7, #15]
 800192a:	e004      	b.n	8001936 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	e001      	b.n	8001936 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001936:	7bfb      	ldrb	r3, [r7, #15]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000014 	.word	0x20000014
 8001944:	2000000c 	.word	0x2000000c
 8001948:	20000010 	.word	0x20000010

0800194c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <HAL_IncTick+0x1c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b05      	ldr	r3, [pc, #20]	@ (800196c <HAL_IncTick+0x20>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4413      	add	r3, r2
 800195a:	4a03      	ldr	r2, [pc, #12]	@ (8001968 <HAL_IncTick+0x1c>)
 800195c:	6013      	str	r3, [r2, #0]
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	bc80      	pop	{r7}
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000278 	.word	0x20000278
 800196c:	20000014 	.word	0x20000014

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b02      	ldr	r3, [pc, #8]	@ (8001980 <HAL_GetTick+0x10>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	bc80      	pop	{r7}
 800197e:	4770      	bx	lr
 8001980:	20000278 	.word	0x20000278

08001984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff fff0 	bl	8001970 <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199c:	d004      	beq.n	80019a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800199e:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <HAL_Delay+0x40>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	4413      	add	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019a8:	bf00      	nop
 80019aa:	f7ff ffe1 	bl	8001970 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d8f7      	bhi.n	80019aa <HAL_Delay+0x26>
  {
  }
}
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000014 	.word	0x20000014

080019c8 <__NVIC_SetPriorityGrouping>:
{
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f003 0307 	and.w	r3, r3, #7
 80019d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e4:	4013      	ands	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fa:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <__NVIC_SetPriorityGrouping+0x44>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	60d3      	str	r3, [r2, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000ed00 	.word	0xe000ed00

08001a10 <__NVIC_GetPriorityGrouping>:
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a14:	4b04      	ldr	r3, [pc, #16]	@ (8001a28 <__NVIC_GetPriorityGrouping+0x18>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	f003 0307 	and.w	r3, r3, #7
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_EnableIRQ>:
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4603      	mov	r3, r0
 8001a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	db0b      	blt.n	8001a56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	f003 021f 	and.w	r2, r3, #31
 8001a44:	4906      	ldr	r1, [pc, #24]	@ (8001a60 <__NVIC_EnableIRQ+0x34>)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	095b      	lsrs	r3, r3, #5
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	e000e100 	.word	0xe000e100

08001a64 <__NVIC_SetPriority>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	6039      	str	r1, [r7, #0]
 8001a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	db0a      	blt.n	8001a8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	490c      	ldr	r1, [pc, #48]	@ (8001ab0 <__NVIC_SetPriority+0x4c>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	0112      	lsls	r2, r2, #4
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	440b      	add	r3, r1
 8001a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001a8c:	e00a      	b.n	8001aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	4908      	ldr	r1, [pc, #32]	@ (8001ab4 <__NVIC_SetPriority+0x50>)
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	3b04      	subs	r3, #4
 8001a9c:	0112      	lsls	r2, r2, #4
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	761a      	strb	r2, [r3, #24]
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bc80      	pop	{r7}
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000e100 	.word	0xe000e100
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <NVIC_EncodePriority>:
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b089      	sub	sp, #36	@ 0x24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	f003 0307 	and.w	r3, r3, #7
 8001aca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f1c3 0307 	rsb	r3, r3, #7
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	bf28      	it	cs
 8001ad6:	2304      	movcs	r3, #4
 8001ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3304      	adds	r3, #4
 8001ade:	2b06      	cmp	r3, #6
 8001ae0:	d902      	bls.n	8001ae8 <NVIC_EncodePriority+0x30>
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3b03      	subs	r3, #3
 8001ae6:	e000      	b.n	8001aea <NVIC_EncodePriority+0x32>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	f04f 32ff 	mov.w	r2, #4294967295
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43da      	mvns	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	401a      	ands	r2, r3
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b00:	f04f 31ff 	mov.w	r1, #4294967295
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	43d9      	mvns	r1, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	4313      	orrs	r3, r2
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3724      	adds	r7, #36	@ 0x24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <SysTick_Config>:
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b2c:	d301      	bcc.n	8001b32 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00f      	b.n	8001b52 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b32:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <SysTick_Config+0x40>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f7ff ff90 	bl	8001a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b44:	4b05      	ldr	r3, [pc, #20]	@ (8001b5c <SysTick_Config+0x40>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4a:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <SysTick_Config+0x40>)
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	e000e010 	.word	0xe000e010

08001b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff2d 	bl	80019c8 <__NVIC_SetPriorityGrouping>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b88:	f7ff ff42 	bl	8001a10 <__NVIC_GetPriorityGrouping>
 8001b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	6978      	ldr	r0, [r7, #20]
 8001b94:	f7ff ff90 	bl	8001ab8 <NVIC_EncodePriority>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff5f 	bl	8001a64 <__NVIC_SetPriority>
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff35 	bl	8001a2c <__NVIC_EnableIRQ>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ffa2 	bl	8001b1c <SysTick_Config>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b087      	sub	sp, #28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001bfa:	e154      	b.n	8001ea6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	2101      	movs	r1, #1
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	fa01 f303 	lsl.w	r3, r1, r3
 8001c08:	4013      	ands	r3, r2
 8001c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	f000 8146 	beq.w	8001ea0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d005      	beq.n	8001c2c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d130      	bne.n	8001c8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	2203      	movs	r2, #3
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	68da      	ldr	r2, [r3, #12]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001c62:	2201      	movs	r2, #1
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	693a      	ldr	r2, [r7, #16]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	f003 0201 	and.w	r2, r3, #1
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d017      	beq.n	8001cca <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43db      	mvns	r3, r3
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	689a      	ldr	r2, [r3, #8]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0303 	and.w	r3, r3, #3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d123      	bne.n	8001d1e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	691a      	ldr	r2, [r3, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	08da      	lsrs	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3208      	adds	r2, #8
 8001d18:	6939      	ldr	r1, [r7, #16]
 8001d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0203 	and.w	r2, r3, #3
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80a0 	beq.w	8001ea0 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d60:	4b58      	ldr	r3, [pc, #352]	@ (8001ec4 <HAL_GPIO_Init+0x2e0>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	4a57      	ldr	r2, [pc, #348]	@ (8001ec4 <HAL_GPIO_Init+0x2e0>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6213      	str	r3, [r2, #32]
 8001d6c:	4b55      	ldr	r3, [pc, #340]	@ (8001ec4 <HAL_GPIO_Init+0x2e0>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d78:	4a53      	ldr	r2, [pc, #332]	@ (8001ec8 <HAL_GPIO_Init+0x2e4>)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	220f      	movs	r2, #15
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a4b      	ldr	r2, [pc, #300]	@ (8001ecc <HAL_GPIO_Init+0x2e8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d019      	beq.n	8001dd8 <HAL_GPIO_Init+0x1f4>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a4a      	ldr	r2, [pc, #296]	@ (8001ed0 <HAL_GPIO_Init+0x2ec>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d013      	beq.n	8001dd4 <HAL_GPIO_Init+0x1f0>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a49      	ldr	r2, [pc, #292]	@ (8001ed4 <HAL_GPIO_Init+0x2f0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d00d      	beq.n	8001dd0 <HAL_GPIO_Init+0x1ec>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a48      	ldr	r2, [pc, #288]	@ (8001ed8 <HAL_GPIO_Init+0x2f4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d007      	beq.n	8001dcc <HAL_GPIO_Init+0x1e8>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a47      	ldr	r2, [pc, #284]	@ (8001edc <HAL_GPIO_Init+0x2f8>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d101      	bne.n	8001dc8 <HAL_GPIO_Init+0x1e4>
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	e008      	b.n	8001dda <HAL_GPIO_Init+0x1f6>
 8001dc8:	2305      	movs	r3, #5
 8001dca:	e006      	b.n	8001dda <HAL_GPIO_Init+0x1f6>
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e004      	b.n	8001dda <HAL_GPIO_Init+0x1f6>
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	e002      	b.n	8001dda <HAL_GPIO_Init+0x1f6>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_GPIO_Init+0x1f6>
 8001dd8:	2300      	movs	r3, #0
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	f002 0203 	and.w	r2, r2, #3
 8001de0:	0092      	lsls	r2, r2, #2
 8001de2:	4093      	lsls	r3, r2
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001dea:	4937      	ldr	r1, [pc, #220]	@ (8001ec8 <HAL_GPIO_Init+0x2e4>)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	089b      	lsrs	r3, r3, #2
 8001df0:	3302      	adds	r3, #2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df8:	4b39      	ldr	r3, [pc, #228]	@ (8001ee0 <HAL_GPIO_Init+0x2fc>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e1c:	4a30      	ldr	r2, [pc, #192]	@ (8001ee0 <HAL_GPIO_Init+0x2fc>)
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e22:	4b2f      	ldr	r3, [pc, #188]	@ (8001ee0 <HAL_GPIO_Init+0x2fc>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e46:	4a26      	ldr	r2, [pc, #152]	@ (8001ee0 <HAL_GPIO_Init+0x2fc>)
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e4c:	4b24      	ldr	r3, [pc, #144]	@ (8001ee0 <HAL_GPIO_Init+0x2fc>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e70:	4a1b      	ldr	r2, [pc, #108]	@ (8001ee0 <HAL_GPIO_Init+0x2fc>)
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee0 <HAL_GPIO_Init+0x2fc>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e9a:	4a11      	ldr	r2, [pc, #68]	@ (8001ee0 <HAL_GPIO_Init+0x2fc>)
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f47f aea3 	bne.w	8001bfc <HAL_GPIO_Init+0x18>
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	bf00      	nop
 8001eba:	371c      	adds	r7, #28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40010000 	.word	0x40010000
 8001ecc:	40020000 	.word	0x40020000
 8001ed0:	40020400 	.word	0x40020400
 8001ed4:	40020800 	.word	0x40020800
 8001ed8:	40020c00 	.word	0x40020c00
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010400 	.word	0x40010400

08001ee4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	807b      	strh	r3, [r7, #2]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ef4:	787b      	ldrb	r3, [r7, #1]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001efa:	887a      	ldrh	r2, [r7, #2]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001f00:	e003      	b.n	8001f0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001f02:	887b      	ldrh	r3, [r7, #2]
 8001f04:	041a      	lsls	r2, r3, #16
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	619a      	str	r2, [r3, #24]
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f1e:	4b08      	ldr	r3, [pc, #32]	@ (8001f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f20:	695a      	ldr	r2, [r3, #20]
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d006      	beq.n	8001f38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f2a:	4a05      	ldr	r2, [pc, #20]	@ (8001f40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f30:	88fb      	ldrh	r3, [r7, #6]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff f8d6 	bl	80010e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f38:	bf00      	nop
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40010400 	.word	0x40010400

08001f44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e31d      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f56:	4b94      	ldr	r3, [pc, #592]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f60:	4b91      	ldr	r3, [pc, #580]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f68:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d07b      	beq.n	800206e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	d006      	beq.n	8001f8a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	2b0c      	cmp	r3, #12
 8001f80:	d10f      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x5e>
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f88:	d10b      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8a:	4b87      	ldr	r3, [pc, #540]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d06a      	beq.n	800206c <HAL_RCC_OscConfig+0x128>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d166      	bne.n	800206c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e2f7      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d106      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x74>
 8001faa:	4b7f      	ldr	r3, [pc, #508]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a7e      	ldr	r2, [pc, #504]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8001fb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	e02d      	b.n	8002014 <HAL_RCC_OscConfig+0xd0>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10c      	bne.n	8001fda <HAL_RCC_OscConfig+0x96>
 8001fc0:	4b79      	ldr	r3, [pc, #484]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a78      	ldr	r2, [pc, #480]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8001fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	4b76      	ldr	r3, [pc, #472]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a75      	ldr	r2, [pc, #468]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8001fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	e01c      	b.n	8002014 <HAL_RCC_OscConfig+0xd0>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b05      	cmp	r3, #5
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0xb8>
 8001fe2:	4b71      	ldr	r3, [pc, #452]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a70      	ldr	r2, [pc, #448]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8001fe8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b6e      	ldr	r3, [pc, #440]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a6d      	ldr	r2, [pc, #436]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0xd0>
 8001ffc:	4b6a      	ldr	r3, [pc, #424]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a69      	ldr	r2, [pc, #420]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8002002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b67      	ldr	r3, [pc, #412]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a66      	ldr	r2, [pc, #408]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 800200e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d013      	beq.n	8002044 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff fca8 	bl	8001970 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002024:	f7ff fca4 	bl	8001970 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	@ 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e2ad      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002036:	4b5c      	ldr	r3, [pc, #368]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0xe0>
 8002042:	e014      	b.n	800206e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff fc94 	bl	8001970 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800204c:	f7ff fc90 	bl	8001970 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	@ 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e299      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800205e:	4b52      	ldr	r3, [pc, #328]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x108>
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d05a      	beq.n	8002130 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800207a:	69bb      	ldr	r3, [r7, #24]
 800207c:	2b04      	cmp	r3, #4
 800207e:	d005      	beq.n	800208c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2b0c      	cmp	r3, #12
 8002084:	d119      	bne.n	80020ba <HAL_RCC_OscConfig+0x176>
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d116      	bne.n	80020ba <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208c:	4b46      	ldr	r3, [pc, #280]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_OscConfig+0x160>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e276      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a4:	4b40      	ldr	r3, [pc, #256]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	021b      	lsls	r3, r3, #8
 80020b2:	493d      	ldr	r1, [pc, #244]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b8:	e03a      	b.n	8002130 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d020      	beq.n	8002104 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c2:	4b3a      	ldr	r3, [pc, #232]	@ (80021ac <HAL_RCC_OscConfig+0x268>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7ff fc52 	bl	8001970 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d0:	f7ff fc4e 	bl	8001970 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e257      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020e2:	4b31      	ldr	r3, [pc, #196]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ee:	4b2e      	ldr	r3, [pc, #184]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	492a      	ldr	r1, [pc, #168]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	604b      	str	r3, [r1, #4]
 8002102:	e015      	b.n	8002130 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002104:	4b29      	ldr	r3, [pc, #164]	@ (80021ac <HAL_RCC_OscConfig+0x268>)
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7ff fc31 	bl	8001970 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002112:	f7ff fc2d 	bl	8001970 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e236      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002124:	4b20      	ldr	r3, [pc, #128]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f0      	bne.n	8002112 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0310 	and.w	r3, r3, #16
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 80b8 	beq.w	80022ae <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d170      	bne.n	8002226 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002144:	4b18      	ldr	r3, [pc, #96]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_RCC_OscConfig+0x218>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e21a      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a1a      	ldr	r2, [r3, #32]
 8002160:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8002168:	429a      	cmp	r2, r3
 800216a:	d921      	bls.n	80021b0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	4618      	mov	r0, r3
 8002172:	f000 fc09 	bl	8002988 <RCC_SetFlashLatencyFromMSIRange>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e208      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002180:	4b09      	ldr	r3, [pc, #36]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4906      	ldr	r1, [pc, #24]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002192:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	061b      	lsls	r3, r3, #24
 80021a0:	4901      	ldr	r1, [pc, #4]	@ (80021a8 <HAL_RCC_OscConfig+0x264>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
 80021a6:	e020      	b.n	80021ea <HAL_RCC_OscConfig+0x2a6>
 80021a8:	40023800 	.word	0x40023800
 80021ac:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021b0:	4b99      	ldr	r3, [pc, #612]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	4996      	ldr	r1, [pc, #600]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021c2:	4b95      	ldr	r3, [pc, #596]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	061b      	lsls	r3, r3, #24
 80021d0:	4991      	ldr	r1, [pc, #580]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 80021d2:	4313      	orrs	r3, r2
 80021d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 fbd4 	bl	8002988 <RCC_SetFlashLatencyFromMSIRange>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e1d3      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	0b5b      	lsrs	r3, r3, #13
 80021f0:	3301      	adds	r3, #1
 80021f2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80021fa:	4a87      	ldr	r2, [pc, #540]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 80021fc:	6892      	ldr	r2, [r2, #8]
 80021fe:	0912      	lsrs	r2, r2, #4
 8002200:	f002 020f 	and.w	r2, r2, #15
 8002204:	4985      	ldr	r1, [pc, #532]	@ (800241c <HAL_RCC_OscConfig+0x4d8>)
 8002206:	5c8a      	ldrb	r2, [r1, r2]
 8002208:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800220a:	4a85      	ldr	r2, [pc, #532]	@ (8002420 <HAL_RCC_OscConfig+0x4dc>)
 800220c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800220e:	4b85      	ldr	r3, [pc, #532]	@ (8002424 <HAL_RCC_OscConfig+0x4e0>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff fb60 	bl	80018d8 <HAL_InitTick>
 8002218:	4603      	mov	r3, r0
 800221a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d045      	beq.n	80022ae <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	e1b5      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d029      	beq.n	8002282 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800222e:	4b7e      	ldr	r3, [pc, #504]	@ (8002428 <HAL_RCC_OscConfig+0x4e4>)
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002234:	f7ff fb9c 	bl	8001970 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800223c:	f7ff fb98 	bl	8001970 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e1a1      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800224e:	4b72      	ldr	r3, [pc, #456]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800225a:	4b6f      	ldr	r3, [pc, #444]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	496c      	ldr	r1, [pc, #432]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800226c:	4b6a      	ldr	r3, [pc, #424]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	061b      	lsls	r3, r3, #24
 800227a:	4967      	ldr	r1, [pc, #412]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
 8002280:	e015      	b.n	80022ae <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002282:	4b69      	ldr	r3, [pc, #420]	@ (8002428 <HAL_RCC_OscConfig+0x4e4>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7ff fb72 	bl	8001970 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002290:	f7ff fb6e 	bl	8001970 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e177      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80022a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d030      	beq.n	800231c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d016      	beq.n	80022f0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c2:	4b5a      	ldr	r3, [pc, #360]	@ (800242c <HAL_RCC_OscConfig+0x4e8>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c8:	f7ff fb52 	bl	8001970 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d0:	f7ff fb4e 	bl	8001970 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e157      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80022e2:	4b4d      	ldr	r3, [pc, #308]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 80022e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x38c>
 80022ee:	e015      	b.n	800231c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f0:	4b4e      	ldr	r3, [pc, #312]	@ (800242c <HAL_RCC_OscConfig+0x4e8>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f6:	f7ff fb3b 	bl	8001970 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022fe:	f7ff fb37 	bl	8001970 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e140      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002310:	4b41      	ldr	r3, [pc, #260]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 8002312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80b5 	beq.w	8002494 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232e:	4b3a      	ldr	r3, [pc, #232]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10d      	bne.n	8002356 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	4b37      	ldr	r3, [pc, #220]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 800233c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233e:	4a36      	ldr	r2, [pc, #216]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 8002340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002344:	6253      	str	r3, [r2, #36]	@ 0x24
 8002346:	4b34      	ldr	r3, [pc, #208]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 8002348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002352:	2301      	movs	r3, #1
 8002354:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002356:	4b36      	ldr	r3, [pc, #216]	@ (8002430 <HAL_RCC_OscConfig+0x4ec>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235e:	2b00      	cmp	r3, #0
 8002360:	d118      	bne.n	8002394 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002362:	4b33      	ldr	r3, [pc, #204]	@ (8002430 <HAL_RCC_OscConfig+0x4ec>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a32      	ldr	r2, [pc, #200]	@ (8002430 <HAL_RCC_OscConfig+0x4ec>)
 8002368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800236c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236e:	f7ff faff 	bl	8001970 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002376:	f7ff fafb 	bl	8001970 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b64      	cmp	r3, #100	@ 0x64
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e104      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002388:	4b29      	ldr	r3, [pc, #164]	@ (8002430 <HAL_RCC_OscConfig+0x4ec>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d106      	bne.n	80023aa <HAL_RCC_OscConfig+0x466>
 800239c:	4b1e      	ldr	r3, [pc, #120]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 800239e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 80023a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023a6:	6353      	str	r3, [r2, #52]	@ 0x34
 80023a8:	e02d      	b.n	8002406 <HAL_RCC_OscConfig+0x4c2>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0x488>
 80023b2:	4b19      	ldr	r3, [pc, #100]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 80023b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b6:	4a18      	ldr	r2, [pc, #96]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 80023b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023bc:	6353      	str	r3, [r2, #52]	@ 0x34
 80023be:	4b16      	ldr	r3, [pc, #88]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 80023c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c2:	4a15      	ldr	r2, [pc, #84]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 80023c4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80023c8:	6353      	str	r3, [r2, #52]	@ 0x34
 80023ca:	e01c      	b.n	8002406 <HAL_RCC_OscConfig+0x4c2>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b05      	cmp	r3, #5
 80023d2:	d10c      	bne.n	80023ee <HAL_RCC_OscConfig+0x4aa>
 80023d4:	4b10      	ldr	r3, [pc, #64]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 80023d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023d8:	4a0f      	ldr	r2, [pc, #60]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 80023da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023de:	6353      	str	r3, [r2, #52]	@ 0x34
 80023e0:	4b0d      	ldr	r3, [pc, #52]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 80023e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 80023e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ea:	6353      	str	r3, [r2, #52]	@ 0x34
 80023ec:	e00b      	b.n	8002406 <HAL_RCC_OscConfig+0x4c2>
 80023ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 80023f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023f2:	4a09      	ldr	r2, [pc, #36]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 80023f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023f8:	6353      	str	r3, [r2, #52]	@ 0x34
 80023fa:	4b07      	ldr	r3, [pc, #28]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 80023fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023fe:	4a06      	ldr	r2, [pc, #24]	@ (8002418 <HAL_RCC_OscConfig+0x4d4>)
 8002400:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002404:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d024      	beq.n	8002458 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240e:	f7ff faaf 	bl	8001970 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002414:	e019      	b.n	800244a <HAL_RCC_OscConfig+0x506>
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800
 800241c:	08005fe4 	.word	0x08005fe4
 8002420:	2000000c 	.word	0x2000000c
 8002424:	20000010 	.word	0x20000010
 8002428:	42470020 	.word	0x42470020
 800242c:	42470680 	.word	0x42470680
 8002430:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7ff fa9c 	bl	8001970 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e0a3      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800244a:	4b54      	ldr	r3, [pc, #336]	@ (800259c <HAL_RCC_OscConfig+0x658>)
 800244c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800244e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0ee      	beq.n	8002434 <HAL_RCC_OscConfig+0x4f0>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002458:	f7ff fa8a 	bl	8001970 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800245e:	e00a      	b.n	8002476 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002460:	f7ff fa86 	bl	8001970 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e08d      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002476:	4b49      	ldr	r3, [pc, #292]	@ (800259c <HAL_RCC_OscConfig+0x658>)
 8002478:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800247a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1ee      	bne.n	8002460 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002482:	7ffb      	ldrb	r3, [r7, #31]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d105      	bne.n	8002494 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002488:	4b44      	ldr	r3, [pc, #272]	@ (800259c <HAL_RCC_OscConfig+0x658>)
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	4a43      	ldr	r2, [pc, #268]	@ (800259c <HAL_RCC_OscConfig+0x658>)
 800248e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002492:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002498:	2b00      	cmp	r3, #0
 800249a:	d079      	beq.n	8002590 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d056      	beq.n	8002550 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d13b      	bne.n	8002522 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024aa:	4b3d      	ldr	r3, [pc, #244]	@ (80025a0 <HAL_RCC_OscConfig+0x65c>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff fa5e 	bl	8001970 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024b8:	f7ff fa5a 	bl	8001970 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e063      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024ca:	4b34      	ldr	r3, [pc, #208]	@ (800259c <HAL_RCC_OscConfig+0x658>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d6:	4b31      	ldr	r3, [pc, #196]	@ (800259c <HAL_RCC_OscConfig+0x658>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e6:	4319      	orrs	r1, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ec:	430b      	orrs	r3, r1
 80024ee:	492b      	ldr	r1, [pc, #172]	@ (800259c <HAL_RCC_OscConfig+0x658>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f4:	4b2a      	ldr	r3, [pc, #168]	@ (80025a0 <HAL_RCC_OscConfig+0x65c>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7ff fa39 	bl	8001970 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002502:	f7ff fa35 	bl	8001970 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e03e      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002514:	4b21      	ldr	r3, [pc, #132]	@ (800259c <HAL_RCC_OscConfig+0x658>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x5be>
 8002520:	e036      	b.n	8002590 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002522:	4b1f      	ldr	r3, [pc, #124]	@ (80025a0 <HAL_RCC_OscConfig+0x65c>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7ff fa22 	bl	8001970 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002530:	f7ff fa1e 	bl	8001970 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e027      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002542:	4b16      	ldr	r3, [pc, #88]	@ (800259c <HAL_RCC_OscConfig+0x658>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x5ec>
 800254e:	e01f      	b.n	8002590 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e01a      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800255c:	4b0f      	ldr	r3, [pc, #60]	@ (800259c <HAL_RCC_OscConfig+0x658>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256c:	429a      	cmp	r2, r3
 800256e:	d10d      	bne.n	800258c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257a:	429a      	cmp	r2, r3
 800257c:	d106      	bne.n	800258c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3720      	adds	r7, #32
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	42470060 	.word	0x42470060

080025a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e11a      	b.n	80027ee <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b8f      	ldr	r3, [pc, #572]	@ (80027f8 <HAL_RCC_ClockConfig+0x254>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d919      	bls.n	80025fa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d105      	bne.n	80025d8 <HAL_RCC_ClockConfig+0x34>
 80025cc:	4b8a      	ldr	r3, [pc, #552]	@ (80027f8 <HAL_RCC_ClockConfig+0x254>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a89      	ldr	r2, [pc, #548]	@ (80027f8 <HAL_RCC_ClockConfig+0x254>)
 80025d2:	f043 0304 	orr.w	r3, r3, #4
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	4b87      	ldr	r3, [pc, #540]	@ (80027f8 <HAL_RCC_ClockConfig+0x254>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f023 0201 	bic.w	r2, r3, #1
 80025e0:	4985      	ldr	r1, [pc, #532]	@ (80027f8 <HAL_RCC_ClockConfig+0x254>)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e8:	4b83      	ldr	r3, [pc, #524]	@ (80027f8 <HAL_RCC_ClockConfig+0x254>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0f9      	b.n	80027ee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d008      	beq.n	8002618 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002606:	4b7d      	ldr	r3, [pc, #500]	@ (80027fc <HAL_RCC_ClockConfig+0x258>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	497a      	ldr	r1, [pc, #488]	@ (80027fc <HAL_RCC_ClockConfig+0x258>)
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 808e 	beq.w	8002742 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d107      	bne.n	800263e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800262e:	4b73      	ldr	r3, [pc, #460]	@ (80027fc <HAL_RCC_ClockConfig+0x258>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d121      	bne.n	800267e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e0d7      	b.n	80027ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b03      	cmp	r3, #3
 8002644:	d107      	bne.n	8002656 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002646:	4b6d      	ldr	r3, [pc, #436]	@ (80027fc <HAL_RCC_ClockConfig+0x258>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d115      	bne.n	800267e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e0cb      	b.n	80027ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d107      	bne.n	800266e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800265e:	4b67      	ldr	r3, [pc, #412]	@ (80027fc <HAL_RCC_ClockConfig+0x258>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d109      	bne.n	800267e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e0bf      	b.n	80027ee <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800266e:	4b63      	ldr	r3, [pc, #396]	@ (80027fc <HAL_RCC_ClockConfig+0x258>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e0b7      	b.n	80027ee <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800267e:	4b5f      	ldr	r3, [pc, #380]	@ (80027fc <HAL_RCC_ClockConfig+0x258>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f023 0203 	bic.w	r2, r3, #3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	495c      	ldr	r1, [pc, #368]	@ (80027fc <HAL_RCC_ClockConfig+0x258>)
 800268c:	4313      	orrs	r3, r2
 800268e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002690:	f7ff f96e 	bl	8001970 <HAL_GetTick>
 8002694:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d112      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a0:	f7ff f966 	bl	8001970 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e09b      	b.n	80027ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80026b6:	4b51      	ldr	r3, [pc, #324]	@ (80027fc <HAL_RCC_ClockConfig+0x258>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 030c 	and.w	r3, r3, #12
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d1ee      	bne.n	80026a0 <HAL_RCC_ClockConfig+0xfc>
 80026c2:	e03e      	b.n	8002742 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d112      	bne.n	80026f2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026cc:	e00a      	b.n	80026e4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026ce:	f7ff f94f 	bl	8001970 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026dc:	4293      	cmp	r3, r2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e084      	b.n	80027ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026e4:	4b45      	ldr	r3, [pc, #276]	@ (80027fc <HAL_RCC_ClockConfig+0x258>)
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f003 030c 	and.w	r3, r3, #12
 80026ec:	2b0c      	cmp	r3, #12
 80026ee:	d1ee      	bne.n	80026ce <HAL_RCC_ClockConfig+0x12a>
 80026f0:	e027      	b.n	8002742 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d11d      	bne.n	8002736 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80026fa:	e00a      	b.n	8002712 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026fc:	f7ff f938 	bl	8001970 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	@ 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e06d      	b.n	80027ee <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002712:	4b3a      	ldr	r3, [pc, #232]	@ (80027fc <HAL_RCC_ClockConfig+0x258>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b04      	cmp	r3, #4
 800271c:	d1ee      	bne.n	80026fc <HAL_RCC_ClockConfig+0x158>
 800271e:	e010      	b.n	8002742 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002720:	f7ff f926 	bl	8001970 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800272e:	4293      	cmp	r3, r2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e05b      	b.n	80027ee <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002736:	4b31      	ldr	r3, [pc, #196]	@ (80027fc <HAL_RCC_ClockConfig+0x258>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1ee      	bne.n	8002720 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002742:	4b2d      	ldr	r3, [pc, #180]	@ (80027f8 <HAL_RCC_ClockConfig+0x254>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0301 	and.w	r3, r3, #1
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d219      	bcs.n	8002784 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d105      	bne.n	8002762 <HAL_RCC_ClockConfig+0x1be>
 8002756:	4b28      	ldr	r3, [pc, #160]	@ (80027f8 <HAL_RCC_ClockConfig+0x254>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a27      	ldr	r2, [pc, #156]	@ (80027f8 <HAL_RCC_ClockConfig+0x254>)
 800275c:	f043 0304 	orr.w	r3, r3, #4
 8002760:	6013      	str	r3, [r2, #0]
 8002762:	4b25      	ldr	r3, [pc, #148]	@ (80027f8 <HAL_RCC_ClockConfig+0x254>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f023 0201 	bic.w	r2, r3, #1
 800276a:	4923      	ldr	r1, [pc, #140]	@ (80027f8 <HAL_RCC_ClockConfig+0x254>)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	4313      	orrs	r3, r2
 8002770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002772:	4b21      	ldr	r3, [pc, #132]	@ (80027f8 <HAL_RCC_ClockConfig+0x254>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	d001      	beq.n	8002784 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e034      	b.n	80027ee <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b00      	cmp	r3, #0
 800278e:	d008      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002790:	4b1a      	ldr	r3, [pc, #104]	@ (80027fc <HAL_RCC_ClockConfig+0x258>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4917      	ldr	r1, [pc, #92]	@ (80027fc <HAL_RCC_ClockConfig+0x258>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d009      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ae:	4b13      	ldr	r3, [pc, #76]	@ (80027fc <HAL_RCC_ClockConfig+0x258>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	490f      	ldr	r1, [pc, #60]	@ (80027fc <HAL_RCC_ClockConfig+0x258>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027c2:	f000 f823 	bl	800280c <HAL_RCC_GetSysClockFreq>
 80027c6:	4602      	mov	r2, r0
 80027c8:	4b0c      	ldr	r3, [pc, #48]	@ (80027fc <HAL_RCC_ClockConfig+0x258>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	091b      	lsrs	r3, r3, #4
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	490b      	ldr	r1, [pc, #44]	@ (8002800 <HAL_RCC_ClockConfig+0x25c>)
 80027d4:	5ccb      	ldrb	r3, [r1, r3]
 80027d6:	fa22 f303 	lsr.w	r3, r2, r3
 80027da:	4a0a      	ldr	r2, [pc, #40]	@ (8002804 <HAL_RCC_ClockConfig+0x260>)
 80027dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80027de:	4b0a      	ldr	r3, [pc, #40]	@ (8002808 <HAL_RCC_ClockConfig+0x264>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff f878 	bl	80018d8 <HAL_InitTick>
 80027e8:	4603      	mov	r3, r0
 80027ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80027ec:	7afb      	ldrb	r3, [r7, #11]
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40023c00 	.word	0x40023c00
 80027fc:	40023800 	.word	0x40023800
 8002800:	08005fe4 	.word	0x08005fe4
 8002804:	2000000c 	.word	0x2000000c
 8002808:	20000010 	.word	0x20000010

0800280c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800280c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002810:	b08e      	sub	sp, #56	@ 0x38
 8002812:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002814:	4b58      	ldr	r3, [pc, #352]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800281a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b0c      	cmp	r3, #12
 8002822:	d00d      	beq.n	8002840 <HAL_RCC_GetSysClockFreq+0x34>
 8002824:	2b0c      	cmp	r3, #12
 8002826:	f200 8092 	bhi.w	800294e <HAL_RCC_GetSysClockFreq+0x142>
 800282a:	2b04      	cmp	r3, #4
 800282c:	d002      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x28>
 800282e:	2b08      	cmp	r3, #8
 8002830:	d003      	beq.n	800283a <HAL_RCC_GetSysClockFreq+0x2e>
 8002832:	e08c      	b.n	800294e <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002834:	4b51      	ldr	r3, [pc, #324]	@ (800297c <HAL_RCC_GetSysClockFreq+0x170>)
 8002836:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002838:	e097      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800283a:	4b51      	ldr	r3, [pc, #324]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x174>)
 800283c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800283e:	e094      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002842:	0c9b      	lsrs	r3, r3, #18
 8002844:	f003 020f 	and.w	r2, r3, #15
 8002848:	4b4e      	ldr	r3, [pc, #312]	@ (8002984 <HAL_RCC_GetSysClockFreq+0x178>)
 800284a:	5c9b      	ldrb	r3, [r3, r2]
 800284c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800284e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002850:	0d9b      	lsrs	r3, r3, #22
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	3301      	adds	r3, #1
 8002858:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800285a:	4b47      	ldr	r3, [pc, #284]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x16c>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d021      	beq.n	80028aa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002868:	2200      	movs	r2, #0
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	61fa      	str	r2, [r7, #28]
 800286e:	4b44      	ldr	r3, [pc, #272]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x174>)
 8002870:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002874:	464a      	mov	r2, r9
 8002876:	fb03 f202 	mul.w	r2, r3, r2
 800287a:	2300      	movs	r3, #0
 800287c:	4644      	mov	r4, r8
 800287e:	fb04 f303 	mul.w	r3, r4, r3
 8002882:	4413      	add	r3, r2
 8002884:	4a3e      	ldr	r2, [pc, #248]	@ (8002980 <HAL_RCC_GetSysClockFreq+0x174>)
 8002886:	4644      	mov	r4, r8
 8002888:	fba4 0102 	umull	r0, r1, r4, r2
 800288c:	440b      	add	r3, r1
 800288e:	4619      	mov	r1, r3
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	2200      	movs	r2, #0
 8002894:	613b      	str	r3, [r7, #16]
 8002896:	617a      	str	r2, [r7, #20]
 8002898:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800289c:	f7fe fa6a 	bl	8000d74 <__aeabi_uldivmod>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4613      	mov	r3, r2
 80028a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80028a8:	e04e      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80028aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ac:	2200      	movs	r2, #0
 80028ae:	469a      	mov	sl, r3
 80028b0:	4693      	mov	fp, r2
 80028b2:	4652      	mov	r2, sl
 80028b4:	465b      	mov	r3, fp
 80028b6:	f04f 0000 	mov.w	r0, #0
 80028ba:	f04f 0100 	mov.w	r1, #0
 80028be:	0159      	lsls	r1, r3, #5
 80028c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c4:	0150      	lsls	r0, r2, #5
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	ebb2 080a 	subs.w	r8, r2, sl
 80028ce:	eb63 090b 	sbc.w	r9, r3, fp
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	f04f 0300 	mov.w	r3, #0
 80028da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80028de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80028e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80028e6:	ebb2 0408 	subs.w	r4, r2, r8
 80028ea:	eb63 0509 	sbc.w	r5, r3, r9
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	00eb      	lsls	r3, r5, #3
 80028f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028fc:	00e2      	lsls	r2, r4, #3
 80028fe:	4614      	mov	r4, r2
 8002900:	461d      	mov	r5, r3
 8002902:	eb14 030a 	adds.w	r3, r4, sl
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	eb45 030b 	adc.w	r3, r5, fp
 800290c:	607b      	str	r3, [r7, #4]
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	e9d7 4500 	ldrd	r4, r5, [r7]
 800291a:	4629      	mov	r1, r5
 800291c:	028b      	lsls	r3, r1, #10
 800291e:	4620      	mov	r0, r4
 8002920:	4629      	mov	r1, r5
 8002922:	4604      	mov	r4, r0
 8002924:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002928:	4601      	mov	r1, r0
 800292a:	028a      	lsls	r2, r1, #10
 800292c:	4610      	mov	r0, r2
 800292e:	4619      	mov	r1, r3
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	2200      	movs	r2, #0
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	60fa      	str	r2, [r7, #12]
 8002938:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800293c:	f7fe fa1a 	bl	8000d74 <__aeabi_uldivmod>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4613      	mov	r3, r2
 8002946:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 8002948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800294a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800294c:	e00d      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800294e:	4b0a      	ldr	r3, [pc, #40]	@ (8002978 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	0b5b      	lsrs	r3, r3, #13
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	3301      	adds	r3, #1
 800295e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800296a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800296c:	4618      	mov	r0, r3
 800296e:	3738      	adds	r7, #56	@ 0x38
 8002970:	46bd      	mov	sp, r7
 8002972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800
 800297c:	00f42400 	.word	0x00f42400
 8002980:	016e3600 	.word	0x016e3600
 8002984:	08005fd8 	.word	0x08005fd8

08002988 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002990:	2300      	movs	r3, #0
 8002992:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002994:	4b29      	ldr	r3, [pc, #164]	@ (8002a3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d12c      	bne.n	80029fa <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80029a0:	4b26      	ldr	r3, [pc, #152]	@ (8002a3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80029a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80029ac:	4b24      	ldr	r3, [pc, #144]	@ (8002a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	e016      	b.n	80029e6 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b8:	4b20      	ldr	r3, [pc, #128]	@ (8002a3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	4a1f      	ldr	r2, [pc, #124]	@ (8002a3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80029be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029c2:	6253      	str	r3, [r2, #36]	@ 0x24
 80029c4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80029d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a40 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 80029d8:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80029da:	4b18      	ldr	r3, [pc, #96]	@ (8002a3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	4a17      	ldr	r2, [pc, #92]	@ (8002a3c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80029e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029e4:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80029ec:	d105      	bne.n	80029fa <RCC_SetFlashLatencyFromMSIRange+0x72>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80029f4:	d101      	bne.n	80029fa <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80029f6:	2301      	movs	r3, #1
 80029f8:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d105      	bne.n	8002a0c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002a00:	4b10      	ldr	r3, [pc, #64]	@ (8002a44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a0f      	ldr	r2, [pc, #60]	@ (8002a44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a06:	f043 0304 	orr.w	r3, r3, #4
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f023 0201 	bic.w	r2, r3, #1
 8002a14:	490b      	ldr	r1, [pc, #44]	@ (8002a44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002a1c:	4b09      	ldr	r3, [pc, #36]	@ (8002a44 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0301 	and.w	r3, r3, #1
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d001      	beq.n	8002a2e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	371c      	adds	r7, #28
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40007000 	.word	0x40007000
 8002a44:	40023c00 	.word	0x40023c00

08002a48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e07b      	b.n	8002b52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx series.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d108      	bne.n	8002a74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a6a:	d009      	beq.n	8002a80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	61da      	str	r2, [r3, #28]
 8002a72:	e005      	b.n	8002a80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe fdba 	bl	8001614 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ab6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002afa:	431a      	orrs	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b04:	ea42 0103 	orr.w	r1, r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	f003 0104 	and.w	r1, r3, #4
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	f003 0210 	and.w	r2, r3, #16
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69da      	ldr	r2, [r3, #28]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b088      	sub	sp, #32
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	60f8      	str	r0, [r7, #12]
 8002b62:	60b9      	str	r1, [r7, #8]
 8002b64:	603b      	str	r3, [r7, #0]
 8002b66:	4613      	mov	r3, r2
 8002b68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_SPI_Transmit+0x22>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e12d      	b.n	8002dd8 <HAL_SPI_Transmit+0x27e>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b84:	f7fe fef4 	bl	8001970 <HAL_GetTick>
 8002b88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b8a:	88fb      	ldrh	r3, [r7, #6]
 8002b8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d002      	beq.n	8002ba0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b9e:	e116      	b.n	8002dce <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <HAL_SPI_Transmit+0x52>
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d102      	bne.n	8002bb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bb0:	e10d      	b.n	8002dce <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	88fa      	ldrh	r2, [r7, #6]
 8002bca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	88fa      	ldrh	r2, [r7, #6]
 8002bd0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bf8:	d10f      	bne.n	8002c1a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c24:	2b40      	cmp	r3, #64	@ 0x40
 8002c26:	d007      	beq.n	8002c38 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c40:	d14f      	bne.n	8002ce2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_SPI_Transmit+0xf6>
 8002c4a:	8afb      	ldrh	r3, [r7, #22]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d142      	bne.n	8002cd6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c54:	881a      	ldrh	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c60:	1c9a      	adds	r2, r3, #2
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c74:	e02f      	b.n	8002cd6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d112      	bne.n	8002caa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	881a      	ldrh	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c94:	1c9a      	adds	r2, r3, #2
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002ca8:	e015      	b.n	8002cd6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002caa:	f7fe fe61 	bl	8001970 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d803      	bhi.n	8002cc2 <HAL_SPI_Transmit+0x168>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d102      	bne.n	8002cc8 <HAL_SPI_Transmit+0x16e>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d106      	bne.n	8002cd6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002cd4:	e07b      	b.n	8002dce <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1ca      	bne.n	8002c76 <HAL_SPI_Transmit+0x11c>
 8002ce0:	e050      	b.n	8002d84 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_SPI_Transmit+0x196>
 8002cea:	8afb      	ldrh	r3, [r7, #22]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d144      	bne.n	8002d7a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	330c      	adds	r3, #12
 8002cfa:	7812      	ldrb	r2, [r2, #0]
 8002cfc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d16:	e030      	b.n	8002d7a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d113      	bne.n	8002d4e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	330c      	adds	r3, #12
 8002d30:	7812      	ldrb	r2, [r2, #0]
 8002d32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d4c:	e015      	b.n	8002d7a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d4e:	f7fe fe0f 	bl	8001970 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d803      	bhi.n	8002d66 <HAL_SPI_Transmit+0x20c>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d102      	bne.n	8002d6c <HAL_SPI_Transmit+0x212>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d106      	bne.n	8002d7a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002d78:	e029      	b.n	8002dce <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1c9      	bne.n	8002d18 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	6839      	ldr	r1, [r7, #0]
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 fbdf 	bl	800354c <SPI_EndRxTxTransaction>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10a      	bne.n	8002db8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	77fb      	strb	r3, [r7, #31]
 8002dc4:	e003      	b.n	8002dce <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002dd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3720      	adds	r7, #32
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002df0:	2300      	movs	r3, #0
 8002df2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d002      	beq.n	8002e06 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002e00:	2302      	movs	r3, #2
 8002e02:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e04:	e0fb      	b.n	8002ffe <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e0e:	d112      	bne.n	8002e36 <HAL_SPI_Receive+0x56>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10e      	bne.n	8002e36 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e20:	88fa      	ldrh	r2, [r7, #6]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	4613      	mov	r3, r2
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 f8ef 	bl	8003010 <HAL_SPI_TransmitReceive>
 8002e32:	4603      	mov	r3, r0
 8002e34:	e0e8      	b.n	8003008 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_SPI_Receive+0x64>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e0e1      	b.n	8003008 <HAL_SPI_Receive+0x228>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e4c:	f7fe fd90 	bl	8001970 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <HAL_SPI_Receive+0x7e>
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d102      	bne.n	8002e64 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e62:	e0cc      	b.n	8002ffe <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2204      	movs	r2, #4
 8002e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	88fa      	ldrh	r2, [r7, #6]
 8002e7c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	88fa      	ldrh	r2, [r7, #6]
 8002e82:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002eaa:	d10f      	bne.n	8002ecc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002eba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002eca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed6:	2b40      	cmp	r3, #64	@ 0x40
 8002ed8:	d007      	beq.n	8002eea <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ee8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d16a      	bne.n	8002fc8 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002ef2:	e032      	b.n	8002f5a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d115      	bne.n	8002f2e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f103 020c 	add.w	r2, r3, #12
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0e:	7812      	ldrb	r2, [r2, #0]
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f18:	1c5a      	adds	r2, r3, #1
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f2c:	e015      	b.n	8002f5a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f2e:	f7fe fd1f 	bl	8001970 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d803      	bhi.n	8002f46 <HAL_SPI_Receive+0x166>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d102      	bne.n	8002f4c <HAL_SPI_Receive+0x16c>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d106      	bne.n	8002f5a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002f58:	e051      	b.n	8002ffe <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1c7      	bne.n	8002ef4 <HAL_SPI_Receive+0x114>
 8002f64:	e035      	b.n	8002fd2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d113      	bne.n	8002f9c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f7e:	b292      	uxth	r2, r2
 8002f80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f86:	1c9a      	adds	r2, r3, #2
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f9a:	e015      	b.n	8002fc8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f9c:	f7fe fce8 	bl	8001970 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d803      	bhi.n	8002fb4 <HAL_SPI_Receive+0x1d4>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb2:	d102      	bne.n	8002fba <HAL_SPI_Receive+0x1da>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d106      	bne.n	8002fc8 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002fc6:	e01a      	b.n	8002ffe <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1c9      	bne.n	8002f66 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	6839      	ldr	r1, [r7, #0]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 fa52 	bl	8003480 <SPI_EndRxTransaction>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2220      	movs	r2, #32
 8002fe6:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	75fb      	strb	r3, [r7, #23]
 8002ff4:	e003      	b.n	8002ffe <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003006:	7dfb      	ldrb	r3, [r7, #23]
}
 8003008:	4618      	mov	r0, r3
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b08c      	sub	sp, #48	@ 0x30
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800301e:	2301      	movs	r3, #1
 8003020:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800302e:	2b01      	cmp	r3, #1
 8003030:	d101      	bne.n	8003036 <HAL_SPI_TransmitReceive+0x26>
 8003032:	2302      	movs	r3, #2
 8003034:	e198      	b.n	8003368 <HAL_SPI_TransmitReceive+0x358>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800303e:	f7fe fc97 	bl	8001970 <HAL_GetTick>
 8003042:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800304a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003054:	887b      	ldrh	r3, [r7, #2]
 8003056:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003058:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800305c:	2b01      	cmp	r3, #1
 800305e:	d00f      	beq.n	8003080 <HAL_SPI_TransmitReceive+0x70>
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003066:	d107      	bne.n	8003078 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d103      	bne.n	8003078 <HAL_SPI_TransmitReceive+0x68>
 8003070:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003074:	2b04      	cmp	r3, #4
 8003076:	d003      	beq.n	8003080 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003078:	2302      	movs	r3, #2
 800307a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800307e:	e16d      	b.n	800335c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d005      	beq.n	8003092 <HAL_SPI_TransmitReceive+0x82>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_SPI_TransmitReceive+0x82>
 800308c:	887b      	ldrh	r3, [r7, #2]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d103      	bne.n	800309a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003098:	e160      	b.n	800335c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d003      	beq.n	80030ae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2205      	movs	r2, #5
 80030aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	887a      	ldrh	r2, [r7, #2]
 80030be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	887a      	ldrh	r2, [r7, #2]
 80030c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	887a      	ldrh	r2, [r7, #2]
 80030d0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	887a      	ldrh	r2, [r7, #2]
 80030d6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ee:	2b40      	cmp	r3, #64	@ 0x40
 80030f0:	d007      	beq.n	8003102 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003100:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800310a:	d17c      	bne.n	8003206 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_SPI_TransmitReceive+0x10a>
 8003114:	8b7b      	ldrh	r3, [r7, #26]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d16a      	bne.n	80031f0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	881a      	ldrh	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	1c9a      	adds	r2, r3, #2
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003134:	b29b      	uxth	r3, r3
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800313e:	e057      	b.n	80031f0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b02      	cmp	r3, #2
 800314c:	d11b      	bne.n	8003186 <HAL_SPI_TransmitReceive+0x176>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	d016      	beq.n	8003186 <HAL_SPI_TransmitReceive+0x176>
 8003158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800315a:	2b01      	cmp	r3, #1
 800315c:	d113      	bne.n	8003186 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003162:	881a      	ldrh	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316e:	1c9a      	adds	r2, r3, #2
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b01      	cmp	r3, #1
 8003192:	d119      	bne.n	80031c8 <HAL_SPI_TransmitReceive+0x1b8>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d014      	beq.n	80031c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031a8:	b292      	uxth	r2, r2
 80031aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b0:	1c9a      	adds	r2, r3, #2
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031c4:	2301      	movs	r3, #1
 80031c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031c8:	f7fe fbd2 	bl	8001970 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d80b      	bhi.n	80031f0 <HAL_SPI_TransmitReceive+0x1e0>
 80031d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031de:	d007      	beq.n	80031f0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80031ee:	e0b5      	b.n	800335c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1a2      	bne.n	8003140 <HAL_SPI_TransmitReceive+0x130>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	d19d      	bne.n	8003140 <HAL_SPI_TransmitReceive+0x130>
 8003204:	e080      	b.n	8003308 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_SPI_TransmitReceive+0x204>
 800320e:	8b7b      	ldrh	r3, [r7, #26]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d16f      	bne.n	80032f4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	330c      	adds	r3, #12
 800321e:	7812      	ldrb	r2, [r2, #0]
 8003220:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800323a:	e05b      	b.n	80032f4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b02      	cmp	r3, #2
 8003248:	d11c      	bne.n	8003284 <HAL_SPI_TransmitReceive+0x274>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d017      	beq.n	8003284 <HAL_SPI_TransmitReceive+0x274>
 8003254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003256:	2b01      	cmp	r3, #1
 8003258:	d114      	bne.n	8003284 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	330c      	adds	r3, #12
 8003264:	7812      	ldrb	r2, [r2, #0]
 8003266:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003280:	2300      	movs	r3, #0
 8003282:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 0301 	and.w	r3, r3, #1
 800328e:	2b01      	cmp	r3, #1
 8003290:	d119      	bne.n	80032c6 <HAL_SPI_TransmitReceive+0x2b6>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003296:	b29b      	uxth	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d014      	beq.n	80032c6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b01      	subs	r3, #1
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032c2:	2301      	movs	r3, #1
 80032c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032c6:	f7fe fb53 	bl	8001970 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d803      	bhi.n	80032de <HAL_SPI_TransmitReceive+0x2ce>
 80032d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032dc:	d102      	bne.n	80032e4 <HAL_SPI_TransmitReceive+0x2d4>
 80032de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d107      	bne.n	80032f4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80032f2:	e033      	b.n	800335c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d19e      	bne.n	800323c <HAL_SPI_TransmitReceive+0x22c>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d199      	bne.n	800323c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800330a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f91d 	bl	800354c <SPI_EndRxTxTransaction>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d006      	beq.n	8003326 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2220      	movs	r2, #32
 8003322:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003324:	e01a      	b.n	800335c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10a      	bne.n	8003344 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003352:	e003      	b.n	800335c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003364:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003368:	4618      	mov	r0, r3
 800336a:	3730      	adds	r7, #48	@ 0x30
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	4613      	mov	r3, r2
 800337e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003380:	f7fe faf6 	bl	8001970 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003388:	1a9b      	subs	r3, r3, r2
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	4413      	add	r3, r2
 800338e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003390:	f7fe faee 	bl	8001970 <HAL_GetTick>
 8003394:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003396:	4b39      	ldr	r3, [pc, #228]	@ (800347c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	015b      	lsls	r3, r3, #5
 800339c:	0d1b      	lsrs	r3, r3, #20
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	fb02 f303 	mul.w	r3, r2, r3
 80033a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033a6:	e054      	b.n	8003452 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	d050      	beq.n	8003452 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033b0:	f7fe fade 	bl	8001970 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	69fa      	ldr	r2, [r7, #28]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d902      	bls.n	80033c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d13d      	bne.n	8003442 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80033d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033de:	d111      	bne.n	8003404 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033e8:	d004      	beq.n	80033f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033f2:	d107      	bne.n	8003404 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003402:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800340c:	d10f      	bne.n	800342e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800342c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e017      	b.n	8003472 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	3b01      	subs	r3, #1
 8003450:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	4013      	ands	r3, r2
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	429a      	cmp	r2, r3
 8003460:	bf0c      	ite	eq
 8003462:	2301      	moveq	r3, #1
 8003464:	2300      	movne	r3, #0
 8003466:	b2db      	uxtb	r3, r3
 8003468:	461a      	mov	r2, r3
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	429a      	cmp	r2, r3
 800346e:	d19b      	bne.n	80033a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3720      	adds	r7, #32
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	2000000c 	.word	0x2000000c

08003480 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af02      	add	r7, sp, #8
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003494:	d111      	bne.n	80034ba <SPI_EndRxTransaction+0x3a>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800349e:	d004      	beq.n	80034aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a8:	d107      	bne.n	80034ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034c2:	d12a      	bne.n	800351a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034cc:	d012      	beq.n	80034f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2200      	movs	r2, #0
 80034d6:	2180      	movs	r1, #128	@ 0x80
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f7ff ff49 	bl	8003370 <SPI_WaitFlagStateUntilTimeout>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d02d      	beq.n	8003540 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e8:	f043 0220 	orr.w	r2, r3, #32
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e026      	b.n	8003542 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	2200      	movs	r2, #0
 80034fc:	2101      	movs	r1, #1
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff ff36 	bl	8003370 <SPI_WaitFlagStateUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d01a      	beq.n	8003540 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350e:	f043 0220 	orr.w	r2, r3, #32
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e013      	b.n	8003542 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2200      	movs	r2, #0
 8003522:	2101      	movs	r1, #1
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff ff23 	bl	8003370 <SPI_WaitFlagStateUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003534:	f043 0220 	orr.w	r2, r3, #32
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e000      	b.n	8003542 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003558:	4b1b      	ldr	r3, [pc, #108]	@ (80035c8 <SPI_EndRxTxTransaction+0x7c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1b      	ldr	r2, [pc, #108]	@ (80035cc <SPI_EndRxTxTransaction+0x80>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	0d5b      	lsrs	r3, r3, #21
 8003564:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003568:	fb02 f303 	mul.w	r3, r2, r3
 800356c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003576:	d112      	bne.n	800359e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	2200      	movs	r2, #0
 8003580:	2180      	movs	r1, #128	@ 0x80
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f7ff fef4 	bl	8003370 <SPI_WaitFlagStateUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d016      	beq.n	80035bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003592:	f043 0220 	orr.w	r2, r3, #32
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e00f      	b.n	80035be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	3b01      	subs	r3, #1
 80035a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b4:	2b80      	cmp	r3, #128	@ 0x80
 80035b6:	d0f2      	beq.n	800359e <SPI_EndRxTxTransaction+0x52>
 80035b8:	e000      	b.n	80035bc <SPI_EndRxTxTransaction+0x70>
        break;
 80035ba:	bf00      	nop
  }

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	2000000c 	.word	0x2000000c
 80035cc:	165e9f81 	.word	0x165e9f81

080035d0 <__cvt>:
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035d6:	461d      	mov	r5, r3
 80035d8:	bfbb      	ittet	lt
 80035da:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80035de:	461d      	movlt	r5, r3
 80035e0:	2300      	movge	r3, #0
 80035e2:	232d      	movlt	r3, #45	@ 0x2d
 80035e4:	b088      	sub	sp, #32
 80035e6:	4614      	mov	r4, r2
 80035e8:	bfb8      	it	lt
 80035ea:	4614      	movlt	r4, r2
 80035ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80035ee:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80035f0:	7013      	strb	r3, [r2, #0]
 80035f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80035f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80035f8:	f023 0820 	bic.w	r8, r3, #32
 80035fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003600:	d005      	beq.n	800360e <__cvt+0x3e>
 8003602:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003606:	d100      	bne.n	800360a <__cvt+0x3a>
 8003608:	3601      	adds	r6, #1
 800360a:	2302      	movs	r3, #2
 800360c:	e000      	b.n	8003610 <__cvt+0x40>
 800360e:	2303      	movs	r3, #3
 8003610:	aa07      	add	r2, sp, #28
 8003612:	9204      	str	r2, [sp, #16]
 8003614:	aa06      	add	r2, sp, #24
 8003616:	e9cd a202 	strd	sl, r2, [sp, #8]
 800361a:	e9cd 3600 	strd	r3, r6, [sp]
 800361e:	4622      	mov	r2, r4
 8003620:	462b      	mov	r3, r5
 8003622:	f000 ff41 	bl	80044a8 <_dtoa_r>
 8003626:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800362a:	4607      	mov	r7, r0
 800362c:	d119      	bne.n	8003662 <__cvt+0x92>
 800362e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003630:	07db      	lsls	r3, r3, #31
 8003632:	d50e      	bpl.n	8003652 <__cvt+0x82>
 8003634:	eb00 0906 	add.w	r9, r0, r6
 8003638:	2200      	movs	r2, #0
 800363a:	2300      	movs	r3, #0
 800363c:	4620      	mov	r0, r4
 800363e:	4629      	mov	r1, r5
 8003640:	f7fd f9ca 	bl	80009d8 <__aeabi_dcmpeq>
 8003644:	b108      	cbz	r0, 800364a <__cvt+0x7a>
 8003646:	f8cd 901c 	str.w	r9, [sp, #28]
 800364a:	2230      	movs	r2, #48	@ 0x30
 800364c:	9b07      	ldr	r3, [sp, #28]
 800364e:	454b      	cmp	r3, r9
 8003650:	d31e      	bcc.n	8003690 <__cvt+0xc0>
 8003652:	4638      	mov	r0, r7
 8003654:	9b07      	ldr	r3, [sp, #28]
 8003656:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003658:	1bdb      	subs	r3, r3, r7
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	b008      	add	sp, #32
 800365e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003662:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003666:	eb00 0906 	add.w	r9, r0, r6
 800366a:	d1e5      	bne.n	8003638 <__cvt+0x68>
 800366c:	7803      	ldrb	r3, [r0, #0]
 800366e:	2b30      	cmp	r3, #48	@ 0x30
 8003670:	d10a      	bne.n	8003688 <__cvt+0xb8>
 8003672:	2200      	movs	r2, #0
 8003674:	2300      	movs	r3, #0
 8003676:	4620      	mov	r0, r4
 8003678:	4629      	mov	r1, r5
 800367a:	f7fd f9ad 	bl	80009d8 <__aeabi_dcmpeq>
 800367e:	b918      	cbnz	r0, 8003688 <__cvt+0xb8>
 8003680:	f1c6 0601 	rsb	r6, r6, #1
 8003684:	f8ca 6000 	str.w	r6, [sl]
 8003688:	f8da 3000 	ldr.w	r3, [sl]
 800368c:	4499      	add	r9, r3
 800368e:	e7d3      	b.n	8003638 <__cvt+0x68>
 8003690:	1c59      	adds	r1, r3, #1
 8003692:	9107      	str	r1, [sp, #28]
 8003694:	701a      	strb	r2, [r3, #0]
 8003696:	e7d9      	b.n	800364c <__cvt+0x7c>

08003698 <__exponent>:
 8003698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800369a:	2900      	cmp	r1, #0
 800369c:	bfb6      	itet	lt
 800369e:	232d      	movlt	r3, #45	@ 0x2d
 80036a0:	232b      	movge	r3, #43	@ 0x2b
 80036a2:	4249      	neglt	r1, r1
 80036a4:	2909      	cmp	r1, #9
 80036a6:	7002      	strb	r2, [r0, #0]
 80036a8:	7043      	strb	r3, [r0, #1]
 80036aa:	dd29      	ble.n	8003700 <__exponent+0x68>
 80036ac:	f10d 0307 	add.w	r3, sp, #7
 80036b0:	461d      	mov	r5, r3
 80036b2:	270a      	movs	r7, #10
 80036b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80036b8:	461a      	mov	r2, r3
 80036ba:	fb07 1416 	mls	r4, r7, r6, r1
 80036be:	3430      	adds	r4, #48	@ 0x30
 80036c0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80036c4:	460c      	mov	r4, r1
 80036c6:	2c63      	cmp	r4, #99	@ 0x63
 80036c8:	4631      	mov	r1, r6
 80036ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80036ce:	dcf1      	bgt.n	80036b4 <__exponent+0x1c>
 80036d0:	3130      	adds	r1, #48	@ 0x30
 80036d2:	1e94      	subs	r4, r2, #2
 80036d4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80036d8:	4623      	mov	r3, r4
 80036da:	1c41      	adds	r1, r0, #1
 80036dc:	42ab      	cmp	r3, r5
 80036de:	d30a      	bcc.n	80036f6 <__exponent+0x5e>
 80036e0:	f10d 0309 	add.w	r3, sp, #9
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	42ac      	cmp	r4, r5
 80036e8:	bf88      	it	hi
 80036ea:	2300      	movhi	r3, #0
 80036ec:	3302      	adds	r3, #2
 80036ee:	4403      	add	r3, r0
 80036f0:	1a18      	subs	r0, r3, r0
 80036f2:	b003      	add	sp, #12
 80036f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036f6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80036fa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80036fe:	e7ed      	b.n	80036dc <__exponent+0x44>
 8003700:	2330      	movs	r3, #48	@ 0x30
 8003702:	3130      	adds	r1, #48	@ 0x30
 8003704:	7083      	strb	r3, [r0, #2]
 8003706:	70c1      	strb	r1, [r0, #3]
 8003708:	1d03      	adds	r3, r0, #4
 800370a:	e7f1      	b.n	80036f0 <__exponent+0x58>

0800370c <_printf_float>:
 800370c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003710:	b091      	sub	sp, #68	@ 0x44
 8003712:	460c      	mov	r4, r1
 8003714:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003718:	4616      	mov	r6, r2
 800371a:	461f      	mov	r7, r3
 800371c:	4605      	mov	r5, r0
 800371e:	f000 fdb3 	bl	8004288 <_localeconv_r>
 8003722:	6803      	ldr	r3, [r0, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	9308      	str	r3, [sp, #32]
 8003728:	f7fc fd2a 	bl	8000180 <strlen>
 800372c:	2300      	movs	r3, #0
 800372e:	930e      	str	r3, [sp, #56]	@ 0x38
 8003730:	f8d8 3000 	ldr.w	r3, [r8]
 8003734:	9009      	str	r0, [sp, #36]	@ 0x24
 8003736:	3307      	adds	r3, #7
 8003738:	f023 0307 	bic.w	r3, r3, #7
 800373c:	f103 0208 	add.w	r2, r3, #8
 8003740:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003744:	f8d4 b000 	ldr.w	fp, [r4]
 8003748:	f8c8 2000 	str.w	r2, [r8]
 800374c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003750:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003754:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003756:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800375a:	f04f 32ff 	mov.w	r2, #4294967295
 800375e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003762:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003766:	4b9c      	ldr	r3, [pc, #624]	@ (80039d8 <_printf_float+0x2cc>)
 8003768:	f7fd f968 	bl	8000a3c <__aeabi_dcmpun>
 800376c:	bb70      	cbnz	r0, 80037cc <_printf_float+0xc0>
 800376e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003772:	f04f 32ff 	mov.w	r2, #4294967295
 8003776:	4b98      	ldr	r3, [pc, #608]	@ (80039d8 <_printf_float+0x2cc>)
 8003778:	f7fd f942 	bl	8000a00 <__aeabi_dcmple>
 800377c:	bb30      	cbnz	r0, 80037cc <_printf_float+0xc0>
 800377e:	2200      	movs	r2, #0
 8003780:	2300      	movs	r3, #0
 8003782:	4640      	mov	r0, r8
 8003784:	4649      	mov	r1, r9
 8003786:	f7fd f931 	bl	80009ec <__aeabi_dcmplt>
 800378a:	b110      	cbz	r0, 8003792 <_printf_float+0x86>
 800378c:	232d      	movs	r3, #45	@ 0x2d
 800378e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003792:	4a92      	ldr	r2, [pc, #584]	@ (80039dc <_printf_float+0x2d0>)
 8003794:	4b92      	ldr	r3, [pc, #584]	@ (80039e0 <_printf_float+0x2d4>)
 8003796:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800379a:	bf94      	ite	ls
 800379c:	4690      	movls	r8, r2
 800379e:	4698      	movhi	r8, r3
 80037a0:	2303      	movs	r3, #3
 80037a2:	f04f 0900 	mov.w	r9, #0
 80037a6:	6123      	str	r3, [r4, #16]
 80037a8:	f02b 0304 	bic.w	r3, fp, #4
 80037ac:	6023      	str	r3, [r4, #0]
 80037ae:	4633      	mov	r3, r6
 80037b0:	4621      	mov	r1, r4
 80037b2:	4628      	mov	r0, r5
 80037b4:	9700      	str	r7, [sp, #0]
 80037b6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80037b8:	f000 f9d4 	bl	8003b64 <_printf_common>
 80037bc:	3001      	adds	r0, #1
 80037be:	f040 8090 	bne.w	80038e2 <_printf_float+0x1d6>
 80037c2:	f04f 30ff 	mov.w	r0, #4294967295
 80037c6:	b011      	add	sp, #68	@ 0x44
 80037c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037cc:	4642      	mov	r2, r8
 80037ce:	464b      	mov	r3, r9
 80037d0:	4640      	mov	r0, r8
 80037d2:	4649      	mov	r1, r9
 80037d4:	f7fd f932 	bl	8000a3c <__aeabi_dcmpun>
 80037d8:	b148      	cbz	r0, 80037ee <_printf_float+0xe2>
 80037da:	464b      	mov	r3, r9
 80037dc:	2b00      	cmp	r3, #0
 80037de:	bfb8      	it	lt
 80037e0:	232d      	movlt	r3, #45	@ 0x2d
 80037e2:	4a80      	ldr	r2, [pc, #512]	@ (80039e4 <_printf_float+0x2d8>)
 80037e4:	bfb8      	it	lt
 80037e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80037ea:	4b7f      	ldr	r3, [pc, #508]	@ (80039e8 <_printf_float+0x2dc>)
 80037ec:	e7d3      	b.n	8003796 <_printf_float+0x8a>
 80037ee:	6863      	ldr	r3, [r4, #4]
 80037f0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	d13f      	bne.n	8003878 <_printf_float+0x16c>
 80037f8:	2306      	movs	r3, #6
 80037fa:	6063      	str	r3, [r4, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003802:	6023      	str	r3, [r4, #0]
 8003804:	9206      	str	r2, [sp, #24]
 8003806:	aa0e      	add	r2, sp, #56	@ 0x38
 8003808:	e9cd a204 	strd	sl, r2, [sp, #16]
 800380c:	aa0d      	add	r2, sp, #52	@ 0x34
 800380e:	9203      	str	r2, [sp, #12]
 8003810:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003814:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003818:	6863      	ldr	r3, [r4, #4]
 800381a:	4642      	mov	r2, r8
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	4628      	mov	r0, r5
 8003820:	464b      	mov	r3, r9
 8003822:	910a      	str	r1, [sp, #40]	@ 0x28
 8003824:	f7ff fed4 	bl	80035d0 <__cvt>
 8003828:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800382a:	4680      	mov	r8, r0
 800382c:	2947      	cmp	r1, #71	@ 0x47
 800382e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003830:	d128      	bne.n	8003884 <_printf_float+0x178>
 8003832:	1cc8      	adds	r0, r1, #3
 8003834:	db02      	blt.n	800383c <_printf_float+0x130>
 8003836:	6863      	ldr	r3, [r4, #4]
 8003838:	4299      	cmp	r1, r3
 800383a:	dd40      	ble.n	80038be <_printf_float+0x1b2>
 800383c:	f1aa 0a02 	sub.w	sl, sl, #2
 8003840:	fa5f fa8a 	uxtb.w	sl, sl
 8003844:	4652      	mov	r2, sl
 8003846:	3901      	subs	r1, #1
 8003848:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800384c:	910d      	str	r1, [sp, #52]	@ 0x34
 800384e:	f7ff ff23 	bl	8003698 <__exponent>
 8003852:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003854:	4681      	mov	r9, r0
 8003856:	1813      	adds	r3, r2, r0
 8003858:	2a01      	cmp	r2, #1
 800385a:	6123      	str	r3, [r4, #16]
 800385c:	dc02      	bgt.n	8003864 <_printf_float+0x158>
 800385e:	6822      	ldr	r2, [r4, #0]
 8003860:	07d2      	lsls	r2, r2, #31
 8003862:	d501      	bpl.n	8003868 <_printf_float+0x15c>
 8003864:	3301      	adds	r3, #1
 8003866:	6123      	str	r3, [r4, #16]
 8003868:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800386c:	2b00      	cmp	r3, #0
 800386e:	d09e      	beq.n	80037ae <_printf_float+0xa2>
 8003870:	232d      	movs	r3, #45	@ 0x2d
 8003872:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003876:	e79a      	b.n	80037ae <_printf_float+0xa2>
 8003878:	2947      	cmp	r1, #71	@ 0x47
 800387a:	d1bf      	bne.n	80037fc <_printf_float+0xf0>
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1bd      	bne.n	80037fc <_printf_float+0xf0>
 8003880:	2301      	movs	r3, #1
 8003882:	e7ba      	b.n	80037fa <_printf_float+0xee>
 8003884:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003888:	d9dc      	bls.n	8003844 <_printf_float+0x138>
 800388a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800388e:	d118      	bne.n	80038c2 <_printf_float+0x1b6>
 8003890:	2900      	cmp	r1, #0
 8003892:	6863      	ldr	r3, [r4, #4]
 8003894:	dd0b      	ble.n	80038ae <_printf_float+0x1a2>
 8003896:	6121      	str	r1, [r4, #16]
 8003898:	b913      	cbnz	r3, 80038a0 <_printf_float+0x194>
 800389a:	6822      	ldr	r2, [r4, #0]
 800389c:	07d0      	lsls	r0, r2, #31
 800389e:	d502      	bpl.n	80038a6 <_printf_float+0x19a>
 80038a0:	3301      	adds	r3, #1
 80038a2:	440b      	add	r3, r1
 80038a4:	6123      	str	r3, [r4, #16]
 80038a6:	f04f 0900 	mov.w	r9, #0
 80038aa:	65a1      	str	r1, [r4, #88]	@ 0x58
 80038ac:	e7dc      	b.n	8003868 <_printf_float+0x15c>
 80038ae:	b913      	cbnz	r3, 80038b6 <_printf_float+0x1aa>
 80038b0:	6822      	ldr	r2, [r4, #0]
 80038b2:	07d2      	lsls	r2, r2, #31
 80038b4:	d501      	bpl.n	80038ba <_printf_float+0x1ae>
 80038b6:	3302      	adds	r3, #2
 80038b8:	e7f4      	b.n	80038a4 <_printf_float+0x198>
 80038ba:	2301      	movs	r3, #1
 80038bc:	e7f2      	b.n	80038a4 <_printf_float+0x198>
 80038be:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80038c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80038c4:	4299      	cmp	r1, r3
 80038c6:	db05      	blt.n	80038d4 <_printf_float+0x1c8>
 80038c8:	6823      	ldr	r3, [r4, #0]
 80038ca:	6121      	str	r1, [r4, #16]
 80038cc:	07d8      	lsls	r0, r3, #31
 80038ce:	d5ea      	bpl.n	80038a6 <_printf_float+0x19a>
 80038d0:	1c4b      	adds	r3, r1, #1
 80038d2:	e7e7      	b.n	80038a4 <_printf_float+0x198>
 80038d4:	2900      	cmp	r1, #0
 80038d6:	bfcc      	ite	gt
 80038d8:	2201      	movgt	r2, #1
 80038da:	f1c1 0202 	rsble	r2, r1, #2
 80038de:	4413      	add	r3, r2
 80038e0:	e7e0      	b.n	80038a4 <_printf_float+0x198>
 80038e2:	6823      	ldr	r3, [r4, #0]
 80038e4:	055a      	lsls	r2, r3, #21
 80038e6:	d407      	bmi.n	80038f8 <_printf_float+0x1ec>
 80038e8:	6923      	ldr	r3, [r4, #16]
 80038ea:	4642      	mov	r2, r8
 80038ec:	4631      	mov	r1, r6
 80038ee:	4628      	mov	r0, r5
 80038f0:	47b8      	blx	r7
 80038f2:	3001      	adds	r0, #1
 80038f4:	d12b      	bne.n	800394e <_printf_float+0x242>
 80038f6:	e764      	b.n	80037c2 <_printf_float+0xb6>
 80038f8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80038fc:	f240 80dc 	bls.w	8003ab8 <_printf_float+0x3ac>
 8003900:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003904:	2200      	movs	r2, #0
 8003906:	2300      	movs	r3, #0
 8003908:	f7fd f866 	bl	80009d8 <__aeabi_dcmpeq>
 800390c:	2800      	cmp	r0, #0
 800390e:	d033      	beq.n	8003978 <_printf_float+0x26c>
 8003910:	2301      	movs	r3, #1
 8003912:	4631      	mov	r1, r6
 8003914:	4628      	mov	r0, r5
 8003916:	4a35      	ldr	r2, [pc, #212]	@ (80039ec <_printf_float+0x2e0>)
 8003918:	47b8      	blx	r7
 800391a:	3001      	adds	r0, #1
 800391c:	f43f af51 	beq.w	80037c2 <_printf_float+0xb6>
 8003920:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003924:	4543      	cmp	r3, r8
 8003926:	db02      	blt.n	800392e <_printf_float+0x222>
 8003928:	6823      	ldr	r3, [r4, #0]
 800392a:	07d8      	lsls	r0, r3, #31
 800392c:	d50f      	bpl.n	800394e <_printf_float+0x242>
 800392e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003932:	4631      	mov	r1, r6
 8003934:	4628      	mov	r0, r5
 8003936:	47b8      	blx	r7
 8003938:	3001      	adds	r0, #1
 800393a:	f43f af42 	beq.w	80037c2 <_printf_float+0xb6>
 800393e:	f04f 0900 	mov.w	r9, #0
 8003942:	f108 38ff 	add.w	r8, r8, #4294967295
 8003946:	f104 0a1a 	add.w	sl, r4, #26
 800394a:	45c8      	cmp	r8, r9
 800394c:	dc09      	bgt.n	8003962 <_printf_float+0x256>
 800394e:	6823      	ldr	r3, [r4, #0]
 8003950:	079b      	lsls	r3, r3, #30
 8003952:	f100 8102 	bmi.w	8003b5a <_printf_float+0x44e>
 8003956:	68e0      	ldr	r0, [r4, #12]
 8003958:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800395a:	4298      	cmp	r0, r3
 800395c:	bfb8      	it	lt
 800395e:	4618      	movlt	r0, r3
 8003960:	e731      	b.n	80037c6 <_printf_float+0xba>
 8003962:	2301      	movs	r3, #1
 8003964:	4652      	mov	r2, sl
 8003966:	4631      	mov	r1, r6
 8003968:	4628      	mov	r0, r5
 800396a:	47b8      	blx	r7
 800396c:	3001      	adds	r0, #1
 800396e:	f43f af28 	beq.w	80037c2 <_printf_float+0xb6>
 8003972:	f109 0901 	add.w	r9, r9, #1
 8003976:	e7e8      	b.n	800394a <_printf_float+0x23e>
 8003978:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800397a:	2b00      	cmp	r3, #0
 800397c:	dc38      	bgt.n	80039f0 <_printf_float+0x2e4>
 800397e:	2301      	movs	r3, #1
 8003980:	4631      	mov	r1, r6
 8003982:	4628      	mov	r0, r5
 8003984:	4a19      	ldr	r2, [pc, #100]	@ (80039ec <_printf_float+0x2e0>)
 8003986:	47b8      	blx	r7
 8003988:	3001      	adds	r0, #1
 800398a:	f43f af1a 	beq.w	80037c2 <_printf_float+0xb6>
 800398e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003992:	ea59 0303 	orrs.w	r3, r9, r3
 8003996:	d102      	bne.n	800399e <_printf_float+0x292>
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	07d9      	lsls	r1, r3, #31
 800399c:	d5d7      	bpl.n	800394e <_printf_float+0x242>
 800399e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80039a2:	4631      	mov	r1, r6
 80039a4:	4628      	mov	r0, r5
 80039a6:	47b8      	blx	r7
 80039a8:	3001      	adds	r0, #1
 80039aa:	f43f af0a 	beq.w	80037c2 <_printf_float+0xb6>
 80039ae:	f04f 0a00 	mov.w	sl, #0
 80039b2:	f104 0b1a 	add.w	fp, r4, #26
 80039b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80039b8:	425b      	negs	r3, r3
 80039ba:	4553      	cmp	r3, sl
 80039bc:	dc01      	bgt.n	80039c2 <_printf_float+0x2b6>
 80039be:	464b      	mov	r3, r9
 80039c0:	e793      	b.n	80038ea <_printf_float+0x1de>
 80039c2:	2301      	movs	r3, #1
 80039c4:	465a      	mov	r2, fp
 80039c6:	4631      	mov	r1, r6
 80039c8:	4628      	mov	r0, r5
 80039ca:	47b8      	blx	r7
 80039cc:	3001      	adds	r0, #1
 80039ce:	f43f aef8 	beq.w	80037c2 <_printf_float+0xb6>
 80039d2:	f10a 0a01 	add.w	sl, sl, #1
 80039d6:	e7ee      	b.n	80039b6 <_printf_float+0x2aa>
 80039d8:	7fefffff 	.word	0x7fefffff
 80039dc:	08005ff4 	.word	0x08005ff4
 80039e0:	08005ff8 	.word	0x08005ff8
 80039e4:	08005ffc 	.word	0x08005ffc
 80039e8:	08006000 	.word	0x08006000
 80039ec:	08006004 	.word	0x08006004
 80039f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80039f2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80039f6:	4553      	cmp	r3, sl
 80039f8:	bfa8      	it	ge
 80039fa:	4653      	movge	r3, sl
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	4699      	mov	r9, r3
 8003a00:	dc36      	bgt.n	8003a70 <_printf_float+0x364>
 8003a02:	f04f 0b00 	mov.w	fp, #0
 8003a06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a0a:	f104 021a 	add.w	r2, r4, #26
 8003a0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003a10:	930a      	str	r3, [sp, #40]	@ 0x28
 8003a12:	eba3 0309 	sub.w	r3, r3, r9
 8003a16:	455b      	cmp	r3, fp
 8003a18:	dc31      	bgt.n	8003a7e <_printf_float+0x372>
 8003a1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a1c:	459a      	cmp	sl, r3
 8003a1e:	dc3a      	bgt.n	8003a96 <_printf_float+0x38a>
 8003a20:	6823      	ldr	r3, [r4, #0]
 8003a22:	07da      	lsls	r2, r3, #31
 8003a24:	d437      	bmi.n	8003a96 <_printf_float+0x38a>
 8003a26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a28:	ebaa 0903 	sub.w	r9, sl, r3
 8003a2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003a2e:	ebaa 0303 	sub.w	r3, sl, r3
 8003a32:	4599      	cmp	r9, r3
 8003a34:	bfa8      	it	ge
 8003a36:	4699      	movge	r9, r3
 8003a38:	f1b9 0f00 	cmp.w	r9, #0
 8003a3c:	dc33      	bgt.n	8003aa6 <_printf_float+0x39a>
 8003a3e:	f04f 0800 	mov.w	r8, #0
 8003a42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a46:	f104 0b1a 	add.w	fp, r4, #26
 8003a4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003a4c:	ebaa 0303 	sub.w	r3, sl, r3
 8003a50:	eba3 0309 	sub.w	r3, r3, r9
 8003a54:	4543      	cmp	r3, r8
 8003a56:	f77f af7a 	ble.w	800394e <_printf_float+0x242>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	465a      	mov	r2, fp
 8003a5e:	4631      	mov	r1, r6
 8003a60:	4628      	mov	r0, r5
 8003a62:	47b8      	blx	r7
 8003a64:	3001      	adds	r0, #1
 8003a66:	f43f aeac 	beq.w	80037c2 <_printf_float+0xb6>
 8003a6a:	f108 0801 	add.w	r8, r8, #1
 8003a6e:	e7ec      	b.n	8003a4a <_printf_float+0x33e>
 8003a70:	4642      	mov	r2, r8
 8003a72:	4631      	mov	r1, r6
 8003a74:	4628      	mov	r0, r5
 8003a76:	47b8      	blx	r7
 8003a78:	3001      	adds	r0, #1
 8003a7a:	d1c2      	bne.n	8003a02 <_printf_float+0x2f6>
 8003a7c:	e6a1      	b.n	80037c2 <_printf_float+0xb6>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	4631      	mov	r1, r6
 8003a82:	4628      	mov	r0, r5
 8003a84:	920a      	str	r2, [sp, #40]	@ 0x28
 8003a86:	47b8      	blx	r7
 8003a88:	3001      	adds	r0, #1
 8003a8a:	f43f ae9a 	beq.w	80037c2 <_printf_float+0xb6>
 8003a8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003a90:	f10b 0b01 	add.w	fp, fp, #1
 8003a94:	e7bb      	b.n	8003a0e <_printf_float+0x302>
 8003a96:	4631      	mov	r1, r6
 8003a98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003a9c:	4628      	mov	r0, r5
 8003a9e:	47b8      	blx	r7
 8003aa0:	3001      	adds	r0, #1
 8003aa2:	d1c0      	bne.n	8003a26 <_printf_float+0x31a>
 8003aa4:	e68d      	b.n	80037c2 <_printf_float+0xb6>
 8003aa6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003aa8:	464b      	mov	r3, r9
 8003aaa:	4631      	mov	r1, r6
 8003aac:	4628      	mov	r0, r5
 8003aae:	4442      	add	r2, r8
 8003ab0:	47b8      	blx	r7
 8003ab2:	3001      	adds	r0, #1
 8003ab4:	d1c3      	bne.n	8003a3e <_printf_float+0x332>
 8003ab6:	e684      	b.n	80037c2 <_printf_float+0xb6>
 8003ab8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003abc:	f1ba 0f01 	cmp.w	sl, #1
 8003ac0:	dc01      	bgt.n	8003ac6 <_printf_float+0x3ba>
 8003ac2:	07db      	lsls	r3, r3, #31
 8003ac4:	d536      	bpl.n	8003b34 <_printf_float+0x428>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	4642      	mov	r2, r8
 8003aca:	4631      	mov	r1, r6
 8003acc:	4628      	mov	r0, r5
 8003ace:	47b8      	blx	r7
 8003ad0:	3001      	adds	r0, #1
 8003ad2:	f43f ae76 	beq.w	80037c2 <_printf_float+0xb6>
 8003ad6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003ada:	4631      	mov	r1, r6
 8003adc:	4628      	mov	r0, r5
 8003ade:	47b8      	blx	r7
 8003ae0:	3001      	adds	r0, #1
 8003ae2:	f43f ae6e 	beq.w	80037c2 <_printf_float+0xb6>
 8003ae6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003aea:	2200      	movs	r2, #0
 8003aec:	2300      	movs	r3, #0
 8003aee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003af2:	f7fc ff71 	bl	80009d8 <__aeabi_dcmpeq>
 8003af6:	b9c0      	cbnz	r0, 8003b2a <_printf_float+0x41e>
 8003af8:	4653      	mov	r3, sl
 8003afa:	f108 0201 	add.w	r2, r8, #1
 8003afe:	4631      	mov	r1, r6
 8003b00:	4628      	mov	r0, r5
 8003b02:	47b8      	blx	r7
 8003b04:	3001      	adds	r0, #1
 8003b06:	d10c      	bne.n	8003b22 <_printf_float+0x416>
 8003b08:	e65b      	b.n	80037c2 <_printf_float+0xb6>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	465a      	mov	r2, fp
 8003b0e:	4631      	mov	r1, r6
 8003b10:	4628      	mov	r0, r5
 8003b12:	47b8      	blx	r7
 8003b14:	3001      	adds	r0, #1
 8003b16:	f43f ae54 	beq.w	80037c2 <_printf_float+0xb6>
 8003b1a:	f108 0801 	add.w	r8, r8, #1
 8003b1e:	45d0      	cmp	r8, sl
 8003b20:	dbf3      	blt.n	8003b0a <_printf_float+0x3fe>
 8003b22:	464b      	mov	r3, r9
 8003b24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003b28:	e6e0      	b.n	80038ec <_printf_float+0x1e0>
 8003b2a:	f04f 0800 	mov.w	r8, #0
 8003b2e:	f104 0b1a 	add.w	fp, r4, #26
 8003b32:	e7f4      	b.n	8003b1e <_printf_float+0x412>
 8003b34:	2301      	movs	r3, #1
 8003b36:	4642      	mov	r2, r8
 8003b38:	e7e1      	b.n	8003afe <_printf_float+0x3f2>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	464a      	mov	r2, r9
 8003b3e:	4631      	mov	r1, r6
 8003b40:	4628      	mov	r0, r5
 8003b42:	47b8      	blx	r7
 8003b44:	3001      	adds	r0, #1
 8003b46:	f43f ae3c 	beq.w	80037c2 <_printf_float+0xb6>
 8003b4a:	f108 0801 	add.w	r8, r8, #1
 8003b4e:	68e3      	ldr	r3, [r4, #12]
 8003b50:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003b52:	1a5b      	subs	r3, r3, r1
 8003b54:	4543      	cmp	r3, r8
 8003b56:	dcf0      	bgt.n	8003b3a <_printf_float+0x42e>
 8003b58:	e6fd      	b.n	8003956 <_printf_float+0x24a>
 8003b5a:	f04f 0800 	mov.w	r8, #0
 8003b5e:	f104 0919 	add.w	r9, r4, #25
 8003b62:	e7f4      	b.n	8003b4e <_printf_float+0x442>

08003b64 <_printf_common>:
 8003b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b68:	4616      	mov	r6, r2
 8003b6a:	4698      	mov	r8, r3
 8003b6c:	688a      	ldr	r2, [r1, #8]
 8003b6e:	690b      	ldr	r3, [r1, #16]
 8003b70:	4607      	mov	r7, r0
 8003b72:	4293      	cmp	r3, r2
 8003b74:	bfb8      	it	lt
 8003b76:	4613      	movlt	r3, r2
 8003b78:	6033      	str	r3, [r6, #0]
 8003b7a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b7e:	460c      	mov	r4, r1
 8003b80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b84:	b10a      	cbz	r2, 8003b8a <_printf_common+0x26>
 8003b86:	3301      	adds	r3, #1
 8003b88:	6033      	str	r3, [r6, #0]
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	0699      	lsls	r1, r3, #26
 8003b8e:	bf42      	ittt	mi
 8003b90:	6833      	ldrmi	r3, [r6, #0]
 8003b92:	3302      	addmi	r3, #2
 8003b94:	6033      	strmi	r3, [r6, #0]
 8003b96:	6825      	ldr	r5, [r4, #0]
 8003b98:	f015 0506 	ands.w	r5, r5, #6
 8003b9c:	d106      	bne.n	8003bac <_printf_common+0x48>
 8003b9e:	f104 0a19 	add.w	sl, r4, #25
 8003ba2:	68e3      	ldr	r3, [r4, #12]
 8003ba4:	6832      	ldr	r2, [r6, #0]
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	42ab      	cmp	r3, r5
 8003baa:	dc2b      	bgt.n	8003c04 <_printf_common+0xa0>
 8003bac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003bb0:	6822      	ldr	r2, [r4, #0]
 8003bb2:	3b00      	subs	r3, #0
 8003bb4:	bf18      	it	ne
 8003bb6:	2301      	movne	r3, #1
 8003bb8:	0692      	lsls	r2, r2, #26
 8003bba:	d430      	bmi.n	8003c1e <_printf_common+0xba>
 8003bbc:	4641      	mov	r1, r8
 8003bbe:	4638      	mov	r0, r7
 8003bc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003bc4:	47c8      	blx	r9
 8003bc6:	3001      	adds	r0, #1
 8003bc8:	d023      	beq.n	8003c12 <_printf_common+0xae>
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	6922      	ldr	r2, [r4, #16]
 8003bce:	f003 0306 	and.w	r3, r3, #6
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	bf14      	ite	ne
 8003bd6:	2500      	movne	r5, #0
 8003bd8:	6833      	ldreq	r3, [r6, #0]
 8003bda:	f04f 0600 	mov.w	r6, #0
 8003bde:	bf08      	it	eq
 8003be0:	68e5      	ldreq	r5, [r4, #12]
 8003be2:	f104 041a 	add.w	r4, r4, #26
 8003be6:	bf08      	it	eq
 8003be8:	1aed      	subeq	r5, r5, r3
 8003bea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003bee:	bf08      	it	eq
 8003bf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	bfc4      	itt	gt
 8003bf8:	1a9b      	subgt	r3, r3, r2
 8003bfa:	18ed      	addgt	r5, r5, r3
 8003bfc:	42b5      	cmp	r5, r6
 8003bfe:	d11a      	bne.n	8003c36 <_printf_common+0xd2>
 8003c00:	2000      	movs	r0, #0
 8003c02:	e008      	b.n	8003c16 <_printf_common+0xb2>
 8003c04:	2301      	movs	r3, #1
 8003c06:	4652      	mov	r2, sl
 8003c08:	4641      	mov	r1, r8
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	47c8      	blx	r9
 8003c0e:	3001      	adds	r0, #1
 8003c10:	d103      	bne.n	8003c1a <_printf_common+0xb6>
 8003c12:	f04f 30ff 	mov.w	r0, #4294967295
 8003c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c1a:	3501      	adds	r5, #1
 8003c1c:	e7c1      	b.n	8003ba2 <_printf_common+0x3e>
 8003c1e:	2030      	movs	r0, #48	@ 0x30
 8003c20:	18e1      	adds	r1, r4, r3
 8003c22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c2c:	4422      	add	r2, r4
 8003c2e:	3302      	adds	r3, #2
 8003c30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c34:	e7c2      	b.n	8003bbc <_printf_common+0x58>
 8003c36:	2301      	movs	r3, #1
 8003c38:	4622      	mov	r2, r4
 8003c3a:	4641      	mov	r1, r8
 8003c3c:	4638      	mov	r0, r7
 8003c3e:	47c8      	blx	r9
 8003c40:	3001      	adds	r0, #1
 8003c42:	d0e6      	beq.n	8003c12 <_printf_common+0xae>
 8003c44:	3601      	adds	r6, #1
 8003c46:	e7d9      	b.n	8003bfc <_printf_common+0x98>

08003c48 <_printf_i>:
 8003c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c4c:	7e0f      	ldrb	r7, [r1, #24]
 8003c4e:	4691      	mov	r9, r2
 8003c50:	2f78      	cmp	r7, #120	@ 0x78
 8003c52:	4680      	mov	r8, r0
 8003c54:	460c      	mov	r4, r1
 8003c56:	469a      	mov	sl, r3
 8003c58:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c5e:	d807      	bhi.n	8003c70 <_printf_i+0x28>
 8003c60:	2f62      	cmp	r7, #98	@ 0x62
 8003c62:	d80a      	bhi.n	8003c7a <_printf_i+0x32>
 8003c64:	2f00      	cmp	r7, #0
 8003c66:	f000 80d3 	beq.w	8003e10 <_printf_i+0x1c8>
 8003c6a:	2f58      	cmp	r7, #88	@ 0x58
 8003c6c:	f000 80ba 	beq.w	8003de4 <_printf_i+0x19c>
 8003c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c78:	e03a      	b.n	8003cf0 <_printf_i+0xa8>
 8003c7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c7e:	2b15      	cmp	r3, #21
 8003c80:	d8f6      	bhi.n	8003c70 <_printf_i+0x28>
 8003c82:	a101      	add	r1, pc, #4	@ (adr r1, 8003c88 <_printf_i+0x40>)
 8003c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c88:	08003ce1 	.word	0x08003ce1
 8003c8c:	08003cf5 	.word	0x08003cf5
 8003c90:	08003c71 	.word	0x08003c71
 8003c94:	08003c71 	.word	0x08003c71
 8003c98:	08003c71 	.word	0x08003c71
 8003c9c:	08003c71 	.word	0x08003c71
 8003ca0:	08003cf5 	.word	0x08003cf5
 8003ca4:	08003c71 	.word	0x08003c71
 8003ca8:	08003c71 	.word	0x08003c71
 8003cac:	08003c71 	.word	0x08003c71
 8003cb0:	08003c71 	.word	0x08003c71
 8003cb4:	08003df7 	.word	0x08003df7
 8003cb8:	08003d1f 	.word	0x08003d1f
 8003cbc:	08003db1 	.word	0x08003db1
 8003cc0:	08003c71 	.word	0x08003c71
 8003cc4:	08003c71 	.word	0x08003c71
 8003cc8:	08003e19 	.word	0x08003e19
 8003ccc:	08003c71 	.word	0x08003c71
 8003cd0:	08003d1f 	.word	0x08003d1f
 8003cd4:	08003c71 	.word	0x08003c71
 8003cd8:	08003c71 	.word	0x08003c71
 8003cdc:	08003db9 	.word	0x08003db9
 8003ce0:	6833      	ldr	r3, [r6, #0]
 8003ce2:	1d1a      	adds	r2, r3, #4
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6032      	str	r2, [r6, #0]
 8003ce8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e09e      	b.n	8003e32 <_printf_i+0x1ea>
 8003cf4:	6833      	ldr	r3, [r6, #0]
 8003cf6:	6820      	ldr	r0, [r4, #0]
 8003cf8:	1d19      	adds	r1, r3, #4
 8003cfa:	6031      	str	r1, [r6, #0]
 8003cfc:	0606      	lsls	r6, r0, #24
 8003cfe:	d501      	bpl.n	8003d04 <_printf_i+0xbc>
 8003d00:	681d      	ldr	r5, [r3, #0]
 8003d02:	e003      	b.n	8003d0c <_printf_i+0xc4>
 8003d04:	0645      	lsls	r5, r0, #25
 8003d06:	d5fb      	bpl.n	8003d00 <_printf_i+0xb8>
 8003d08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d0c:	2d00      	cmp	r5, #0
 8003d0e:	da03      	bge.n	8003d18 <_printf_i+0xd0>
 8003d10:	232d      	movs	r3, #45	@ 0x2d
 8003d12:	426d      	negs	r5, r5
 8003d14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d18:	230a      	movs	r3, #10
 8003d1a:	4859      	ldr	r0, [pc, #356]	@ (8003e80 <_printf_i+0x238>)
 8003d1c:	e011      	b.n	8003d42 <_printf_i+0xfa>
 8003d1e:	6821      	ldr	r1, [r4, #0]
 8003d20:	6833      	ldr	r3, [r6, #0]
 8003d22:	0608      	lsls	r0, r1, #24
 8003d24:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d28:	d402      	bmi.n	8003d30 <_printf_i+0xe8>
 8003d2a:	0649      	lsls	r1, r1, #25
 8003d2c:	bf48      	it	mi
 8003d2e:	b2ad      	uxthmi	r5, r5
 8003d30:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d32:	6033      	str	r3, [r6, #0]
 8003d34:	bf14      	ite	ne
 8003d36:	230a      	movne	r3, #10
 8003d38:	2308      	moveq	r3, #8
 8003d3a:	4851      	ldr	r0, [pc, #324]	@ (8003e80 <_printf_i+0x238>)
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d42:	6866      	ldr	r6, [r4, #4]
 8003d44:	2e00      	cmp	r6, #0
 8003d46:	bfa8      	it	ge
 8003d48:	6821      	ldrge	r1, [r4, #0]
 8003d4a:	60a6      	str	r6, [r4, #8]
 8003d4c:	bfa4      	itt	ge
 8003d4e:	f021 0104 	bicge.w	r1, r1, #4
 8003d52:	6021      	strge	r1, [r4, #0]
 8003d54:	b90d      	cbnz	r5, 8003d5a <_printf_i+0x112>
 8003d56:	2e00      	cmp	r6, #0
 8003d58:	d04b      	beq.n	8003df2 <_printf_i+0x1aa>
 8003d5a:	4616      	mov	r6, r2
 8003d5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d60:	fb03 5711 	mls	r7, r3, r1, r5
 8003d64:	5dc7      	ldrb	r7, [r0, r7]
 8003d66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d6a:	462f      	mov	r7, r5
 8003d6c:	42bb      	cmp	r3, r7
 8003d6e:	460d      	mov	r5, r1
 8003d70:	d9f4      	bls.n	8003d5c <_printf_i+0x114>
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d10b      	bne.n	8003d8e <_printf_i+0x146>
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	07df      	lsls	r7, r3, #31
 8003d7a:	d508      	bpl.n	8003d8e <_printf_i+0x146>
 8003d7c:	6923      	ldr	r3, [r4, #16]
 8003d7e:	6861      	ldr	r1, [r4, #4]
 8003d80:	4299      	cmp	r1, r3
 8003d82:	bfde      	ittt	le
 8003d84:	2330      	movle	r3, #48	@ 0x30
 8003d86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d8e:	1b92      	subs	r2, r2, r6
 8003d90:	6122      	str	r2, [r4, #16]
 8003d92:	464b      	mov	r3, r9
 8003d94:	4621      	mov	r1, r4
 8003d96:	4640      	mov	r0, r8
 8003d98:	f8cd a000 	str.w	sl, [sp]
 8003d9c:	aa03      	add	r2, sp, #12
 8003d9e:	f7ff fee1 	bl	8003b64 <_printf_common>
 8003da2:	3001      	adds	r0, #1
 8003da4:	d14a      	bne.n	8003e3c <_printf_i+0x1f4>
 8003da6:	f04f 30ff 	mov.w	r0, #4294967295
 8003daa:	b004      	add	sp, #16
 8003dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	f043 0320 	orr.w	r3, r3, #32
 8003db6:	6023      	str	r3, [r4, #0]
 8003db8:	2778      	movs	r7, #120	@ 0x78
 8003dba:	4832      	ldr	r0, [pc, #200]	@ (8003e84 <_printf_i+0x23c>)
 8003dbc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003dc0:	6823      	ldr	r3, [r4, #0]
 8003dc2:	6831      	ldr	r1, [r6, #0]
 8003dc4:	061f      	lsls	r7, r3, #24
 8003dc6:	f851 5b04 	ldr.w	r5, [r1], #4
 8003dca:	d402      	bmi.n	8003dd2 <_printf_i+0x18a>
 8003dcc:	065f      	lsls	r7, r3, #25
 8003dce:	bf48      	it	mi
 8003dd0:	b2ad      	uxthmi	r5, r5
 8003dd2:	6031      	str	r1, [r6, #0]
 8003dd4:	07d9      	lsls	r1, r3, #31
 8003dd6:	bf44      	itt	mi
 8003dd8:	f043 0320 	orrmi.w	r3, r3, #32
 8003ddc:	6023      	strmi	r3, [r4, #0]
 8003dde:	b11d      	cbz	r5, 8003de8 <_printf_i+0x1a0>
 8003de0:	2310      	movs	r3, #16
 8003de2:	e7ab      	b.n	8003d3c <_printf_i+0xf4>
 8003de4:	4826      	ldr	r0, [pc, #152]	@ (8003e80 <_printf_i+0x238>)
 8003de6:	e7e9      	b.n	8003dbc <_printf_i+0x174>
 8003de8:	6823      	ldr	r3, [r4, #0]
 8003dea:	f023 0320 	bic.w	r3, r3, #32
 8003dee:	6023      	str	r3, [r4, #0]
 8003df0:	e7f6      	b.n	8003de0 <_printf_i+0x198>
 8003df2:	4616      	mov	r6, r2
 8003df4:	e7bd      	b.n	8003d72 <_printf_i+0x12a>
 8003df6:	6833      	ldr	r3, [r6, #0]
 8003df8:	6825      	ldr	r5, [r4, #0]
 8003dfa:	1d18      	adds	r0, r3, #4
 8003dfc:	6961      	ldr	r1, [r4, #20]
 8003dfe:	6030      	str	r0, [r6, #0]
 8003e00:	062e      	lsls	r6, r5, #24
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	d501      	bpl.n	8003e0a <_printf_i+0x1c2>
 8003e06:	6019      	str	r1, [r3, #0]
 8003e08:	e002      	b.n	8003e10 <_printf_i+0x1c8>
 8003e0a:	0668      	lsls	r0, r5, #25
 8003e0c:	d5fb      	bpl.n	8003e06 <_printf_i+0x1be>
 8003e0e:	8019      	strh	r1, [r3, #0]
 8003e10:	2300      	movs	r3, #0
 8003e12:	4616      	mov	r6, r2
 8003e14:	6123      	str	r3, [r4, #16]
 8003e16:	e7bc      	b.n	8003d92 <_printf_i+0x14a>
 8003e18:	6833      	ldr	r3, [r6, #0]
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	1d1a      	adds	r2, r3, #4
 8003e1e:	6032      	str	r2, [r6, #0]
 8003e20:	681e      	ldr	r6, [r3, #0]
 8003e22:	6862      	ldr	r2, [r4, #4]
 8003e24:	4630      	mov	r0, r6
 8003e26:	f000 faa6 	bl	8004376 <memchr>
 8003e2a:	b108      	cbz	r0, 8003e30 <_printf_i+0x1e8>
 8003e2c:	1b80      	subs	r0, r0, r6
 8003e2e:	6060      	str	r0, [r4, #4]
 8003e30:	6863      	ldr	r3, [r4, #4]
 8003e32:	6123      	str	r3, [r4, #16]
 8003e34:	2300      	movs	r3, #0
 8003e36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e3a:	e7aa      	b.n	8003d92 <_printf_i+0x14a>
 8003e3c:	4632      	mov	r2, r6
 8003e3e:	4649      	mov	r1, r9
 8003e40:	4640      	mov	r0, r8
 8003e42:	6923      	ldr	r3, [r4, #16]
 8003e44:	47d0      	blx	sl
 8003e46:	3001      	adds	r0, #1
 8003e48:	d0ad      	beq.n	8003da6 <_printf_i+0x15e>
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	079b      	lsls	r3, r3, #30
 8003e4e:	d413      	bmi.n	8003e78 <_printf_i+0x230>
 8003e50:	68e0      	ldr	r0, [r4, #12]
 8003e52:	9b03      	ldr	r3, [sp, #12]
 8003e54:	4298      	cmp	r0, r3
 8003e56:	bfb8      	it	lt
 8003e58:	4618      	movlt	r0, r3
 8003e5a:	e7a6      	b.n	8003daa <_printf_i+0x162>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	4632      	mov	r2, r6
 8003e60:	4649      	mov	r1, r9
 8003e62:	4640      	mov	r0, r8
 8003e64:	47d0      	blx	sl
 8003e66:	3001      	adds	r0, #1
 8003e68:	d09d      	beq.n	8003da6 <_printf_i+0x15e>
 8003e6a:	3501      	adds	r5, #1
 8003e6c:	68e3      	ldr	r3, [r4, #12]
 8003e6e:	9903      	ldr	r1, [sp, #12]
 8003e70:	1a5b      	subs	r3, r3, r1
 8003e72:	42ab      	cmp	r3, r5
 8003e74:	dcf2      	bgt.n	8003e5c <_printf_i+0x214>
 8003e76:	e7eb      	b.n	8003e50 <_printf_i+0x208>
 8003e78:	2500      	movs	r5, #0
 8003e7a:	f104 0619 	add.w	r6, r4, #25
 8003e7e:	e7f5      	b.n	8003e6c <_printf_i+0x224>
 8003e80:	08006006 	.word	0x08006006
 8003e84:	08006017 	.word	0x08006017

08003e88 <std>:
 8003e88:	2300      	movs	r3, #0
 8003e8a:	b510      	push	{r4, lr}
 8003e8c:	4604      	mov	r4, r0
 8003e8e:	e9c0 3300 	strd	r3, r3, [r0]
 8003e92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003e96:	6083      	str	r3, [r0, #8]
 8003e98:	8181      	strh	r1, [r0, #12]
 8003e9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003e9c:	81c2      	strh	r2, [r0, #14]
 8003e9e:	6183      	str	r3, [r0, #24]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	305c      	adds	r0, #92	@ 0x5c
 8003ea6:	f000 f9e7 	bl	8004278 <memset>
 8003eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <std+0x58>)
 8003eac:	6224      	str	r4, [r4, #32]
 8003eae:	6263      	str	r3, [r4, #36]	@ 0x24
 8003eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee4 <std+0x5c>)
 8003eb2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee8 <std+0x60>)
 8003eb6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8003eec <std+0x64>)
 8003eba:	6323      	str	r3, [r4, #48]	@ 0x30
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef0 <std+0x68>)
 8003ebe:	429c      	cmp	r4, r3
 8003ec0:	d006      	beq.n	8003ed0 <std+0x48>
 8003ec2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ec6:	4294      	cmp	r4, r2
 8003ec8:	d002      	beq.n	8003ed0 <std+0x48>
 8003eca:	33d0      	adds	r3, #208	@ 0xd0
 8003ecc:	429c      	cmp	r4, r3
 8003ece:	d105      	bne.n	8003edc <std+0x54>
 8003ed0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ed8:	f000 ba4a 	b.w	8004370 <__retarget_lock_init_recursive>
 8003edc:	bd10      	pop	{r4, pc}
 8003ede:	bf00      	nop
 8003ee0:	080040c9 	.word	0x080040c9
 8003ee4:	080040eb 	.word	0x080040eb
 8003ee8:	08004123 	.word	0x08004123
 8003eec:	08004147 	.word	0x08004147
 8003ef0:	2000027c 	.word	0x2000027c

08003ef4 <stdio_exit_handler>:
 8003ef4:	4a02      	ldr	r2, [pc, #8]	@ (8003f00 <stdio_exit_handler+0xc>)
 8003ef6:	4903      	ldr	r1, [pc, #12]	@ (8003f04 <stdio_exit_handler+0x10>)
 8003ef8:	4803      	ldr	r0, [pc, #12]	@ (8003f08 <stdio_exit_handler+0x14>)
 8003efa:	f000 b869 	b.w	8003fd0 <_fwalk_sglue>
 8003efe:	bf00      	nop
 8003f00:	20000018 	.word	0x20000018
 8003f04:	08005a35 	.word	0x08005a35
 8003f08:	20000028 	.word	0x20000028

08003f0c <cleanup_stdio>:
 8003f0c:	6841      	ldr	r1, [r0, #4]
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f40 <cleanup_stdio+0x34>)
 8003f10:	b510      	push	{r4, lr}
 8003f12:	4299      	cmp	r1, r3
 8003f14:	4604      	mov	r4, r0
 8003f16:	d001      	beq.n	8003f1c <cleanup_stdio+0x10>
 8003f18:	f001 fd8c 	bl	8005a34 <_fflush_r>
 8003f1c:	68a1      	ldr	r1, [r4, #8]
 8003f1e:	4b09      	ldr	r3, [pc, #36]	@ (8003f44 <cleanup_stdio+0x38>)
 8003f20:	4299      	cmp	r1, r3
 8003f22:	d002      	beq.n	8003f2a <cleanup_stdio+0x1e>
 8003f24:	4620      	mov	r0, r4
 8003f26:	f001 fd85 	bl	8005a34 <_fflush_r>
 8003f2a:	68e1      	ldr	r1, [r4, #12]
 8003f2c:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <cleanup_stdio+0x3c>)
 8003f2e:	4299      	cmp	r1, r3
 8003f30:	d004      	beq.n	8003f3c <cleanup_stdio+0x30>
 8003f32:	4620      	mov	r0, r4
 8003f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f38:	f001 bd7c 	b.w	8005a34 <_fflush_r>
 8003f3c:	bd10      	pop	{r4, pc}
 8003f3e:	bf00      	nop
 8003f40:	2000027c 	.word	0x2000027c
 8003f44:	200002e4 	.word	0x200002e4
 8003f48:	2000034c 	.word	0x2000034c

08003f4c <global_stdio_init.part.0>:
 8003f4c:	b510      	push	{r4, lr}
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f7c <global_stdio_init.part.0+0x30>)
 8003f50:	4c0b      	ldr	r4, [pc, #44]	@ (8003f80 <global_stdio_init.part.0+0x34>)
 8003f52:	4a0c      	ldr	r2, [pc, #48]	@ (8003f84 <global_stdio_init.part.0+0x38>)
 8003f54:	4620      	mov	r0, r4
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	2104      	movs	r1, #4
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f7ff ff94 	bl	8003e88 <std>
 8003f60:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003f64:	2201      	movs	r2, #1
 8003f66:	2109      	movs	r1, #9
 8003f68:	f7ff ff8e 	bl	8003e88 <std>
 8003f6c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003f70:	2202      	movs	r2, #2
 8003f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f76:	2112      	movs	r1, #18
 8003f78:	f7ff bf86 	b.w	8003e88 <std>
 8003f7c:	200003b4 	.word	0x200003b4
 8003f80:	2000027c 	.word	0x2000027c
 8003f84:	08003ef5 	.word	0x08003ef5

08003f88 <__sfp_lock_acquire>:
 8003f88:	4801      	ldr	r0, [pc, #4]	@ (8003f90 <__sfp_lock_acquire+0x8>)
 8003f8a:	f000 b9f2 	b.w	8004372 <__retarget_lock_acquire_recursive>
 8003f8e:	bf00      	nop
 8003f90:	200003bd 	.word	0x200003bd

08003f94 <__sfp_lock_release>:
 8003f94:	4801      	ldr	r0, [pc, #4]	@ (8003f9c <__sfp_lock_release+0x8>)
 8003f96:	f000 b9ed 	b.w	8004374 <__retarget_lock_release_recursive>
 8003f9a:	bf00      	nop
 8003f9c:	200003bd 	.word	0x200003bd

08003fa0 <__sinit>:
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	4604      	mov	r4, r0
 8003fa4:	f7ff fff0 	bl	8003f88 <__sfp_lock_acquire>
 8003fa8:	6a23      	ldr	r3, [r4, #32]
 8003faa:	b11b      	cbz	r3, 8003fb4 <__sinit+0x14>
 8003fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fb0:	f7ff bff0 	b.w	8003f94 <__sfp_lock_release>
 8003fb4:	4b04      	ldr	r3, [pc, #16]	@ (8003fc8 <__sinit+0x28>)
 8003fb6:	6223      	str	r3, [r4, #32]
 8003fb8:	4b04      	ldr	r3, [pc, #16]	@ (8003fcc <__sinit+0x2c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f5      	bne.n	8003fac <__sinit+0xc>
 8003fc0:	f7ff ffc4 	bl	8003f4c <global_stdio_init.part.0>
 8003fc4:	e7f2      	b.n	8003fac <__sinit+0xc>
 8003fc6:	bf00      	nop
 8003fc8:	08003f0d 	.word	0x08003f0d
 8003fcc:	200003b4 	.word	0x200003b4

08003fd0 <_fwalk_sglue>:
 8003fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fd4:	4607      	mov	r7, r0
 8003fd6:	4688      	mov	r8, r1
 8003fd8:	4614      	mov	r4, r2
 8003fda:	2600      	movs	r6, #0
 8003fdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003fe0:	f1b9 0901 	subs.w	r9, r9, #1
 8003fe4:	d505      	bpl.n	8003ff2 <_fwalk_sglue+0x22>
 8003fe6:	6824      	ldr	r4, [r4, #0]
 8003fe8:	2c00      	cmp	r4, #0
 8003fea:	d1f7      	bne.n	8003fdc <_fwalk_sglue+0xc>
 8003fec:	4630      	mov	r0, r6
 8003fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003ff2:	89ab      	ldrh	r3, [r5, #12]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d907      	bls.n	8004008 <_fwalk_sglue+0x38>
 8003ff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	d003      	beq.n	8004008 <_fwalk_sglue+0x38>
 8004000:	4629      	mov	r1, r5
 8004002:	4638      	mov	r0, r7
 8004004:	47c0      	blx	r8
 8004006:	4306      	orrs	r6, r0
 8004008:	3568      	adds	r5, #104	@ 0x68
 800400a:	e7e9      	b.n	8003fe0 <_fwalk_sglue+0x10>

0800400c <_puts_r>:
 800400c:	6a03      	ldr	r3, [r0, #32]
 800400e:	b570      	push	{r4, r5, r6, lr}
 8004010:	4605      	mov	r5, r0
 8004012:	460e      	mov	r6, r1
 8004014:	6884      	ldr	r4, [r0, #8]
 8004016:	b90b      	cbnz	r3, 800401c <_puts_r+0x10>
 8004018:	f7ff ffc2 	bl	8003fa0 <__sinit>
 800401c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800401e:	07db      	lsls	r3, r3, #31
 8004020:	d405      	bmi.n	800402e <_puts_r+0x22>
 8004022:	89a3      	ldrh	r3, [r4, #12]
 8004024:	0598      	lsls	r0, r3, #22
 8004026:	d402      	bmi.n	800402e <_puts_r+0x22>
 8004028:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800402a:	f000 f9a2 	bl	8004372 <__retarget_lock_acquire_recursive>
 800402e:	89a3      	ldrh	r3, [r4, #12]
 8004030:	0719      	lsls	r1, r3, #28
 8004032:	d502      	bpl.n	800403a <_puts_r+0x2e>
 8004034:	6923      	ldr	r3, [r4, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d135      	bne.n	80040a6 <_puts_r+0x9a>
 800403a:	4621      	mov	r1, r4
 800403c:	4628      	mov	r0, r5
 800403e:	f000 f8c5 	bl	80041cc <__swsetup_r>
 8004042:	b380      	cbz	r0, 80040a6 <_puts_r+0x9a>
 8004044:	f04f 35ff 	mov.w	r5, #4294967295
 8004048:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800404a:	07da      	lsls	r2, r3, #31
 800404c:	d405      	bmi.n	800405a <_puts_r+0x4e>
 800404e:	89a3      	ldrh	r3, [r4, #12]
 8004050:	059b      	lsls	r3, r3, #22
 8004052:	d402      	bmi.n	800405a <_puts_r+0x4e>
 8004054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004056:	f000 f98d 	bl	8004374 <__retarget_lock_release_recursive>
 800405a:	4628      	mov	r0, r5
 800405c:	bd70      	pop	{r4, r5, r6, pc}
 800405e:	2b00      	cmp	r3, #0
 8004060:	da04      	bge.n	800406c <_puts_r+0x60>
 8004062:	69a2      	ldr	r2, [r4, #24]
 8004064:	429a      	cmp	r2, r3
 8004066:	dc17      	bgt.n	8004098 <_puts_r+0x8c>
 8004068:	290a      	cmp	r1, #10
 800406a:	d015      	beq.n	8004098 <_puts_r+0x8c>
 800406c:	6823      	ldr	r3, [r4, #0]
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	6022      	str	r2, [r4, #0]
 8004072:	7019      	strb	r1, [r3, #0]
 8004074:	68a3      	ldr	r3, [r4, #8]
 8004076:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800407a:	3b01      	subs	r3, #1
 800407c:	60a3      	str	r3, [r4, #8]
 800407e:	2900      	cmp	r1, #0
 8004080:	d1ed      	bne.n	800405e <_puts_r+0x52>
 8004082:	2b00      	cmp	r3, #0
 8004084:	da11      	bge.n	80040aa <_puts_r+0x9e>
 8004086:	4622      	mov	r2, r4
 8004088:	210a      	movs	r1, #10
 800408a:	4628      	mov	r0, r5
 800408c:	f000 f85f 	bl	800414e <__swbuf_r>
 8004090:	3001      	adds	r0, #1
 8004092:	d0d7      	beq.n	8004044 <_puts_r+0x38>
 8004094:	250a      	movs	r5, #10
 8004096:	e7d7      	b.n	8004048 <_puts_r+0x3c>
 8004098:	4622      	mov	r2, r4
 800409a:	4628      	mov	r0, r5
 800409c:	f000 f857 	bl	800414e <__swbuf_r>
 80040a0:	3001      	adds	r0, #1
 80040a2:	d1e7      	bne.n	8004074 <_puts_r+0x68>
 80040a4:	e7ce      	b.n	8004044 <_puts_r+0x38>
 80040a6:	3e01      	subs	r6, #1
 80040a8:	e7e4      	b.n	8004074 <_puts_r+0x68>
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	6022      	str	r2, [r4, #0]
 80040b0:	220a      	movs	r2, #10
 80040b2:	701a      	strb	r2, [r3, #0]
 80040b4:	e7ee      	b.n	8004094 <_puts_r+0x88>
	...

080040b8 <puts>:
 80040b8:	4b02      	ldr	r3, [pc, #8]	@ (80040c4 <puts+0xc>)
 80040ba:	4601      	mov	r1, r0
 80040bc:	6818      	ldr	r0, [r3, #0]
 80040be:	f7ff bfa5 	b.w	800400c <_puts_r>
 80040c2:	bf00      	nop
 80040c4:	20000024 	.word	0x20000024

080040c8 <__sread>:
 80040c8:	b510      	push	{r4, lr}
 80040ca:	460c      	mov	r4, r1
 80040cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040d0:	f000 f900 	bl	80042d4 <_read_r>
 80040d4:	2800      	cmp	r0, #0
 80040d6:	bfab      	itete	ge
 80040d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80040da:	89a3      	ldrhlt	r3, [r4, #12]
 80040dc:	181b      	addge	r3, r3, r0
 80040de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80040e2:	bfac      	ite	ge
 80040e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80040e6:	81a3      	strhlt	r3, [r4, #12]
 80040e8:	bd10      	pop	{r4, pc}

080040ea <__swrite>:
 80040ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ee:	461f      	mov	r7, r3
 80040f0:	898b      	ldrh	r3, [r1, #12]
 80040f2:	4605      	mov	r5, r0
 80040f4:	05db      	lsls	r3, r3, #23
 80040f6:	460c      	mov	r4, r1
 80040f8:	4616      	mov	r6, r2
 80040fa:	d505      	bpl.n	8004108 <__swrite+0x1e>
 80040fc:	2302      	movs	r3, #2
 80040fe:	2200      	movs	r2, #0
 8004100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004104:	f000 f8d4 	bl	80042b0 <_lseek_r>
 8004108:	89a3      	ldrh	r3, [r4, #12]
 800410a:	4632      	mov	r2, r6
 800410c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004110:	81a3      	strh	r3, [r4, #12]
 8004112:	4628      	mov	r0, r5
 8004114:	463b      	mov	r3, r7
 8004116:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800411a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800411e:	f000 b8eb 	b.w	80042f8 <_write_r>

08004122 <__sseek>:
 8004122:	b510      	push	{r4, lr}
 8004124:	460c      	mov	r4, r1
 8004126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800412a:	f000 f8c1 	bl	80042b0 <_lseek_r>
 800412e:	1c43      	adds	r3, r0, #1
 8004130:	89a3      	ldrh	r3, [r4, #12]
 8004132:	bf15      	itete	ne
 8004134:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004136:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800413a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800413e:	81a3      	strheq	r3, [r4, #12]
 8004140:	bf18      	it	ne
 8004142:	81a3      	strhne	r3, [r4, #12]
 8004144:	bd10      	pop	{r4, pc}

08004146 <__sclose>:
 8004146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800414a:	f000 b8a1 	b.w	8004290 <_close_r>

0800414e <__swbuf_r>:
 800414e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004150:	460e      	mov	r6, r1
 8004152:	4614      	mov	r4, r2
 8004154:	4605      	mov	r5, r0
 8004156:	b118      	cbz	r0, 8004160 <__swbuf_r+0x12>
 8004158:	6a03      	ldr	r3, [r0, #32]
 800415a:	b90b      	cbnz	r3, 8004160 <__swbuf_r+0x12>
 800415c:	f7ff ff20 	bl	8003fa0 <__sinit>
 8004160:	69a3      	ldr	r3, [r4, #24]
 8004162:	60a3      	str	r3, [r4, #8]
 8004164:	89a3      	ldrh	r3, [r4, #12]
 8004166:	071a      	lsls	r2, r3, #28
 8004168:	d501      	bpl.n	800416e <__swbuf_r+0x20>
 800416a:	6923      	ldr	r3, [r4, #16]
 800416c:	b943      	cbnz	r3, 8004180 <__swbuf_r+0x32>
 800416e:	4621      	mov	r1, r4
 8004170:	4628      	mov	r0, r5
 8004172:	f000 f82b 	bl	80041cc <__swsetup_r>
 8004176:	b118      	cbz	r0, 8004180 <__swbuf_r+0x32>
 8004178:	f04f 37ff 	mov.w	r7, #4294967295
 800417c:	4638      	mov	r0, r7
 800417e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	6922      	ldr	r2, [r4, #16]
 8004184:	b2f6      	uxtb	r6, r6
 8004186:	1a98      	subs	r0, r3, r2
 8004188:	6963      	ldr	r3, [r4, #20]
 800418a:	4637      	mov	r7, r6
 800418c:	4283      	cmp	r3, r0
 800418e:	dc05      	bgt.n	800419c <__swbuf_r+0x4e>
 8004190:	4621      	mov	r1, r4
 8004192:	4628      	mov	r0, r5
 8004194:	f001 fc4e 	bl	8005a34 <_fflush_r>
 8004198:	2800      	cmp	r0, #0
 800419a:	d1ed      	bne.n	8004178 <__swbuf_r+0x2a>
 800419c:	68a3      	ldr	r3, [r4, #8]
 800419e:	3b01      	subs	r3, #1
 80041a0:	60a3      	str	r3, [r4, #8]
 80041a2:	6823      	ldr	r3, [r4, #0]
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	6022      	str	r2, [r4, #0]
 80041a8:	701e      	strb	r6, [r3, #0]
 80041aa:	6962      	ldr	r2, [r4, #20]
 80041ac:	1c43      	adds	r3, r0, #1
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d004      	beq.n	80041bc <__swbuf_r+0x6e>
 80041b2:	89a3      	ldrh	r3, [r4, #12]
 80041b4:	07db      	lsls	r3, r3, #31
 80041b6:	d5e1      	bpl.n	800417c <__swbuf_r+0x2e>
 80041b8:	2e0a      	cmp	r6, #10
 80041ba:	d1df      	bne.n	800417c <__swbuf_r+0x2e>
 80041bc:	4621      	mov	r1, r4
 80041be:	4628      	mov	r0, r5
 80041c0:	f001 fc38 	bl	8005a34 <_fflush_r>
 80041c4:	2800      	cmp	r0, #0
 80041c6:	d0d9      	beq.n	800417c <__swbuf_r+0x2e>
 80041c8:	e7d6      	b.n	8004178 <__swbuf_r+0x2a>
	...

080041cc <__swsetup_r>:
 80041cc:	b538      	push	{r3, r4, r5, lr}
 80041ce:	4b29      	ldr	r3, [pc, #164]	@ (8004274 <__swsetup_r+0xa8>)
 80041d0:	4605      	mov	r5, r0
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	460c      	mov	r4, r1
 80041d6:	b118      	cbz	r0, 80041e0 <__swsetup_r+0x14>
 80041d8:	6a03      	ldr	r3, [r0, #32]
 80041da:	b90b      	cbnz	r3, 80041e0 <__swsetup_r+0x14>
 80041dc:	f7ff fee0 	bl	8003fa0 <__sinit>
 80041e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041e4:	0719      	lsls	r1, r3, #28
 80041e6:	d422      	bmi.n	800422e <__swsetup_r+0x62>
 80041e8:	06da      	lsls	r2, r3, #27
 80041ea:	d407      	bmi.n	80041fc <__swsetup_r+0x30>
 80041ec:	2209      	movs	r2, #9
 80041ee:	602a      	str	r2, [r5, #0]
 80041f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041f4:	f04f 30ff 	mov.w	r0, #4294967295
 80041f8:	81a3      	strh	r3, [r4, #12]
 80041fa:	e033      	b.n	8004264 <__swsetup_r+0x98>
 80041fc:	0758      	lsls	r0, r3, #29
 80041fe:	d512      	bpl.n	8004226 <__swsetup_r+0x5a>
 8004200:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004202:	b141      	cbz	r1, 8004216 <__swsetup_r+0x4a>
 8004204:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004208:	4299      	cmp	r1, r3
 800420a:	d002      	beq.n	8004212 <__swsetup_r+0x46>
 800420c:	4628      	mov	r0, r5
 800420e:	f000 ff13 	bl	8005038 <_free_r>
 8004212:	2300      	movs	r3, #0
 8004214:	6363      	str	r3, [r4, #52]	@ 0x34
 8004216:	89a3      	ldrh	r3, [r4, #12]
 8004218:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800421c:	81a3      	strh	r3, [r4, #12]
 800421e:	2300      	movs	r3, #0
 8004220:	6063      	str	r3, [r4, #4]
 8004222:	6923      	ldr	r3, [r4, #16]
 8004224:	6023      	str	r3, [r4, #0]
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	f043 0308 	orr.w	r3, r3, #8
 800422c:	81a3      	strh	r3, [r4, #12]
 800422e:	6923      	ldr	r3, [r4, #16]
 8004230:	b94b      	cbnz	r3, 8004246 <__swsetup_r+0x7a>
 8004232:	89a3      	ldrh	r3, [r4, #12]
 8004234:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800423c:	d003      	beq.n	8004246 <__swsetup_r+0x7a>
 800423e:	4621      	mov	r1, r4
 8004240:	4628      	mov	r0, r5
 8004242:	f001 fc44 	bl	8005ace <__smakebuf_r>
 8004246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800424a:	f013 0201 	ands.w	r2, r3, #1
 800424e:	d00a      	beq.n	8004266 <__swsetup_r+0x9a>
 8004250:	2200      	movs	r2, #0
 8004252:	60a2      	str	r2, [r4, #8]
 8004254:	6962      	ldr	r2, [r4, #20]
 8004256:	4252      	negs	r2, r2
 8004258:	61a2      	str	r2, [r4, #24]
 800425a:	6922      	ldr	r2, [r4, #16]
 800425c:	b942      	cbnz	r2, 8004270 <__swsetup_r+0xa4>
 800425e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004262:	d1c5      	bne.n	80041f0 <__swsetup_r+0x24>
 8004264:	bd38      	pop	{r3, r4, r5, pc}
 8004266:	0799      	lsls	r1, r3, #30
 8004268:	bf58      	it	pl
 800426a:	6962      	ldrpl	r2, [r4, #20]
 800426c:	60a2      	str	r2, [r4, #8]
 800426e:	e7f4      	b.n	800425a <__swsetup_r+0x8e>
 8004270:	2000      	movs	r0, #0
 8004272:	e7f7      	b.n	8004264 <__swsetup_r+0x98>
 8004274:	20000024 	.word	0x20000024

08004278 <memset>:
 8004278:	4603      	mov	r3, r0
 800427a:	4402      	add	r2, r0
 800427c:	4293      	cmp	r3, r2
 800427e:	d100      	bne.n	8004282 <memset+0xa>
 8004280:	4770      	bx	lr
 8004282:	f803 1b01 	strb.w	r1, [r3], #1
 8004286:	e7f9      	b.n	800427c <memset+0x4>

08004288 <_localeconv_r>:
 8004288:	4800      	ldr	r0, [pc, #0]	@ (800428c <_localeconv_r+0x4>)
 800428a:	4770      	bx	lr
 800428c:	20000164 	.word	0x20000164

08004290 <_close_r>:
 8004290:	b538      	push	{r3, r4, r5, lr}
 8004292:	2300      	movs	r3, #0
 8004294:	4d05      	ldr	r5, [pc, #20]	@ (80042ac <_close_r+0x1c>)
 8004296:	4604      	mov	r4, r0
 8004298:	4608      	mov	r0, r1
 800429a:	602b      	str	r3, [r5, #0]
 800429c:	f7fd fa71 	bl	8001782 <_close>
 80042a0:	1c43      	adds	r3, r0, #1
 80042a2:	d102      	bne.n	80042aa <_close_r+0x1a>
 80042a4:	682b      	ldr	r3, [r5, #0]
 80042a6:	b103      	cbz	r3, 80042aa <_close_r+0x1a>
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	bd38      	pop	{r3, r4, r5, pc}
 80042ac:	200003b8 	.word	0x200003b8

080042b0 <_lseek_r>:
 80042b0:	b538      	push	{r3, r4, r5, lr}
 80042b2:	4604      	mov	r4, r0
 80042b4:	4608      	mov	r0, r1
 80042b6:	4611      	mov	r1, r2
 80042b8:	2200      	movs	r2, #0
 80042ba:	4d05      	ldr	r5, [pc, #20]	@ (80042d0 <_lseek_r+0x20>)
 80042bc:	602a      	str	r2, [r5, #0]
 80042be:	461a      	mov	r2, r3
 80042c0:	f7fd fa83 	bl	80017ca <_lseek>
 80042c4:	1c43      	adds	r3, r0, #1
 80042c6:	d102      	bne.n	80042ce <_lseek_r+0x1e>
 80042c8:	682b      	ldr	r3, [r5, #0]
 80042ca:	b103      	cbz	r3, 80042ce <_lseek_r+0x1e>
 80042cc:	6023      	str	r3, [r4, #0]
 80042ce:	bd38      	pop	{r3, r4, r5, pc}
 80042d0:	200003b8 	.word	0x200003b8

080042d4 <_read_r>:
 80042d4:	b538      	push	{r3, r4, r5, lr}
 80042d6:	4604      	mov	r4, r0
 80042d8:	4608      	mov	r0, r1
 80042da:	4611      	mov	r1, r2
 80042dc:	2200      	movs	r2, #0
 80042de:	4d05      	ldr	r5, [pc, #20]	@ (80042f4 <_read_r+0x20>)
 80042e0:	602a      	str	r2, [r5, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	f7fd fa30 	bl	8001748 <_read>
 80042e8:	1c43      	adds	r3, r0, #1
 80042ea:	d102      	bne.n	80042f2 <_read_r+0x1e>
 80042ec:	682b      	ldr	r3, [r5, #0]
 80042ee:	b103      	cbz	r3, 80042f2 <_read_r+0x1e>
 80042f0:	6023      	str	r3, [r4, #0]
 80042f2:	bd38      	pop	{r3, r4, r5, pc}
 80042f4:	200003b8 	.word	0x200003b8

080042f8 <_write_r>:
 80042f8:	b538      	push	{r3, r4, r5, lr}
 80042fa:	4604      	mov	r4, r0
 80042fc:	4608      	mov	r0, r1
 80042fe:	4611      	mov	r1, r2
 8004300:	2200      	movs	r2, #0
 8004302:	4d05      	ldr	r5, [pc, #20]	@ (8004318 <_write_r+0x20>)
 8004304:	602a      	str	r2, [r5, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	f7fc fed0 	bl	80010ac <_write>
 800430c:	1c43      	adds	r3, r0, #1
 800430e:	d102      	bne.n	8004316 <_write_r+0x1e>
 8004310:	682b      	ldr	r3, [r5, #0]
 8004312:	b103      	cbz	r3, 8004316 <_write_r+0x1e>
 8004314:	6023      	str	r3, [r4, #0]
 8004316:	bd38      	pop	{r3, r4, r5, pc}
 8004318:	200003b8 	.word	0x200003b8

0800431c <__errno>:
 800431c:	4b01      	ldr	r3, [pc, #4]	@ (8004324 <__errno+0x8>)
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	20000024 	.word	0x20000024

08004328 <__libc_init_array>:
 8004328:	b570      	push	{r4, r5, r6, lr}
 800432a:	2600      	movs	r6, #0
 800432c:	4d0c      	ldr	r5, [pc, #48]	@ (8004360 <__libc_init_array+0x38>)
 800432e:	4c0d      	ldr	r4, [pc, #52]	@ (8004364 <__libc_init_array+0x3c>)
 8004330:	1b64      	subs	r4, r4, r5
 8004332:	10a4      	asrs	r4, r4, #2
 8004334:	42a6      	cmp	r6, r4
 8004336:	d109      	bne.n	800434c <__libc_init_array+0x24>
 8004338:	f001 fe34 	bl	8005fa4 <_init>
 800433c:	2600      	movs	r6, #0
 800433e:	4d0a      	ldr	r5, [pc, #40]	@ (8004368 <__libc_init_array+0x40>)
 8004340:	4c0a      	ldr	r4, [pc, #40]	@ (800436c <__libc_init_array+0x44>)
 8004342:	1b64      	subs	r4, r4, r5
 8004344:	10a4      	asrs	r4, r4, #2
 8004346:	42a6      	cmp	r6, r4
 8004348:	d105      	bne.n	8004356 <__libc_init_array+0x2e>
 800434a:	bd70      	pop	{r4, r5, r6, pc}
 800434c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004350:	4798      	blx	r3
 8004352:	3601      	adds	r6, #1
 8004354:	e7ee      	b.n	8004334 <__libc_init_array+0xc>
 8004356:	f855 3b04 	ldr.w	r3, [r5], #4
 800435a:	4798      	blx	r3
 800435c:	3601      	adds	r6, #1
 800435e:	e7f2      	b.n	8004346 <__libc_init_array+0x1e>
 8004360:	08006370 	.word	0x08006370
 8004364:	08006370 	.word	0x08006370
 8004368:	08006370 	.word	0x08006370
 800436c:	08006374 	.word	0x08006374

08004370 <__retarget_lock_init_recursive>:
 8004370:	4770      	bx	lr

08004372 <__retarget_lock_acquire_recursive>:
 8004372:	4770      	bx	lr

08004374 <__retarget_lock_release_recursive>:
 8004374:	4770      	bx	lr

08004376 <memchr>:
 8004376:	4603      	mov	r3, r0
 8004378:	b510      	push	{r4, lr}
 800437a:	b2c9      	uxtb	r1, r1
 800437c:	4402      	add	r2, r0
 800437e:	4293      	cmp	r3, r2
 8004380:	4618      	mov	r0, r3
 8004382:	d101      	bne.n	8004388 <memchr+0x12>
 8004384:	2000      	movs	r0, #0
 8004386:	e003      	b.n	8004390 <memchr+0x1a>
 8004388:	7804      	ldrb	r4, [r0, #0]
 800438a:	3301      	adds	r3, #1
 800438c:	428c      	cmp	r4, r1
 800438e:	d1f6      	bne.n	800437e <memchr+0x8>
 8004390:	bd10      	pop	{r4, pc}

08004392 <quorem>:
 8004392:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004396:	6903      	ldr	r3, [r0, #16]
 8004398:	690c      	ldr	r4, [r1, #16]
 800439a:	4607      	mov	r7, r0
 800439c:	42a3      	cmp	r3, r4
 800439e:	db7e      	blt.n	800449e <quorem+0x10c>
 80043a0:	3c01      	subs	r4, #1
 80043a2:	00a3      	lsls	r3, r4, #2
 80043a4:	f100 0514 	add.w	r5, r0, #20
 80043a8:	f101 0814 	add.w	r8, r1, #20
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80043b2:	9301      	str	r3, [sp, #4]
 80043b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80043b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80043bc:	3301      	adds	r3, #1
 80043be:	429a      	cmp	r2, r3
 80043c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80043c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80043c8:	d32e      	bcc.n	8004428 <quorem+0x96>
 80043ca:	f04f 0a00 	mov.w	sl, #0
 80043ce:	46c4      	mov	ip, r8
 80043d0:	46ae      	mov	lr, r5
 80043d2:	46d3      	mov	fp, sl
 80043d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80043d8:	b298      	uxth	r0, r3
 80043da:	fb06 a000 	mla	r0, r6, r0, sl
 80043de:	0c1b      	lsrs	r3, r3, #16
 80043e0:	0c02      	lsrs	r2, r0, #16
 80043e2:	fb06 2303 	mla	r3, r6, r3, r2
 80043e6:	f8de 2000 	ldr.w	r2, [lr]
 80043ea:	b280      	uxth	r0, r0
 80043ec:	b292      	uxth	r2, r2
 80043ee:	1a12      	subs	r2, r2, r0
 80043f0:	445a      	add	r2, fp
 80043f2:	f8de 0000 	ldr.w	r0, [lr]
 80043f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004400:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004404:	b292      	uxth	r2, r2
 8004406:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800440a:	45e1      	cmp	r9, ip
 800440c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004410:	f84e 2b04 	str.w	r2, [lr], #4
 8004414:	d2de      	bcs.n	80043d4 <quorem+0x42>
 8004416:	9b00      	ldr	r3, [sp, #0]
 8004418:	58eb      	ldr	r3, [r5, r3]
 800441a:	b92b      	cbnz	r3, 8004428 <quorem+0x96>
 800441c:	9b01      	ldr	r3, [sp, #4]
 800441e:	3b04      	subs	r3, #4
 8004420:	429d      	cmp	r5, r3
 8004422:	461a      	mov	r2, r3
 8004424:	d32f      	bcc.n	8004486 <quorem+0xf4>
 8004426:	613c      	str	r4, [r7, #16]
 8004428:	4638      	mov	r0, r7
 800442a:	f001 f97b 	bl	8005724 <__mcmp>
 800442e:	2800      	cmp	r0, #0
 8004430:	db25      	blt.n	800447e <quorem+0xec>
 8004432:	4629      	mov	r1, r5
 8004434:	2000      	movs	r0, #0
 8004436:	f858 2b04 	ldr.w	r2, [r8], #4
 800443a:	f8d1 c000 	ldr.w	ip, [r1]
 800443e:	fa1f fe82 	uxth.w	lr, r2
 8004442:	fa1f f38c 	uxth.w	r3, ip
 8004446:	eba3 030e 	sub.w	r3, r3, lr
 800444a:	4403      	add	r3, r0
 800444c:	0c12      	lsrs	r2, r2, #16
 800444e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004452:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004456:	b29b      	uxth	r3, r3
 8004458:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800445c:	45c1      	cmp	r9, r8
 800445e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004462:	f841 3b04 	str.w	r3, [r1], #4
 8004466:	d2e6      	bcs.n	8004436 <quorem+0xa4>
 8004468:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800446c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004470:	b922      	cbnz	r2, 800447c <quorem+0xea>
 8004472:	3b04      	subs	r3, #4
 8004474:	429d      	cmp	r5, r3
 8004476:	461a      	mov	r2, r3
 8004478:	d30b      	bcc.n	8004492 <quorem+0x100>
 800447a:	613c      	str	r4, [r7, #16]
 800447c:	3601      	adds	r6, #1
 800447e:	4630      	mov	r0, r6
 8004480:	b003      	add	sp, #12
 8004482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	3b04      	subs	r3, #4
 800448a:	2a00      	cmp	r2, #0
 800448c:	d1cb      	bne.n	8004426 <quorem+0x94>
 800448e:	3c01      	subs	r4, #1
 8004490:	e7c6      	b.n	8004420 <quorem+0x8e>
 8004492:	6812      	ldr	r2, [r2, #0]
 8004494:	3b04      	subs	r3, #4
 8004496:	2a00      	cmp	r2, #0
 8004498:	d1ef      	bne.n	800447a <quorem+0xe8>
 800449a:	3c01      	subs	r4, #1
 800449c:	e7ea      	b.n	8004474 <quorem+0xe2>
 800449e:	2000      	movs	r0, #0
 80044a0:	e7ee      	b.n	8004480 <quorem+0xee>
 80044a2:	0000      	movs	r0, r0
 80044a4:	0000      	movs	r0, r0
	...

080044a8 <_dtoa_r>:
 80044a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ac:	4614      	mov	r4, r2
 80044ae:	461d      	mov	r5, r3
 80044b0:	69c7      	ldr	r7, [r0, #28]
 80044b2:	b097      	sub	sp, #92	@ 0x5c
 80044b4:	4683      	mov	fp, r0
 80044b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80044ba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80044bc:	b97f      	cbnz	r7, 80044de <_dtoa_r+0x36>
 80044be:	2010      	movs	r0, #16
 80044c0:	f000 fe02 	bl	80050c8 <malloc>
 80044c4:	4602      	mov	r2, r0
 80044c6:	f8cb 001c 	str.w	r0, [fp, #28]
 80044ca:	b920      	cbnz	r0, 80044d6 <_dtoa_r+0x2e>
 80044cc:	21ef      	movs	r1, #239	@ 0xef
 80044ce:	4ba8      	ldr	r3, [pc, #672]	@ (8004770 <_dtoa_r+0x2c8>)
 80044d0:	48a8      	ldr	r0, [pc, #672]	@ (8004774 <_dtoa_r+0x2cc>)
 80044d2:	f001 fb79 	bl	8005bc8 <__assert_func>
 80044d6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80044da:	6007      	str	r7, [r0, #0]
 80044dc:	60c7      	str	r7, [r0, #12]
 80044de:	f8db 301c 	ldr.w	r3, [fp, #28]
 80044e2:	6819      	ldr	r1, [r3, #0]
 80044e4:	b159      	cbz	r1, 80044fe <_dtoa_r+0x56>
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	2301      	movs	r3, #1
 80044ea:	4093      	lsls	r3, r2
 80044ec:	604a      	str	r2, [r1, #4]
 80044ee:	608b      	str	r3, [r1, #8]
 80044f0:	4658      	mov	r0, fp
 80044f2:	f000 fedf 	bl	80052b4 <_Bfree>
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	1e2b      	subs	r3, r5, #0
 8004500:	bfaf      	iteee	ge
 8004502:	2300      	movge	r3, #0
 8004504:	2201      	movlt	r2, #1
 8004506:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800450a:	9303      	strlt	r3, [sp, #12]
 800450c:	bfa8      	it	ge
 800450e:	6033      	strge	r3, [r6, #0]
 8004510:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004514:	4b98      	ldr	r3, [pc, #608]	@ (8004778 <_dtoa_r+0x2d0>)
 8004516:	bfb8      	it	lt
 8004518:	6032      	strlt	r2, [r6, #0]
 800451a:	ea33 0308 	bics.w	r3, r3, r8
 800451e:	d112      	bne.n	8004546 <_dtoa_r+0x9e>
 8004520:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004524:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004526:	6013      	str	r3, [r2, #0]
 8004528:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800452c:	4323      	orrs	r3, r4
 800452e:	f000 8550 	beq.w	8004fd2 <_dtoa_r+0xb2a>
 8004532:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004534:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800477c <_dtoa_r+0x2d4>
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8552 	beq.w	8004fe2 <_dtoa_r+0xb3a>
 800453e:	f10a 0303 	add.w	r3, sl, #3
 8004542:	f000 bd4c 	b.w	8004fde <_dtoa_r+0xb36>
 8004546:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800454a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800454e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004552:	2200      	movs	r2, #0
 8004554:	2300      	movs	r3, #0
 8004556:	f7fc fa3f 	bl	80009d8 <__aeabi_dcmpeq>
 800455a:	4607      	mov	r7, r0
 800455c:	b158      	cbz	r0, 8004576 <_dtoa_r+0xce>
 800455e:	2301      	movs	r3, #1
 8004560:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004562:	6013      	str	r3, [r2, #0]
 8004564:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004566:	b113      	cbz	r3, 800456e <_dtoa_r+0xc6>
 8004568:	4b85      	ldr	r3, [pc, #532]	@ (8004780 <_dtoa_r+0x2d8>)
 800456a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8004784 <_dtoa_r+0x2dc>
 8004572:	f000 bd36 	b.w	8004fe2 <_dtoa_r+0xb3a>
 8004576:	ab14      	add	r3, sp, #80	@ 0x50
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	ab15      	add	r3, sp, #84	@ 0x54
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	4658      	mov	r0, fp
 8004580:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004584:	f001 f97e 	bl	8005884 <__d2b>
 8004588:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800458c:	4681      	mov	r9, r0
 800458e:	2e00      	cmp	r6, #0
 8004590:	d077      	beq.n	8004682 <_dtoa_r+0x1da>
 8004592:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004596:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004598:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800459c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045a0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80045a4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80045a8:	9712      	str	r7, [sp, #72]	@ 0x48
 80045aa:	4619      	mov	r1, r3
 80045ac:	2200      	movs	r2, #0
 80045ae:	4b76      	ldr	r3, [pc, #472]	@ (8004788 <_dtoa_r+0x2e0>)
 80045b0:	f7fb fdf2 	bl	8000198 <__aeabi_dsub>
 80045b4:	a368      	add	r3, pc, #416	@ (adr r3, 8004758 <_dtoa_r+0x2b0>)
 80045b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ba:	f7fb ffa5 	bl	8000508 <__aeabi_dmul>
 80045be:	a368      	add	r3, pc, #416	@ (adr r3, 8004760 <_dtoa_r+0x2b8>)
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	f7fb fdea 	bl	800019c <__adddf3>
 80045c8:	4604      	mov	r4, r0
 80045ca:	4630      	mov	r0, r6
 80045cc:	460d      	mov	r5, r1
 80045ce:	f7fb ff31 	bl	8000434 <__aeabi_i2d>
 80045d2:	a365      	add	r3, pc, #404	@ (adr r3, 8004768 <_dtoa_r+0x2c0>)
 80045d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d8:	f7fb ff96 	bl	8000508 <__aeabi_dmul>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4620      	mov	r0, r4
 80045e2:	4629      	mov	r1, r5
 80045e4:	f7fb fdda 	bl	800019c <__adddf3>
 80045e8:	4604      	mov	r4, r0
 80045ea:	460d      	mov	r5, r1
 80045ec:	f7fc fa3c 	bl	8000a68 <__aeabi_d2iz>
 80045f0:	2200      	movs	r2, #0
 80045f2:	4607      	mov	r7, r0
 80045f4:	2300      	movs	r3, #0
 80045f6:	4620      	mov	r0, r4
 80045f8:	4629      	mov	r1, r5
 80045fa:	f7fc f9f7 	bl	80009ec <__aeabi_dcmplt>
 80045fe:	b140      	cbz	r0, 8004612 <_dtoa_r+0x16a>
 8004600:	4638      	mov	r0, r7
 8004602:	f7fb ff17 	bl	8000434 <__aeabi_i2d>
 8004606:	4622      	mov	r2, r4
 8004608:	462b      	mov	r3, r5
 800460a:	f7fc f9e5 	bl	80009d8 <__aeabi_dcmpeq>
 800460e:	b900      	cbnz	r0, 8004612 <_dtoa_r+0x16a>
 8004610:	3f01      	subs	r7, #1
 8004612:	2f16      	cmp	r7, #22
 8004614:	d853      	bhi.n	80046be <_dtoa_r+0x216>
 8004616:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800461a:	4b5c      	ldr	r3, [pc, #368]	@ (800478c <_dtoa_r+0x2e4>)
 800461c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004624:	f7fc f9e2 	bl	80009ec <__aeabi_dcmplt>
 8004628:	2800      	cmp	r0, #0
 800462a:	d04a      	beq.n	80046c2 <_dtoa_r+0x21a>
 800462c:	2300      	movs	r3, #0
 800462e:	3f01      	subs	r7, #1
 8004630:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004632:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004634:	1b9b      	subs	r3, r3, r6
 8004636:	1e5a      	subs	r2, r3, #1
 8004638:	bf46      	itte	mi
 800463a:	f1c3 0801 	rsbmi	r8, r3, #1
 800463e:	2300      	movmi	r3, #0
 8004640:	f04f 0800 	movpl.w	r8, #0
 8004644:	9209      	str	r2, [sp, #36]	@ 0x24
 8004646:	bf48      	it	mi
 8004648:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800464a:	2f00      	cmp	r7, #0
 800464c:	db3b      	blt.n	80046c6 <_dtoa_r+0x21e>
 800464e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004650:	970e      	str	r7, [sp, #56]	@ 0x38
 8004652:	443b      	add	r3, r7
 8004654:	9309      	str	r3, [sp, #36]	@ 0x24
 8004656:	2300      	movs	r3, #0
 8004658:	930a      	str	r3, [sp, #40]	@ 0x28
 800465a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800465c:	2b09      	cmp	r3, #9
 800465e:	d866      	bhi.n	800472e <_dtoa_r+0x286>
 8004660:	2b05      	cmp	r3, #5
 8004662:	bfc4      	itt	gt
 8004664:	3b04      	subgt	r3, #4
 8004666:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8004668:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800466a:	bfc8      	it	gt
 800466c:	2400      	movgt	r4, #0
 800466e:	f1a3 0302 	sub.w	r3, r3, #2
 8004672:	bfd8      	it	le
 8004674:	2401      	movle	r4, #1
 8004676:	2b03      	cmp	r3, #3
 8004678:	d864      	bhi.n	8004744 <_dtoa_r+0x29c>
 800467a:	e8df f003 	tbb	[pc, r3]
 800467e:	382b      	.short	0x382b
 8004680:	5636      	.short	0x5636
 8004682:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004686:	441e      	add	r6, r3
 8004688:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800468c:	2b20      	cmp	r3, #32
 800468e:	bfc1      	itttt	gt
 8004690:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004694:	fa08 f803 	lslgt.w	r8, r8, r3
 8004698:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800469c:	fa24 f303 	lsrgt.w	r3, r4, r3
 80046a0:	bfd6      	itet	le
 80046a2:	f1c3 0320 	rsble	r3, r3, #32
 80046a6:	ea48 0003 	orrgt.w	r0, r8, r3
 80046aa:	fa04 f003 	lslle.w	r0, r4, r3
 80046ae:	f7fb feb1 	bl	8000414 <__aeabi_ui2d>
 80046b2:	2201      	movs	r2, #1
 80046b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80046b8:	3e01      	subs	r6, #1
 80046ba:	9212      	str	r2, [sp, #72]	@ 0x48
 80046bc:	e775      	b.n	80045aa <_dtoa_r+0x102>
 80046be:	2301      	movs	r3, #1
 80046c0:	e7b6      	b.n	8004630 <_dtoa_r+0x188>
 80046c2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80046c4:	e7b5      	b.n	8004632 <_dtoa_r+0x18a>
 80046c6:	427b      	negs	r3, r7
 80046c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80046ca:	2300      	movs	r3, #0
 80046cc:	eba8 0807 	sub.w	r8, r8, r7
 80046d0:	930e      	str	r3, [sp, #56]	@ 0x38
 80046d2:	e7c2      	b.n	800465a <_dtoa_r+0x1b2>
 80046d4:	2300      	movs	r3, #0
 80046d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80046d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80046da:	2b00      	cmp	r3, #0
 80046dc:	dc35      	bgt.n	800474a <_dtoa_r+0x2a2>
 80046de:	2301      	movs	r3, #1
 80046e0:	461a      	mov	r2, r3
 80046e2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80046e6:	9221      	str	r2, [sp, #132]	@ 0x84
 80046e8:	e00b      	b.n	8004702 <_dtoa_r+0x25a>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e7f3      	b.n	80046d6 <_dtoa_r+0x22e>
 80046ee:	2300      	movs	r3, #0
 80046f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80046f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	9308      	str	r3, [sp, #32]
 80046f8:	3301      	adds	r3, #1
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	9307      	str	r3, [sp, #28]
 80046fe:	bfb8      	it	lt
 8004700:	2301      	movlt	r3, #1
 8004702:	2100      	movs	r1, #0
 8004704:	2204      	movs	r2, #4
 8004706:	f8db 001c 	ldr.w	r0, [fp, #28]
 800470a:	f102 0514 	add.w	r5, r2, #20
 800470e:	429d      	cmp	r5, r3
 8004710:	d91f      	bls.n	8004752 <_dtoa_r+0x2aa>
 8004712:	6041      	str	r1, [r0, #4]
 8004714:	4658      	mov	r0, fp
 8004716:	f000 fd8d 	bl	8005234 <_Balloc>
 800471a:	4682      	mov	sl, r0
 800471c:	2800      	cmp	r0, #0
 800471e:	d139      	bne.n	8004794 <_dtoa_r+0x2ec>
 8004720:	4602      	mov	r2, r0
 8004722:	f240 11af 	movw	r1, #431	@ 0x1af
 8004726:	4b1a      	ldr	r3, [pc, #104]	@ (8004790 <_dtoa_r+0x2e8>)
 8004728:	e6d2      	b.n	80044d0 <_dtoa_r+0x28>
 800472a:	2301      	movs	r3, #1
 800472c:	e7e0      	b.n	80046f0 <_dtoa_r+0x248>
 800472e:	2401      	movs	r4, #1
 8004730:	2300      	movs	r3, #0
 8004732:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004734:	9320      	str	r3, [sp, #128]	@ 0x80
 8004736:	f04f 33ff 	mov.w	r3, #4294967295
 800473a:	2200      	movs	r2, #0
 800473c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004740:	2312      	movs	r3, #18
 8004742:	e7d0      	b.n	80046e6 <_dtoa_r+0x23e>
 8004744:	2301      	movs	r3, #1
 8004746:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004748:	e7f5      	b.n	8004736 <_dtoa_r+0x28e>
 800474a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800474c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8004750:	e7d7      	b.n	8004702 <_dtoa_r+0x25a>
 8004752:	3101      	adds	r1, #1
 8004754:	0052      	lsls	r2, r2, #1
 8004756:	e7d8      	b.n	800470a <_dtoa_r+0x262>
 8004758:	636f4361 	.word	0x636f4361
 800475c:	3fd287a7 	.word	0x3fd287a7
 8004760:	8b60c8b3 	.word	0x8b60c8b3
 8004764:	3fc68a28 	.word	0x3fc68a28
 8004768:	509f79fb 	.word	0x509f79fb
 800476c:	3fd34413 	.word	0x3fd34413
 8004770:	08006035 	.word	0x08006035
 8004774:	0800604c 	.word	0x0800604c
 8004778:	7ff00000 	.word	0x7ff00000
 800477c:	08006031 	.word	0x08006031
 8004780:	08006005 	.word	0x08006005
 8004784:	08006004 	.word	0x08006004
 8004788:	3ff80000 	.word	0x3ff80000
 800478c:	08006148 	.word	0x08006148
 8004790:	080060a4 	.word	0x080060a4
 8004794:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004798:	6018      	str	r0, [r3, #0]
 800479a:	9b07      	ldr	r3, [sp, #28]
 800479c:	2b0e      	cmp	r3, #14
 800479e:	f200 80a4 	bhi.w	80048ea <_dtoa_r+0x442>
 80047a2:	2c00      	cmp	r4, #0
 80047a4:	f000 80a1 	beq.w	80048ea <_dtoa_r+0x442>
 80047a8:	2f00      	cmp	r7, #0
 80047aa:	dd33      	ble.n	8004814 <_dtoa_r+0x36c>
 80047ac:	4b86      	ldr	r3, [pc, #536]	@ (80049c8 <_dtoa_r+0x520>)
 80047ae:	f007 020f 	and.w	r2, r7, #15
 80047b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80047b6:	05f8      	lsls	r0, r7, #23
 80047b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047bc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80047c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80047c4:	d516      	bpl.n	80047f4 <_dtoa_r+0x34c>
 80047c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80047ca:	4b80      	ldr	r3, [pc, #512]	@ (80049cc <_dtoa_r+0x524>)
 80047cc:	2603      	movs	r6, #3
 80047ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80047d2:	f7fb ffc3 	bl	800075c <__aeabi_ddiv>
 80047d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047da:	f004 040f 	and.w	r4, r4, #15
 80047de:	4d7b      	ldr	r5, [pc, #492]	@ (80049cc <_dtoa_r+0x524>)
 80047e0:	b954      	cbnz	r4, 80047f8 <_dtoa_r+0x350>
 80047e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047ea:	f7fb ffb7 	bl	800075c <__aeabi_ddiv>
 80047ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047f2:	e028      	b.n	8004846 <_dtoa_r+0x39e>
 80047f4:	2602      	movs	r6, #2
 80047f6:	e7f2      	b.n	80047de <_dtoa_r+0x336>
 80047f8:	07e1      	lsls	r1, r4, #31
 80047fa:	d508      	bpl.n	800480e <_dtoa_r+0x366>
 80047fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004800:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004804:	f7fb fe80 	bl	8000508 <__aeabi_dmul>
 8004808:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800480c:	3601      	adds	r6, #1
 800480e:	1064      	asrs	r4, r4, #1
 8004810:	3508      	adds	r5, #8
 8004812:	e7e5      	b.n	80047e0 <_dtoa_r+0x338>
 8004814:	f000 80d2 	beq.w	80049bc <_dtoa_r+0x514>
 8004818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800481c:	427c      	negs	r4, r7
 800481e:	4b6a      	ldr	r3, [pc, #424]	@ (80049c8 <_dtoa_r+0x520>)
 8004820:	f004 020f 	and.w	r2, r4, #15
 8004824:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482c:	f7fb fe6c 	bl	8000508 <__aeabi_dmul>
 8004830:	2602      	movs	r6, #2
 8004832:	2300      	movs	r3, #0
 8004834:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004838:	4d64      	ldr	r5, [pc, #400]	@ (80049cc <_dtoa_r+0x524>)
 800483a:	1124      	asrs	r4, r4, #4
 800483c:	2c00      	cmp	r4, #0
 800483e:	f040 80b2 	bne.w	80049a6 <_dtoa_r+0x4fe>
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1d3      	bne.n	80047ee <_dtoa_r+0x346>
 8004846:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800484a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80b7 	beq.w	80049c0 <_dtoa_r+0x518>
 8004852:	2200      	movs	r2, #0
 8004854:	4620      	mov	r0, r4
 8004856:	4629      	mov	r1, r5
 8004858:	4b5d      	ldr	r3, [pc, #372]	@ (80049d0 <_dtoa_r+0x528>)
 800485a:	f7fc f8c7 	bl	80009ec <__aeabi_dcmplt>
 800485e:	2800      	cmp	r0, #0
 8004860:	f000 80ae 	beq.w	80049c0 <_dtoa_r+0x518>
 8004864:	9b07      	ldr	r3, [sp, #28]
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80aa 	beq.w	80049c0 <_dtoa_r+0x518>
 800486c:	9b08      	ldr	r3, [sp, #32]
 800486e:	2b00      	cmp	r3, #0
 8004870:	dd37      	ble.n	80048e2 <_dtoa_r+0x43a>
 8004872:	1e7b      	subs	r3, r7, #1
 8004874:	4620      	mov	r0, r4
 8004876:	9304      	str	r3, [sp, #16]
 8004878:	2200      	movs	r2, #0
 800487a:	4629      	mov	r1, r5
 800487c:	4b55      	ldr	r3, [pc, #340]	@ (80049d4 <_dtoa_r+0x52c>)
 800487e:	f7fb fe43 	bl	8000508 <__aeabi_dmul>
 8004882:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004886:	9c08      	ldr	r4, [sp, #32]
 8004888:	3601      	adds	r6, #1
 800488a:	4630      	mov	r0, r6
 800488c:	f7fb fdd2 	bl	8000434 <__aeabi_i2d>
 8004890:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004894:	f7fb fe38 	bl	8000508 <__aeabi_dmul>
 8004898:	2200      	movs	r2, #0
 800489a:	4b4f      	ldr	r3, [pc, #316]	@ (80049d8 <_dtoa_r+0x530>)
 800489c:	f7fb fc7e 	bl	800019c <__adddf3>
 80048a0:	4605      	mov	r5, r0
 80048a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80048a6:	2c00      	cmp	r4, #0
 80048a8:	f040 809a 	bne.w	80049e0 <_dtoa_r+0x538>
 80048ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048b0:	2200      	movs	r2, #0
 80048b2:	4b4a      	ldr	r3, [pc, #296]	@ (80049dc <_dtoa_r+0x534>)
 80048b4:	f7fb fc70 	bl	8000198 <__aeabi_dsub>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048c0:	462a      	mov	r2, r5
 80048c2:	4633      	mov	r3, r6
 80048c4:	f7fc f8b0 	bl	8000a28 <__aeabi_dcmpgt>
 80048c8:	2800      	cmp	r0, #0
 80048ca:	f040 828e 	bne.w	8004dea <_dtoa_r+0x942>
 80048ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048d2:	462a      	mov	r2, r5
 80048d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80048d8:	f7fc f888 	bl	80009ec <__aeabi_dcmplt>
 80048dc:	2800      	cmp	r0, #0
 80048de:	f040 8127 	bne.w	8004b30 <_dtoa_r+0x688>
 80048e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80048e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80048ea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f2c0 8163 	blt.w	8004bb8 <_dtoa_r+0x710>
 80048f2:	2f0e      	cmp	r7, #14
 80048f4:	f300 8160 	bgt.w	8004bb8 <_dtoa_r+0x710>
 80048f8:	4b33      	ldr	r3, [pc, #204]	@ (80049c8 <_dtoa_r+0x520>)
 80048fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80048fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004902:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004906:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004908:	2b00      	cmp	r3, #0
 800490a:	da03      	bge.n	8004914 <_dtoa_r+0x46c>
 800490c:	9b07      	ldr	r3, [sp, #28]
 800490e:	2b00      	cmp	r3, #0
 8004910:	f340 8100 	ble.w	8004b14 <_dtoa_r+0x66c>
 8004914:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004918:	4656      	mov	r6, sl
 800491a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800491e:	4620      	mov	r0, r4
 8004920:	4629      	mov	r1, r5
 8004922:	f7fb ff1b 	bl	800075c <__aeabi_ddiv>
 8004926:	f7fc f89f 	bl	8000a68 <__aeabi_d2iz>
 800492a:	4680      	mov	r8, r0
 800492c:	f7fb fd82 	bl	8000434 <__aeabi_i2d>
 8004930:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004934:	f7fb fde8 	bl	8000508 <__aeabi_dmul>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4620      	mov	r0, r4
 800493e:	4629      	mov	r1, r5
 8004940:	f7fb fc2a 	bl	8000198 <__aeabi_dsub>
 8004944:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004948:	9d07      	ldr	r5, [sp, #28]
 800494a:	f806 4b01 	strb.w	r4, [r6], #1
 800494e:	eba6 040a 	sub.w	r4, r6, sl
 8004952:	42a5      	cmp	r5, r4
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	f040 8116 	bne.w	8004b88 <_dtoa_r+0x6e0>
 800495c:	f7fb fc1e 	bl	800019c <__adddf3>
 8004960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004964:	4604      	mov	r4, r0
 8004966:	460d      	mov	r5, r1
 8004968:	f7fc f85e 	bl	8000a28 <__aeabi_dcmpgt>
 800496c:	2800      	cmp	r0, #0
 800496e:	f040 80f8 	bne.w	8004b62 <_dtoa_r+0x6ba>
 8004972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004976:	4620      	mov	r0, r4
 8004978:	4629      	mov	r1, r5
 800497a:	f7fc f82d 	bl	80009d8 <__aeabi_dcmpeq>
 800497e:	b118      	cbz	r0, 8004988 <_dtoa_r+0x4e0>
 8004980:	f018 0f01 	tst.w	r8, #1
 8004984:	f040 80ed 	bne.w	8004b62 <_dtoa_r+0x6ba>
 8004988:	4649      	mov	r1, r9
 800498a:	4658      	mov	r0, fp
 800498c:	f000 fc92 	bl	80052b4 <_Bfree>
 8004990:	2300      	movs	r3, #0
 8004992:	7033      	strb	r3, [r6, #0]
 8004994:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004996:	3701      	adds	r7, #1
 8004998:	601f      	str	r7, [r3, #0]
 800499a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 8320 	beq.w	8004fe2 <_dtoa_r+0xb3a>
 80049a2:	601e      	str	r6, [r3, #0]
 80049a4:	e31d      	b.n	8004fe2 <_dtoa_r+0xb3a>
 80049a6:	07e2      	lsls	r2, r4, #31
 80049a8:	d505      	bpl.n	80049b6 <_dtoa_r+0x50e>
 80049aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80049ae:	f7fb fdab 	bl	8000508 <__aeabi_dmul>
 80049b2:	2301      	movs	r3, #1
 80049b4:	3601      	adds	r6, #1
 80049b6:	1064      	asrs	r4, r4, #1
 80049b8:	3508      	adds	r5, #8
 80049ba:	e73f      	b.n	800483c <_dtoa_r+0x394>
 80049bc:	2602      	movs	r6, #2
 80049be:	e742      	b.n	8004846 <_dtoa_r+0x39e>
 80049c0:	9c07      	ldr	r4, [sp, #28]
 80049c2:	9704      	str	r7, [sp, #16]
 80049c4:	e761      	b.n	800488a <_dtoa_r+0x3e2>
 80049c6:	bf00      	nop
 80049c8:	08006148 	.word	0x08006148
 80049cc:	08006120 	.word	0x08006120
 80049d0:	3ff00000 	.word	0x3ff00000
 80049d4:	40240000 	.word	0x40240000
 80049d8:	401c0000 	.word	0x401c0000
 80049dc:	40140000 	.word	0x40140000
 80049e0:	4b70      	ldr	r3, [pc, #448]	@ (8004ba4 <_dtoa_r+0x6fc>)
 80049e2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80049e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80049e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80049ec:	4454      	add	r4, sl
 80049ee:	2900      	cmp	r1, #0
 80049f0:	d045      	beq.n	8004a7e <_dtoa_r+0x5d6>
 80049f2:	2000      	movs	r0, #0
 80049f4:	496c      	ldr	r1, [pc, #432]	@ (8004ba8 <_dtoa_r+0x700>)
 80049f6:	f7fb feb1 	bl	800075c <__aeabi_ddiv>
 80049fa:	4633      	mov	r3, r6
 80049fc:	462a      	mov	r2, r5
 80049fe:	f7fb fbcb 	bl	8000198 <__aeabi_dsub>
 8004a02:	4656      	mov	r6, sl
 8004a04:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a0c:	f7fc f82c 	bl	8000a68 <__aeabi_d2iz>
 8004a10:	4605      	mov	r5, r0
 8004a12:	f7fb fd0f 	bl	8000434 <__aeabi_i2d>
 8004a16:	4602      	mov	r2, r0
 8004a18:	460b      	mov	r3, r1
 8004a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a1e:	f7fb fbbb 	bl	8000198 <__aeabi_dsub>
 8004a22:	4602      	mov	r2, r0
 8004a24:	460b      	mov	r3, r1
 8004a26:	3530      	adds	r5, #48	@ 0x30
 8004a28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a30:	f806 5b01 	strb.w	r5, [r6], #1
 8004a34:	f7fb ffda 	bl	80009ec <__aeabi_dcmplt>
 8004a38:	2800      	cmp	r0, #0
 8004a3a:	d163      	bne.n	8004b04 <_dtoa_r+0x65c>
 8004a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004a40:	2000      	movs	r0, #0
 8004a42:	495a      	ldr	r1, [pc, #360]	@ (8004bac <_dtoa_r+0x704>)
 8004a44:	f7fb fba8 	bl	8000198 <__aeabi_dsub>
 8004a48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004a4c:	f7fb ffce 	bl	80009ec <__aeabi_dcmplt>
 8004a50:	2800      	cmp	r0, #0
 8004a52:	f040 8087 	bne.w	8004b64 <_dtoa_r+0x6bc>
 8004a56:	42a6      	cmp	r6, r4
 8004a58:	f43f af43 	beq.w	80048e2 <_dtoa_r+0x43a>
 8004a5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004a60:	2200      	movs	r2, #0
 8004a62:	4b53      	ldr	r3, [pc, #332]	@ (8004bb0 <_dtoa_r+0x708>)
 8004a64:	f7fb fd50 	bl	8000508 <__aeabi_dmul>
 8004a68:	2200      	movs	r2, #0
 8004a6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a72:	4b4f      	ldr	r3, [pc, #316]	@ (8004bb0 <_dtoa_r+0x708>)
 8004a74:	f7fb fd48 	bl	8000508 <__aeabi_dmul>
 8004a78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a7c:	e7c4      	b.n	8004a08 <_dtoa_r+0x560>
 8004a7e:	4631      	mov	r1, r6
 8004a80:	4628      	mov	r0, r5
 8004a82:	f7fb fd41 	bl	8000508 <__aeabi_dmul>
 8004a86:	4656      	mov	r6, sl
 8004a88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004a8c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004a8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a92:	f7fb ffe9 	bl	8000a68 <__aeabi_d2iz>
 8004a96:	4605      	mov	r5, r0
 8004a98:	f7fb fccc 	bl	8000434 <__aeabi_i2d>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	460b      	mov	r3, r1
 8004aa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aa4:	f7fb fb78 	bl	8000198 <__aeabi_dsub>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	460b      	mov	r3, r1
 8004aac:	3530      	adds	r5, #48	@ 0x30
 8004aae:	f806 5b01 	strb.w	r5, [r6], #1
 8004ab2:	42a6      	cmp	r6, r4
 8004ab4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004ab8:	f04f 0200 	mov.w	r2, #0
 8004abc:	d124      	bne.n	8004b08 <_dtoa_r+0x660>
 8004abe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004ac2:	4b39      	ldr	r3, [pc, #228]	@ (8004ba8 <_dtoa_r+0x700>)
 8004ac4:	f7fb fb6a 	bl	800019c <__adddf3>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ad0:	f7fb ffaa 	bl	8000a28 <__aeabi_dcmpgt>
 8004ad4:	2800      	cmp	r0, #0
 8004ad6:	d145      	bne.n	8004b64 <_dtoa_r+0x6bc>
 8004ad8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004adc:	2000      	movs	r0, #0
 8004ade:	4932      	ldr	r1, [pc, #200]	@ (8004ba8 <_dtoa_r+0x700>)
 8004ae0:	f7fb fb5a 	bl	8000198 <__aeabi_dsub>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aec:	f7fb ff7e 	bl	80009ec <__aeabi_dcmplt>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	f43f aef6 	beq.w	80048e2 <_dtoa_r+0x43a>
 8004af6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004af8:	1e73      	subs	r3, r6, #1
 8004afa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004afc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004b00:	2b30      	cmp	r3, #48	@ 0x30
 8004b02:	d0f8      	beq.n	8004af6 <_dtoa_r+0x64e>
 8004b04:	9f04      	ldr	r7, [sp, #16]
 8004b06:	e73f      	b.n	8004988 <_dtoa_r+0x4e0>
 8004b08:	4b29      	ldr	r3, [pc, #164]	@ (8004bb0 <_dtoa_r+0x708>)
 8004b0a:	f7fb fcfd 	bl	8000508 <__aeabi_dmul>
 8004b0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b12:	e7bc      	b.n	8004a8e <_dtoa_r+0x5e6>
 8004b14:	d10c      	bne.n	8004b30 <_dtoa_r+0x688>
 8004b16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	4b25      	ldr	r3, [pc, #148]	@ (8004bb4 <_dtoa_r+0x70c>)
 8004b1e:	f7fb fcf3 	bl	8000508 <__aeabi_dmul>
 8004b22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004b26:	f7fb ff75 	bl	8000a14 <__aeabi_dcmpge>
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	f000 815b 	beq.w	8004de6 <_dtoa_r+0x93e>
 8004b30:	2400      	movs	r4, #0
 8004b32:	4625      	mov	r5, r4
 8004b34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b36:	4656      	mov	r6, sl
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	9304      	str	r3, [sp, #16]
 8004b3c:	2700      	movs	r7, #0
 8004b3e:	4621      	mov	r1, r4
 8004b40:	4658      	mov	r0, fp
 8004b42:	f000 fbb7 	bl	80052b4 <_Bfree>
 8004b46:	2d00      	cmp	r5, #0
 8004b48:	d0dc      	beq.n	8004b04 <_dtoa_r+0x65c>
 8004b4a:	b12f      	cbz	r7, 8004b58 <_dtoa_r+0x6b0>
 8004b4c:	42af      	cmp	r7, r5
 8004b4e:	d003      	beq.n	8004b58 <_dtoa_r+0x6b0>
 8004b50:	4639      	mov	r1, r7
 8004b52:	4658      	mov	r0, fp
 8004b54:	f000 fbae 	bl	80052b4 <_Bfree>
 8004b58:	4629      	mov	r1, r5
 8004b5a:	4658      	mov	r0, fp
 8004b5c:	f000 fbaa 	bl	80052b4 <_Bfree>
 8004b60:	e7d0      	b.n	8004b04 <_dtoa_r+0x65c>
 8004b62:	9704      	str	r7, [sp, #16]
 8004b64:	4633      	mov	r3, r6
 8004b66:	461e      	mov	r6, r3
 8004b68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b6c:	2a39      	cmp	r2, #57	@ 0x39
 8004b6e:	d107      	bne.n	8004b80 <_dtoa_r+0x6d8>
 8004b70:	459a      	cmp	sl, r3
 8004b72:	d1f8      	bne.n	8004b66 <_dtoa_r+0x6be>
 8004b74:	9a04      	ldr	r2, [sp, #16]
 8004b76:	3201      	adds	r2, #1
 8004b78:	9204      	str	r2, [sp, #16]
 8004b7a:	2230      	movs	r2, #48	@ 0x30
 8004b7c:	f88a 2000 	strb.w	r2, [sl]
 8004b80:	781a      	ldrb	r2, [r3, #0]
 8004b82:	3201      	adds	r2, #1
 8004b84:	701a      	strb	r2, [r3, #0]
 8004b86:	e7bd      	b.n	8004b04 <_dtoa_r+0x65c>
 8004b88:	2200      	movs	r2, #0
 8004b8a:	4b09      	ldr	r3, [pc, #36]	@ (8004bb0 <_dtoa_r+0x708>)
 8004b8c:	f7fb fcbc 	bl	8000508 <__aeabi_dmul>
 8004b90:	2200      	movs	r2, #0
 8004b92:	2300      	movs	r3, #0
 8004b94:	4604      	mov	r4, r0
 8004b96:	460d      	mov	r5, r1
 8004b98:	f7fb ff1e 	bl	80009d8 <__aeabi_dcmpeq>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	f43f aebc 	beq.w	800491a <_dtoa_r+0x472>
 8004ba2:	e6f1      	b.n	8004988 <_dtoa_r+0x4e0>
 8004ba4:	08006148 	.word	0x08006148
 8004ba8:	3fe00000 	.word	0x3fe00000
 8004bac:	3ff00000 	.word	0x3ff00000
 8004bb0:	40240000 	.word	0x40240000
 8004bb4:	40140000 	.word	0x40140000
 8004bb8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004bba:	2a00      	cmp	r2, #0
 8004bbc:	f000 80db 	beq.w	8004d76 <_dtoa_r+0x8ce>
 8004bc0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004bc2:	2a01      	cmp	r2, #1
 8004bc4:	f300 80bf 	bgt.w	8004d46 <_dtoa_r+0x89e>
 8004bc8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004bca:	2a00      	cmp	r2, #0
 8004bcc:	f000 80b7 	beq.w	8004d3e <_dtoa_r+0x896>
 8004bd0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004bd4:	4646      	mov	r6, r8
 8004bd6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004bd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bda:	2101      	movs	r1, #1
 8004bdc:	441a      	add	r2, r3
 8004bde:	4658      	mov	r0, fp
 8004be0:	4498      	add	r8, r3
 8004be2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004be4:	f000 fc1a 	bl	800541c <__i2b>
 8004be8:	4605      	mov	r5, r0
 8004bea:	b15e      	cbz	r6, 8004c04 <_dtoa_r+0x75c>
 8004bec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	dd08      	ble.n	8004c04 <_dtoa_r+0x75c>
 8004bf2:	42b3      	cmp	r3, r6
 8004bf4:	bfa8      	it	ge
 8004bf6:	4633      	movge	r3, r6
 8004bf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bfa:	eba8 0803 	sub.w	r8, r8, r3
 8004bfe:	1af6      	subs	r6, r6, r3
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c06:	b1f3      	cbz	r3, 8004c46 <_dtoa_r+0x79e>
 8004c08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 80b7 	beq.w	8004d7e <_dtoa_r+0x8d6>
 8004c10:	b18c      	cbz	r4, 8004c36 <_dtoa_r+0x78e>
 8004c12:	4629      	mov	r1, r5
 8004c14:	4622      	mov	r2, r4
 8004c16:	4658      	mov	r0, fp
 8004c18:	f000 fcbe 	bl	8005598 <__pow5mult>
 8004c1c:	464a      	mov	r2, r9
 8004c1e:	4601      	mov	r1, r0
 8004c20:	4605      	mov	r5, r0
 8004c22:	4658      	mov	r0, fp
 8004c24:	f000 fc10 	bl	8005448 <__multiply>
 8004c28:	4649      	mov	r1, r9
 8004c2a:	9004      	str	r0, [sp, #16]
 8004c2c:	4658      	mov	r0, fp
 8004c2e:	f000 fb41 	bl	80052b4 <_Bfree>
 8004c32:	9b04      	ldr	r3, [sp, #16]
 8004c34:	4699      	mov	r9, r3
 8004c36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c38:	1b1a      	subs	r2, r3, r4
 8004c3a:	d004      	beq.n	8004c46 <_dtoa_r+0x79e>
 8004c3c:	4649      	mov	r1, r9
 8004c3e:	4658      	mov	r0, fp
 8004c40:	f000 fcaa 	bl	8005598 <__pow5mult>
 8004c44:	4681      	mov	r9, r0
 8004c46:	2101      	movs	r1, #1
 8004c48:	4658      	mov	r0, fp
 8004c4a:	f000 fbe7 	bl	800541c <__i2b>
 8004c4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c50:	4604      	mov	r4, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 81c9 	beq.w	8004fea <_dtoa_r+0xb42>
 8004c58:	461a      	mov	r2, r3
 8004c5a:	4601      	mov	r1, r0
 8004c5c:	4658      	mov	r0, fp
 8004c5e:	f000 fc9b 	bl	8005598 <__pow5mult>
 8004c62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004c64:	4604      	mov	r4, r0
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	f300 808f 	bgt.w	8004d8a <_dtoa_r+0x8e2>
 8004c6c:	9b02      	ldr	r3, [sp, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f040 8087 	bne.w	8004d82 <_dtoa_r+0x8da>
 8004c74:	9b03      	ldr	r3, [sp, #12]
 8004c76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f040 8083 	bne.w	8004d86 <_dtoa_r+0x8de>
 8004c80:	9b03      	ldr	r3, [sp, #12]
 8004c82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c86:	0d1b      	lsrs	r3, r3, #20
 8004c88:	051b      	lsls	r3, r3, #20
 8004c8a:	b12b      	cbz	r3, 8004c98 <_dtoa_r+0x7f0>
 8004c8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c8e:	f108 0801 	add.w	r8, r8, #1
 8004c92:	3301      	adds	r3, #1
 8004c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c96:	2301      	movs	r3, #1
 8004c98:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f000 81aa 	beq.w	8004ff6 <_dtoa_r+0xb4e>
 8004ca2:	6923      	ldr	r3, [r4, #16]
 8004ca4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004ca8:	6918      	ldr	r0, [r3, #16]
 8004caa:	f000 fb6b 	bl	8005384 <__hi0bits>
 8004cae:	f1c0 0020 	rsb	r0, r0, #32
 8004cb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cb4:	4418      	add	r0, r3
 8004cb6:	f010 001f 	ands.w	r0, r0, #31
 8004cba:	d071      	beq.n	8004da0 <_dtoa_r+0x8f8>
 8004cbc:	f1c0 0320 	rsb	r3, r0, #32
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	dd65      	ble.n	8004d90 <_dtoa_r+0x8e8>
 8004cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cc6:	f1c0 001c 	rsb	r0, r0, #28
 8004cca:	4403      	add	r3, r0
 8004ccc:	4480      	add	r8, r0
 8004cce:	4406      	add	r6, r0
 8004cd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cd2:	f1b8 0f00 	cmp.w	r8, #0
 8004cd6:	dd05      	ble.n	8004ce4 <_dtoa_r+0x83c>
 8004cd8:	4649      	mov	r1, r9
 8004cda:	4642      	mov	r2, r8
 8004cdc:	4658      	mov	r0, fp
 8004cde:	f000 fcb5 	bl	800564c <__lshift>
 8004ce2:	4681      	mov	r9, r0
 8004ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	dd05      	ble.n	8004cf6 <_dtoa_r+0x84e>
 8004cea:	4621      	mov	r1, r4
 8004cec:	461a      	mov	r2, r3
 8004cee:	4658      	mov	r0, fp
 8004cf0:	f000 fcac 	bl	800564c <__lshift>
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d053      	beq.n	8004da4 <_dtoa_r+0x8fc>
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	4648      	mov	r0, r9
 8004d00:	f000 fd10 	bl	8005724 <__mcmp>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	da4d      	bge.n	8004da4 <_dtoa_r+0x8fc>
 8004d08:	1e7b      	subs	r3, r7, #1
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	9304      	str	r3, [sp, #16]
 8004d0e:	220a      	movs	r2, #10
 8004d10:	2300      	movs	r3, #0
 8004d12:	4658      	mov	r0, fp
 8004d14:	f000 faf0 	bl	80052f8 <__multadd>
 8004d18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d1a:	4681      	mov	r9, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 816c 	beq.w	8004ffa <_dtoa_r+0xb52>
 8004d22:	2300      	movs	r3, #0
 8004d24:	4629      	mov	r1, r5
 8004d26:	220a      	movs	r2, #10
 8004d28:	4658      	mov	r0, fp
 8004d2a:	f000 fae5 	bl	80052f8 <__multadd>
 8004d2e:	9b08      	ldr	r3, [sp, #32]
 8004d30:	4605      	mov	r5, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	dc61      	bgt.n	8004dfa <_dtoa_r+0x952>
 8004d36:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	dc3b      	bgt.n	8004db4 <_dtoa_r+0x90c>
 8004d3c:	e05d      	b.n	8004dfa <_dtoa_r+0x952>
 8004d3e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d40:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004d44:	e746      	b.n	8004bd4 <_dtoa_r+0x72c>
 8004d46:	9b07      	ldr	r3, [sp, #28]
 8004d48:	1e5c      	subs	r4, r3, #1
 8004d4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d4c:	42a3      	cmp	r3, r4
 8004d4e:	bfbf      	itttt	lt
 8004d50:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8004d52:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8004d54:	1ae3      	sublt	r3, r4, r3
 8004d56:	18d2      	addlt	r2, r2, r3
 8004d58:	bfa8      	it	ge
 8004d5a:	1b1c      	subge	r4, r3, r4
 8004d5c:	9b07      	ldr	r3, [sp, #28]
 8004d5e:	bfbe      	ittt	lt
 8004d60:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8004d62:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8004d64:	2400      	movlt	r4, #0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	bfb5      	itete	lt
 8004d6a:	eba8 0603 	sublt.w	r6, r8, r3
 8004d6e:	4646      	movge	r6, r8
 8004d70:	2300      	movlt	r3, #0
 8004d72:	9b07      	ldrge	r3, [sp, #28]
 8004d74:	e730      	b.n	8004bd8 <_dtoa_r+0x730>
 8004d76:	4646      	mov	r6, r8
 8004d78:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004d7a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004d7c:	e735      	b.n	8004bea <_dtoa_r+0x742>
 8004d7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d80:	e75c      	b.n	8004c3c <_dtoa_r+0x794>
 8004d82:	2300      	movs	r3, #0
 8004d84:	e788      	b.n	8004c98 <_dtoa_r+0x7f0>
 8004d86:	9b02      	ldr	r3, [sp, #8]
 8004d88:	e786      	b.n	8004c98 <_dtoa_r+0x7f0>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d8e:	e788      	b.n	8004ca2 <_dtoa_r+0x7fa>
 8004d90:	d09f      	beq.n	8004cd2 <_dtoa_r+0x82a>
 8004d92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d94:	331c      	adds	r3, #28
 8004d96:	441a      	add	r2, r3
 8004d98:	4498      	add	r8, r3
 8004d9a:	441e      	add	r6, r3
 8004d9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d9e:	e798      	b.n	8004cd2 <_dtoa_r+0x82a>
 8004da0:	4603      	mov	r3, r0
 8004da2:	e7f6      	b.n	8004d92 <_dtoa_r+0x8ea>
 8004da4:	9b07      	ldr	r3, [sp, #28]
 8004da6:	9704      	str	r7, [sp, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	dc20      	bgt.n	8004dee <_dtoa_r+0x946>
 8004dac:	9308      	str	r3, [sp, #32]
 8004dae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	dd1e      	ble.n	8004df2 <_dtoa_r+0x94a>
 8004db4:	9b08      	ldr	r3, [sp, #32]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f47f aebc 	bne.w	8004b34 <_dtoa_r+0x68c>
 8004dbc:	4621      	mov	r1, r4
 8004dbe:	2205      	movs	r2, #5
 8004dc0:	4658      	mov	r0, fp
 8004dc2:	f000 fa99 	bl	80052f8 <__multadd>
 8004dc6:	4601      	mov	r1, r0
 8004dc8:	4604      	mov	r4, r0
 8004dca:	4648      	mov	r0, r9
 8004dcc:	f000 fcaa 	bl	8005724 <__mcmp>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	f77f aeaf 	ble.w	8004b34 <_dtoa_r+0x68c>
 8004dd6:	2331      	movs	r3, #49	@ 0x31
 8004dd8:	4656      	mov	r6, sl
 8004dda:	f806 3b01 	strb.w	r3, [r6], #1
 8004dde:	9b04      	ldr	r3, [sp, #16]
 8004de0:	3301      	adds	r3, #1
 8004de2:	9304      	str	r3, [sp, #16]
 8004de4:	e6aa      	b.n	8004b3c <_dtoa_r+0x694>
 8004de6:	9c07      	ldr	r4, [sp, #28]
 8004de8:	9704      	str	r7, [sp, #16]
 8004dea:	4625      	mov	r5, r4
 8004dec:	e7f3      	b.n	8004dd6 <_dtoa_r+0x92e>
 8004dee:	9b07      	ldr	r3, [sp, #28]
 8004df0:	9308      	str	r3, [sp, #32]
 8004df2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 8104 	beq.w	8005002 <_dtoa_r+0xb5a>
 8004dfa:	2e00      	cmp	r6, #0
 8004dfc:	dd05      	ble.n	8004e0a <_dtoa_r+0x962>
 8004dfe:	4629      	mov	r1, r5
 8004e00:	4632      	mov	r2, r6
 8004e02:	4658      	mov	r0, fp
 8004e04:	f000 fc22 	bl	800564c <__lshift>
 8004e08:	4605      	mov	r5, r0
 8004e0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d05a      	beq.n	8004ec6 <_dtoa_r+0xa1e>
 8004e10:	4658      	mov	r0, fp
 8004e12:	6869      	ldr	r1, [r5, #4]
 8004e14:	f000 fa0e 	bl	8005234 <_Balloc>
 8004e18:	4606      	mov	r6, r0
 8004e1a:	b928      	cbnz	r0, 8004e28 <_dtoa_r+0x980>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004e22:	4b83      	ldr	r3, [pc, #524]	@ (8005030 <_dtoa_r+0xb88>)
 8004e24:	f7ff bb54 	b.w	80044d0 <_dtoa_r+0x28>
 8004e28:	692a      	ldr	r2, [r5, #16]
 8004e2a:	f105 010c 	add.w	r1, r5, #12
 8004e2e:	3202      	adds	r2, #2
 8004e30:	0092      	lsls	r2, r2, #2
 8004e32:	300c      	adds	r0, #12
 8004e34:	f000 feba 	bl	8005bac <memcpy>
 8004e38:	2201      	movs	r2, #1
 8004e3a:	4631      	mov	r1, r6
 8004e3c:	4658      	mov	r0, fp
 8004e3e:	f000 fc05 	bl	800564c <__lshift>
 8004e42:	462f      	mov	r7, r5
 8004e44:	4605      	mov	r5, r0
 8004e46:	f10a 0301 	add.w	r3, sl, #1
 8004e4a:	9307      	str	r3, [sp, #28]
 8004e4c:	9b08      	ldr	r3, [sp, #32]
 8004e4e:	4453      	add	r3, sl
 8004e50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e52:	9b02      	ldr	r3, [sp, #8]
 8004e54:	f003 0301 	and.w	r3, r3, #1
 8004e58:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e5a:	9b07      	ldr	r3, [sp, #28]
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	4648      	mov	r0, r9
 8004e62:	9302      	str	r3, [sp, #8]
 8004e64:	f7ff fa95 	bl	8004392 <quorem>
 8004e68:	4639      	mov	r1, r7
 8004e6a:	9008      	str	r0, [sp, #32]
 8004e6c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004e70:	4648      	mov	r0, r9
 8004e72:	f000 fc57 	bl	8005724 <__mcmp>
 8004e76:	462a      	mov	r2, r5
 8004e78:	9009      	str	r0, [sp, #36]	@ 0x24
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	4658      	mov	r0, fp
 8004e7e:	f000 fc6d 	bl	800575c <__mdiff>
 8004e82:	68c2      	ldr	r2, [r0, #12]
 8004e84:	4606      	mov	r6, r0
 8004e86:	bb02      	cbnz	r2, 8004eca <_dtoa_r+0xa22>
 8004e88:	4601      	mov	r1, r0
 8004e8a:	4648      	mov	r0, r9
 8004e8c:	f000 fc4a 	bl	8005724 <__mcmp>
 8004e90:	4602      	mov	r2, r0
 8004e92:	4631      	mov	r1, r6
 8004e94:	4658      	mov	r0, fp
 8004e96:	920c      	str	r2, [sp, #48]	@ 0x30
 8004e98:	f000 fa0c 	bl	80052b4 <_Bfree>
 8004e9c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004e9e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004ea0:	9e07      	ldr	r6, [sp, #28]
 8004ea2:	ea43 0102 	orr.w	r1, r3, r2
 8004ea6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ea8:	4319      	orrs	r1, r3
 8004eaa:	d110      	bne.n	8004ece <_dtoa_r+0xa26>
 8004eac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004eb0:	d029      	beq.n	8004f06 <_dtoa_r+0xa5e>
 8004eb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	dd02      	ble.n	8004ebe <_dtoa_r+0xa16>
 8004eb8:	9b08      	ldr	r3, [sp, #32]
 8004eba:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004ebe:	9b02      	ldr	r3, [sp, #8]
 8004ec0:	f883 8000 	strb.w	r8, [r3]
 8004ec4:	e63b      	b.n	8004b3e <_dtoa_r+0x696>
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	e7bb      	b.n	8004e42 <_dtoa_r+0x99a>
 8004eca:	2201      	movs	r2, #1
 8004ecc:	e7e1      	b.n	8004e92 <_dtoa_r+0x9ea>
 8004ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	db04      	blt.n	8004ede <_dtoa_r+0xa36>
 8004ed4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004eda:	430b      	orrs	r3, r1
 8004edc:	d120      	bne.n	8004f20 <_dtoa_r+0xa78>
 8004ede:	2a00      	cmp	r2, #0
 8004ee0:	dded      	ble.n	8004ebe <_dtoa_r+0xa16>
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	4658      	mov	r0, fp
 8004ee8:	f000 fbb0 	bl	800564c <__lshift>
 8004eec:	4621      	mov	r1, r4
 8004eee:	4681      	mov	r9, r0
 8004ef0:	f000 fc18 	bl	8005724 <__mcmp>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	dc03      	bgt.n	8004f00 <_dtoa_r+0xa58>
 8004ef8:	d1e1      	bne.n	8004ebe <_dtoa_r+0xa16>
 8004efa:	f018 0f01 	tst.w	r8, #1
 8004efe:	d0de      	beq.n	8004ebe <_dtoa_r+0xa16>
 8004f00:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f04:	d1d8      	bne.n	8004eb8 <_dtoa_r+0xa10>
 8004f06:	2339      	movs	r3, #57	@ 0x39
 8004f08:	9a02      	ldr	r2, [sp, #8]
 8004f0a:	7013      	strb	r3, [r2, #0]
 8004f0c:	4633      	mov	r3, r6
 8004f0e:	461e      	mov	r6, r3
 8004f10:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004f14:	3b01      	subs	r3, #1
 8004f16:	2a39      	cmp	r2, #57	@ 0x39
 8004f18:	d052      	beq.n	8004fc0 <_dtoa_r+0xb18>
 8004f1a:	3201      	adds	r2, #1
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	e60e      	b.n	8004b3e <_dtoa_r+0x696>
 8004f20:	2a00      	cmp	r2, #0
 8004f22:	dd07      	ble.n	8004f34 <_dtoa_r+0xa8c>
 8004f24:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004f28:	d0ed      	beq.n	8004f06 <_dtoa_r+0xa5e>
 8004f2a:	9a02      	ldr	r2, [sp, #8]
 8004f2c:	f108 0301 	add.w	r3, r8, #1
 8004f30:	7013      	strb	r3, [r2, #0]
 8004f32:	e604      	b.n	8004b3e <_dtoa_r+0x696>
 8004f34:	9b07      	ldr	r3, [sp, #28]
 8004f36:	9a07      	ldr	r2, [sp, #28]
 8004f38:	f803 8c01 	strb.w	r8, [r3, #-1]
 8004f3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d028      	beq.n	8004f94 <_dtoa_r+0xaec>
 8004f42:	4649      	mov	r1, r9
 8004f44:	2300      	movs	r3, #0
 8004f46:	220a      	movs	r2, #10
 8004f48:	4658      	mov	r0, fp
 8004f4a:	f000 f9d5 	bl	80052f8 <__multadd>
 8004f4e:	42af      	cmp	r7, r5
 8004f50:	4681      	mov	r9, r0
 8004f52:	f04f 0300 	mov.w	r3, #0
 8004f56:	f04f 020a 	mov.w	r2, #10
 8004f5a:	4639      	mov	r1, r7
 8004f5c:	4658      	mov	r0, fp
 8004f5e:	d107      	bne.n	8004f70 <_dtoa_r+0xac8>
 8004f60:	f000 f9ca 	bl	80052f8 <__multadd>
 8004f64:	4607      	mov	r7, r0
 8004f66:	4605      	mov	r5, r0
 8004f68:	9b07      	ldr	r3, [sp, #28]
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	9307      	str	r3, [sp, #28]
 8004f6e:	e774      	b.n	8004e5a <_dtoa_r+0x9b2>
 8004f70:	f000 f9c2 	bl	80052f8 <__multadd>
 8004f74:	4629      	mov	r1, r5
 8004f76:	4607      	mov	r7, r0
 8004f78:	2300      	movs	r3, #0
 8004f7a:	220a      	movs	r2, #10
 8004f7c:	4658      	mov	r0, fp
 8004f7e:	f000 f9bb 	bl	80052f8 <__multadd>
 8004f82:	4605      	mov	r5, r0
 8004f84:	e7f0      	b.n	8004f68 <_dtoa_r+0xac0>
 8004f86:	9b08      	ldr	r3, [sp, #32]
 8004f88:	2700      	movs	r7, #0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	bfcc      	ite	gt
 8004f8e:	461e      	movgt	r6, r3
 8004f90:	2601      	movle	r6, #1
 8004f92:	4456      	add	r6, sl
 8004f94:	4649      	mov	r1, r9
 8004f96:	2201      	movs	r2, #1
 8004f98:	4658      	mov	r0, fp
 8004f9a:	f000 fb57 	bl	800564c <__lshift>
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	4681      	mov	r9, r0
 8004fa2:	f000 fbbf 	bl	8005724 <__mcmp>
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	dcb0      	bgt.n	8004f0c <_dtoa_r+0xa64>
 8004faa:	d102      	bne.n	8004fb2 <_dtoa_r+0xb0a>
 8004fac:	f018 0f01 	tst.w	r8, #1
 8004fb0:	d1ac      	bne.n	8004f0c <_dtoa_r+0xa64>
 8004fb2:	4633      	mov	r3, r6
 8004fb4:	461e      	mov	r6, r3
 8004fb6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004fba:	2a30      	cmp	r2, #48	@ 0x30
 8004fbc:	d0fa      	beq.n	8004fb4 <_dtoa_r+0xb0c>
 8004fbe:	e5be      	b.n	8004b3e <_dtoa_r+0x696>
 8004fc0:	459a      	cmp	sl, r3
 8004fc2:	d1a4      	bne.n	8004f0e <_dtoa_r+0xa66>
 8004fc4:	9b04      	ldr	r3, [sp, #16]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	9304      	str	r3, [sp, #16]
 8004fca:	2331      	movs	r3, #49	@ 0x31
 8004fcc:	f88a 3000 	strb.w	r3, [sl]
 8004fd0:	e5b5      	b.n	8004b3e <_dtoa_r+0x696>
 8004fd2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004fd4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005034 <_dtoa_r+0xb8c>
 8004fd8:	b11b      	cbz	r3, 8004fe2 <_dtoa_r+0xb3a>
 8004fda:	f10a 0308 	add.w	r3, sl, #8
 8004fde:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004fe0:	6013      	str	r3, [r2, #0]
 8004fe2:	4650      	mov	r0, sl
 8004fe4:	b017      	add	sp, #92	@ 0x5c
 8004fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	f77f ae3d 	ble.w	8004c6c <_dtoa_r+0x7c4>
 8004ff2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ff4:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ff6:	2001      	movs	r0, #1
 8004ff8:	e65b      	b.n	8004cb2 <_dtoa_r+0x80a>
 8004ffa:	9b08      	ldr	r3, [sp, #32]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f77f aed6 	ble.w	8004dae <_dtoa_r+0x906>
 8005002:	4656      	mov	r6, sl
 8005004:	4621      	mov	r1, r4
 8005006:	4648      	mov	r0, r9
 8005008:	f7ff f9c3 	bl	8004392 <quorem>
 800500c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005010:	9b08      	ldr	r3, [sp, #32]
 8005012:	f806 8b01 	strb.w	r8, [r6], #1
 8005016:	eba6 020a 	sub.w	r2, r6, sl
 800501a:	4293      	cmp	r3, r2
 800501c:	ddb3      	ble.n	8004f86 <_dtoa_r+0xade>
 800501e:	4649      	mov	r1, r9
 8005020:	2300      	movs	r3, #0
 8005022:	220a      	movs	r2, #10
 8005024:	4658      	mov	r0, fp
 8005026:	f000 f967 	bl	80052f8 <__multadd>
 800502a:	4681      	mov	r9, r0
 800502c:	e7ea      	b.n	8005004 <_dtoa_r+0xb5c>
 800502e:	bf00      	nop
 8005030:	080060a4 	.word	0x080060a4
 8005034:	08006028 	.word	0x08006028

08005038 <_free_r>:
 8005038:	b538      	push	{r3, r4, r5, lr}
 800503a:	4605      	mov	r5, r0
 800503c:	2900      	cmp	r1, #0
 800503e:	d040      	beq.n	80050c2 <_free_r+0x8a>
 8005040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005044:	1f0c      	subs	r4, r1, #4
 8005046:	2b00      	cmp	r3, #0
 8005048:	bfb8      	it	lt
 800504a:	18e4      	addlt	r4, r4, r3
 800504c:	f000 f8e6 	bl	800521c <__malloc_lock>
 8005050:	4a1c      	ldr	r2, [pc, #112]	@ (80050c4 <_free_r+0x8c>)
 8005052:	6813      	ldr	r3, [r2, #0]
 8005054:	b933      	cbnz	r3, 8005064 <_free_r+0x2c>
 8005056:	6063      	str	r3, [r4, #4]
 8005058:	6014      	str	r4, [r2, #0]
 800505a:	4628      	mov	r0, r5
 800505c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005060:	f000 b8e2 	b.w	8005228 <__malloc_unlock>
 8005064:	42a3      	cmp	r3, r4
 8005066:	d908      	bls.n	800507a <_free_r+0x42>
 8005068:	6820      	ldr	r0, [r4, #0]
 800506a:	1821      	adds	r1, r4, r0
 800506c:	428b      	cmp	r3, r1
 800506e:	bf01      	itttt	eq
 8005070:	6819      	ldreq	r1, [r3, #0]
 8005072:	685b      	ldreq	r3, [r3, #4]
 8005074:	1809      	addeq	r1, r1, r0
 8005076:	6021      	streq	r1, [r4, #0]
 8005078:	e7ed      	b.n	8005056 <_free_r+0x1e>
 800507a:	461a      	mov	r2, r3
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	b10b      	cbz	r3, 8005084 <_free_r+0x4c>
 8005080:	42a3      	cmp	r3, r4
 8005082:	d9fa      	bls.n	800507a <_free_r+0x42>
 8005084:	6811      	ldr	r1, [r2, #0]
 8005086:	1850      	adds	r0, r2, r1
 8005088:	42a0      	cmp	r0, r4
 800508a:	d10b      	bne.n	80050a4 <_free_r+0x6c>
 800508c:	6820      	ldr	r0, [r4, #0]
 800508e:	4401      	add	r1, r0
 8005090:	1850      	adds	r0, r2, r1
 8005092:	4283      	cmp	r3, r0
 8005094:	6011      	str	r1, [r2, #0]
 8005096:	d1e0      	bne.n	800505a <_free_r+0x22>
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	4408      	add	r0, r1
 800509e:	6010      	str	r0, [r2, #0]
 80050a0:	6053      	str	r3, [r2, #4]
 80050a2:	e7da      	b.n	800505a <_free_r+0x22>
 80050a4:	d902      	bls.n	80050ac <_free_r+0x74>
 80050a6:	230c      	movs	r3, #12
 80050a8:	602b      	str	r3, [r5, #0]
 80050aa:	e7d6      	b.n	800505a <_free_r+0x22>
 80050ac:	6820      	ldr	r0, [r4, #0]
 80050ae:	1821      	adds	r1, r4, r0
 80050b0:	428b      	cmp	r3, r1
 80050b2:	bf01      	itttt	eq
 80050b4:	6819      	ldreq	r1, [r3, #0]
 80050b6:	685b      	ldreq	r3, [r3, #4]
 80050b8:	1809      	addeq	r1, r1, r0
 80050ba:	6021      	streq	r1, [r4, #0]
 80050bc:	6063      	str	r3, [r4, #4]
 80050be:	6054      	str	r4, [r2, #4]
 80050c0:	e7cb      	b.n	800505a <_free_r+0x22>
 80050c2:	bd38      	pop	{r3, r4, r5, pc}
 80050c4:	200003c4 	.word	0x200003c4

080050c8 <malloc>:
 80050c8:	4b02      	ldr	r3, [pc, #8]	@ (80050d4 <malloc+0xc>)
 80050ca:	4601      	mov	r1, r0
 80050cc:	6818      	ldr	r0, [r3, #0]
 80050ce:	f000 b825 	b.w	800511c <_malloc_r>
 80050d2:	bf00      	nop
 80050d4:	20000024 	.word	0x20000024

080050d8 <sbrk_aligned>:
 80050d8:	b570      	push	{r4, r5, r6, lr}
 80050da:	4e0f      	ldr	r6, [pc, #60]	@ (8005118 <sbrk_aligned+0x40>)
 80050dc:	460c      	mov	r4, r1
 80050de:	6831      	ldr	r1, [r6, #0]
 80050e0:	4605      	mov	r5, r0
 80050e2:	b911      	cbnz	r1, 80050ea <sbrk_aligned+0x12>
 80050e4:	f000 fd52 	bl	8005b8c <_sbrk_r>
 80050e8:	6030      	str	r0, [r6, #0]
 80050ea:	4621      	mov	r1, r4
 80050ec:	4628      	mov	r0, r5
 80050ee:	f000 fd4d 	bl	8005b8c <_sbrk_r>
 80050f2:	1c43      	adds	r3, r0, #1
 80050f4:	d103      	bne.n	80050fe <sbrk_aligned+0x26>
 80050f6:	f04f 34ff 	mov.w	r4, #4294967295
 80050fa:	4620      	mov	r0, r4
 80050fc:	bd70      	pop	{r4, r5, r6, pc}
 80050fe:	1cc4      	adds	r4, r0, #3
 8005100:	f024 0403 	bic.w	r4, r4, #3
 8005104:	42a0      	cmp	r0, r4
 8005106:	d0f8      	beq.n	80050fa <sbrk_aligned+0x22>
 8005108:	1a21      	subs	r1, r4, r0
 800510a:	4628      	mov	r0, r5
 800510c:	f000 fd3e 	bl	8005b8c <_sbrk_r>
 8005110:	3001      	adds	r0, #1
 8005112:	d1f2      	bne.n	80050fa <sbrk_aligned+0x22>
 8005114:	e7ef      	b.n	80050f6 <sbrk_aligned+0x1e>
 8005116:	bf00      	nop
 8005118:	200003c0 	.word	0x200003c0

0800511c <_malloc_r>:
 800511c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005120:	1ccd      	adds	r5, r1, #3
 8005122:	f025 0503 	bic.w	r5, r5, #3
 8005126:	3508      	adds	r5, #8
 8005128:	2d0c      	cmp	r5, #12
 800512a:	bf38      	it	cc
 800512c:	250c      	movcc	r5, #12
 800512e:	2d00      	cmp	r5, #0
 8005130:	4606      	mov	r6, r0
 8005132:	db01      	blt.n	8005138 <_malloc_r+0x1c>
 8005134:	42a9      	cmp	r1, r5
 8005136:	d904      	bls.n	8005142 <_malloc_r+0x26>
 8005138:	230c      	movs	r3, #12
 800513a:	6033      	str	r3, [r6, #0]
 800513c:	2000      	movs	r0, #0
 800513e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005142:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005218 <_malloc_r+0xfc>
 8005146:	f000 f869 	bl	800521c <__malloc_lock>
 800514a:	f8d8 3000 	ldr.w	r3, [r8]
 800514e:	461c      	mov	r4, r3
 8005150:	bb44      	cbnz	r4, 80051a4 <_malloc_r+0x88>
 8005152:	4629      	mov	r1, r5
 8005154:	4630      	mov	r0, r6
 8005156:	f7ff ffbf 	bl	80050d8 <sbrk_aligned>
 800515a:	1c43      	adds	r3, r0, #1
 800515c:	4604      	mov	r4, r0
 800515e:	d158      	bne.n	8005212 <_malloc_r+0xf6>
 8005160:	f8d8 4000 	ldr.w	r4, [r8]
 8005164:	4627      	mov	r7, r4
 8005166:	2f00      	cmp	r7, #0
 8005168:	d143      	bne.n	80051f2 <_malloc_r+0xd6>
 800516a:	2c00      	cmp	r4, #0
 800516c:	d04b      	beq.n	8005206 <_malloc_r+0xea>
 800516e:	6823      	ldr	r3, [r4, #0]
 8005170:	4639      	mov	r1, r7
 8005172:	4630      	mov	r0, r6
 8005174:	eb04 0903 	add.w	r9, r4, r3
 8005178:	f000 fd08 	bl	8005b8c <_sbrk_r>
 800517c:	4581      	cmp	r9, r0
 800517e:	d142      	bne.n	8005206 <_malloc_r+0xea>
 8005180:	6821      	ldr	r1, [r4, #0]
 8005182:	4630      	mov	r0, r6
 8005184:	1a6d      	subs	r5, r5, r1
 8005186:	4629      	mov	r1, r5
 8005188:	f7ff ffa6 	bl	80050d8 <sbrk_aligned>
 800518c:	3001      	adds	r0, #1
 800518e:	d03a      	beq.n	8005206 <_malloc_r+0xea>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	442b      	add	r3, r5
 8005194:	6023      	str	r3, [r4, #0]
 8005196:	f8d8 3000 	ldr.w	r3, [r8]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	bb62      	cbnz	r2, 80051f8 <_malloc_r+0xdc>
 800519e:	f8c8 7000 	str.w	r7, [r8]
 80051a2:	e00f      	b.n	80051c4 <_malloc_r+0xa8>
 80051a4:	6822      	ldr	r2, [r4, #0]
 80051a6:	1b52      	subs	r2, r2, r5
 80051a8:	d420      	bmi.n	80051ec <_malloc_r+0xd0>
 80051aa:	2a0b      	cmp	r2, #11
 80051ac:	d917      	bls.n	80051de <_malloc_r+0xc2>
 80051ae:	1961      	adds	r1, r4, r5
 80051b0:	42a3      	cmp	r3, r4
 80051b2:	6025      	str	r5, [r4, #0]
 80051b4:	bf18      	it	ne
 80051b6:	6059      	strne	r1, [r3, #4]
 80051b8:	6863      	ldr	r3, [r4, #4]
 80051ba:	bf08      	it	eq
 80051bc:	f8c8 1000 	streq.w	r1, [r8]
 80051c0:	5162      	str	r2, [r4, r5]
 80051c2:	604b      	str	r3, [r1, #4]
 80051c4:	4630      	mov	r0, r6
 80051c6:	f000 f82f 	bl	8005228 <__malloc_unlock>
 80051ca:	f104 000b 	add.w	r0, r4, #11
 80051ce:	1d23      	adds	r3, r4, #4
 80051d0:	f020 0007 	bic.w	r0, r0, #7
 80051d4:	1ac2      	subs	r2, r0, r3
 80051d6:	bf1c      	itt	ne
 80051d8:	1a1b      	subne	r3, r3, r0
 80051da:	50a3      	strne	r3, [r4, r2]
 80051dc:	e7af      	b.n	800513e <_malloc_r+0x22>
 80051de:	6862      	ldr	r2, [r4, #4]
 80051e0:	42a3      	cmp	r3, r4
 80051e2:	bf0c      	ite	eq
 80051e4:	f8c8 2000 	streq.w	r2, [r8]
 80051e8:	605a      	strne	r2, [r3, #4]
 80051ea:	e7eb      	b.n	80051c4 <_malloc_r+0xa8>
 80051ec:	4623      	mov	r3, r4
 80051ee:	6864      	ldr	r4, [r4, #4]
 80051f0:	e7ae      	b.n	8005150 <_malloc_r+0x34>
 80051f2:	463c      	mov	r4, r7
 80051f4:	687f      	ldr	r7, [r7, #4]
 80051f6:	e7b6      	b.n	8005166 <_malloc_r+0x4a>
 80051f8:	461a      	mov	r2, r3
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	42a3      	cmp	r3, r4
 80051fe:	d1fb      	bne.n	80051f8 <_malloc_r+0xdc>
 8005200:	2300      	movs	r3, #0
 8005202:	6053      	str	r3, [r2, #4]
 8005204:	e7de      	b.n	80051c4 <_malloc_r+0xa8>
 8005206:	230c      	movs	r3, #12
 8005208:	4630      	mov	r0, r6
 800520a:	6033      	str	r3, [r6, #0]
 800520c:	f000 f80c 	bl	8005228 <__malloc_unlock>
 8005210:	e794      	b.n	800513c <_malloc_r+0x20>
 8005212:	6005      	str	r5, [r0, #0]
 8005214:	e7d6      	b.n	80051c4 <_malloc_r+0xa8>
 8005216:	bf00      	nop
 8005218:	200003c4 	.word	0x200003c4

0800521c <__malloc_lock>:
 800521c:	4801      	ldr	r0, [pc, #4]	@ (8005224 <__malloc_lock+0x8>)
 800521e:	f7ff b8a8 	b.w	8004372 <__retarget_lock_acquire_recursive>
 8005222:	bf00      	nop
 8005224:	200003bc 	.word	0x200003bc

08005228 <__malloc_unlock>:
 8005228:	4801      	ldr	r0, [pc, #4]	@ (8005230 <__malloc_unlock+0x8>)
 800522a:	f7ff b8a3 	b.w	8004374 <__retarget_lock_release_recursive>
 800522e:	bf00      	nop
 8005230:	200003bc 	.word	0x200003bc

08005234 <_Balloc>:
 8005234:	b570      	push	{r4, r5, r6, lr}
 8005236:	69c6      	ldr	r6, [r0, #28]
 8005238:	4604      	mov	r4, r0
 800523a:	460d      	mov	r5, r1
 800523c:	b976      	cbnz	r6, 800525c <_Balloc+0x28>
 800523e:	2010      	movs	r0, #16
 8005240:	f7ff ff42 	bl	80050c8 <malloc>
 8005244:	4602      	mov	r2, r0
 8005246:	61e0      	str	r0, [r4, #28]
 8005248:	b920      	cbnz	r0, 8005254 <_Balloc+0x20>
 800524a:	216b      	movs	r1, #107	@ 0x6b
 800524c:	4b17      	ldr	r3, [pc, #92]	@ (80052ac <_Balloc+0x78>)
 800524e:	4818      	ldr	r0, [pc, #96]	@ (80052b0 <_Balloc+0x7c>)
 8005250:	f000 fcba 	bl	8005bc8 <__assert_func>
 8005254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005258:	6006      	str	r6, [r0, #0]
 800525a:	60c6      	str	r6, [r0, #12]
 800525c:	69e6      	ldr	r6, [r4, #28]
 800525e:	68f3      	ldr	r3, [r6, #12]
 8005260:	b183      	cbz	r3, 8005284 <_Balloc+0x50>
 8005262:	69e3      	ldr	r3, [r4, #28]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800526a:	b9b8      	cbnz	r0, 800529c <_Balloc+0x68>
 800526c:	2101      	movs	r1, #1
 800526e:	fa01 f605 	lsl.w	r6, r1, r5
 8005272:	1d72      	adds	r2, r6, #5
 8005274:	4620      	mov	r0, r4
 8005276:	0092      	lsls	r2, r2, #2
 8005278:	f000 fcc4 	bl	8005c04 <_calloc_r>
 800527c:	b160      	cbz	r0, 8005298 <_Balloc+0x64>
 800527e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005282:	e00e      	b.n	80052a2 <_Balloc+0x6e>
 8005284:	2221      	movs	r2, #33	@ 0x21
 8005286:	2104      	movs	r1, #4
 8005288:	4620      	mov	r0, r4
 800528a:	f000 fcbb 	bl	8005c04 <_calloc_r>
 800528e:	69e3      	ldr	r3, [r4, #28]
 8005290:	60f0      	str	r0, [r6, #12]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1e4      	bne.n	8005262 <_Balloc+0x2e>
 8005298:	2000      	movs	r0, #0
 800529a:	bd70      	pop	{r4, r5, r6, pc}
 800529c:	6802      	ldr	r2, [r0, #0]
 800529e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80052a2:	2300      	movs	r3, #0
 80052a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80052a8:	e7f7      	b.n	800529a <_Balloc+0x66>
 80052aa:	bf00      	nop
 80052ac:	08006035 	.word	0x08006035
 80052b0:	080060b5 	.word	0x080060b5

080052b4 <_Bfree>:
 80052b4:	b570      	push	{r4, r5, r6, lr}
 80052b6:	69c6      	ldr	r6, [r0, #28]
 80052b8:	4605      	mov	r5, r0
 80052ba:	460c      	mov	r4, r1
 80052bc:	b976      	cbnz	r6, 80052dc <_Bfree+0x28>
 80052be:	2010      	movs	r0, #16
 80052c0:	f7ff ff02 	bl	80050c8 <malloc>
 80052c4:	4602      	mov	r2, r0
 80052c6:	61e8      	str	r0, [r5, #28]
 80052c8:	b920      	cbnz	r0, 80052d4 <_Bfree+0x20>
 80052ca:	218f      	movs	r1, #143	@ 0x8f
 80052cc:	4b08      	ldr	r3, [pc, #32]	@ (80052f0 <_Bfree+0x3c>)
 80052ce:	4809      	ldr	r0, [pc, #36]	@ (80052f4 <_Bfree+0x40>)
 80052d0:	f000 fc7a 	bl	8005bc8 <__assert_func>
 80052d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80052d8:	6006      	str	r6, [r0, #0]
 80052da:	60c6      	str	r6, [r0, #12]
 80052dc:	b13c      	cbz	r4, 80052ee <_Bfree+0x3a>
 80052de:	69eb      	ldr	r3, [r5, #28]
 80052e0:	6862      	ldr	r2, [r4, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80052e8:	6021      	str	r1, [r4, #0]
 80052ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80052ee:	bd70      	pop	{r4, r5, r6, pc}
 80052f0:	08006035 	.word	0x08006035
 80052f4:	080060b5 	.word	0x080060b5

080052f8 <__multadd>:
 80052f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052fc:	4607      	mov	r7, r0
 80052fe:	460c      	mov	r4, r1
 8005300:	461e      	mov	r6, r3
 8005302:	2000      	movs	r0, #0
 8005304:	690d      	ldr	r5, [r1, #16]
 8005306:	f101 0c14 	add.w	ip, r1, #20
 800530a:	f8dc 3000 	ldr.w	r3, [ip]
 800530e:	3001      	adds	r0, #1
 8005310:	b299      	uxth	r1, r3
 8005312:	fb02 6101 	mla	r1, r2, r1, r6
 8005316:	0c1e      	lsrs	r6, r3, #16
 8005318:	0c0b      	lsrs	r3, r1, #16
 800531a:	fb02 3306 	mla	r3, r2, r6, r3
 800531e:	b289      	uxth	r1, r1
 8005320:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005324:	4285      	cmp	r5, r0
 8005326:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800532a:	f84c 1b04 	str.w	r1, [ip], #4
 800532e:	dcec      	bgt.n	800530a <__multadd+0x12>
 8005330:	b30e      	cbz	r6, 8005376 <__multadd+0x7e>
 8005332:	68a3      	ldr	r3, [r4, #8]
 8005334:	42ab      	cmp	r3, r5
 8005336:	dc19      	bgt.n	800536c <__multadd+0x74>
 8005338:	6861      	ldr	r1, [r4, #4]
 800533a:	4638      	mov	r0, r7
 800533c:	3101      	adds	r1, #1
 800533e:	f7ff ff79 	bl	8005234 <_Balloc>
 8005342:	4680      	mov	r8, r0
 8005344:	b928      	cbnz	r0, 8005352 <__multadd+0x5a>
 8005346:	4602      	mov	r2, r0
 8005348:	21ba      	movs	r1, #186	@ 0xba
 800534a:	4b0c      	ldr	r3, [pc, #48]	@ (800537c <__multadd+0x84>)
 800534c:	480c      	ldr	r0, [pc, #48]	@ (8005380 <__multadd+0x88>)
 800534e:	f000 fc3b 	bl	8005bc8 <__assert_func>
 8005352:	6922      	ldr	r2, [r4, #16]
 8005354:	f104 010c 	add.w	r1, r4, #12
 8005358:	3202      	adds	r2, #2
 800535a:	0092      	lsls	r2, r2, #2
 800535c:	300c      	adds	r0, #12
 800535e:	f000 fc25 	bl	8005bac <memcpy>
 8005362:	4621      	mov	r1, r4
 8005364:	4638      	mov	r0, r7
 8005366:	f7ff ffa5 	bl	80052b4 <_Bfree>
 800536a:	4644      	mov	r4, r8
 800536c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005370:	3501      	adds	r5, #1
 8005372:	615e      	str	r6, [r3, #20]
 8005374:	6125      	str	r5, [r4, #16]
 8005376:	4620      	mov	r0, r4
 8005378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800537c:	080060a4 	.word	0x080060a4
 8005380:	080060b5 	.word	0x080060b5

08005384 <__hi0bits>:
 8005384:	4603      	mov	r3, r0
 8005386:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800538a:	bf3a      	itte	cc
 800538c:	0403      	lslcc	r3, r0, #16
 800538e:	2010      	movcc	r0, #16
 8005390:	2000      	movcs	r0, #0
 8005392:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005396:	bf3c      	itt	cc
 8005398:	021b      	lslcc	r3, r3, #8
 800539a:	3008      	addcc	r0, #8
 800539c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053a0:	bf3c      	itt	cc
 80053a2:	011b      	lslcc	r3, r3, #4
 80053a4:	3004      	addcc	r0, #4
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053aa:	bf3c      	itt	cc
 80053ac:	009b      	lslcc	r3, r3, #2
 80053ae:	3002      	addcc	r0, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	db05      	blt.n	80053c0 <__hi0bits+0x3c>
 80053b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80053b8:	f100 0001 	add.w	r0, r0, #1
 80053bc:	bf08      	it	eq
 80053be:	2020      	moveq	r0, #32
 80053c0:	4770      	bx	lr

080053c2 <__lo0bits>:
 80053c2:	6803      	ldr	r3, [r0, #0]
 80053c4:	4602      	mov	r2, r0
 80053c6:	f013 0007 	ands.w	r0, r3, #7
 80053ca:	d00b      	beq.n	80053e4 <__lo0bits+0x22>
 80053cc:	07d9      	lsls	r1, r3, #31
 80053ce:	d421      	bmi.n	8005414 <__lo0bits+0x52>
 80053d0:	0798      	lsls	r0, r3, #30
 80053d2:	bf49      	itett	mi
 80053d4:	085b      	lsrmi	r3, r3, #1
 80053d6:	089b      	lsrpl	r3, r3, #2
 80053d8:	2001      	movmi	r0, #1
 80053da:	6013      	strmi	r3, [r2, #0]
 80053dc:	bf5c      	itt	pl
 80053de:	2002      	movpl	r0, #2
 80053e0:	6013      	strpl	r3, [r2, #0]
 80053e2:	4770      	bx	lr
 80053e4:	b299      	uxth	r1, r3
 80053e6:	b909      	cbnz	r1, 80053ec <__lo0bits+0x2a>
 80053e8:	2010      	movs	r0, #16
 80053ea:	0c1b      	lsrs	r3, r3, #16
 80053ec:	b2d9      	uxtb	r1, r3
 80053ee:	b909      	cbnz	r1, 80053f4 <__lo0bits+0x32>
 80053f0:	3008      	adds	r0, #8
 80053f2:	0a1b      	lsrs	r3, r3, #8
 80053f4:	0719      	lsls	r1, r3, #28
 80053f6:	bf04      	itt	eq
 80053f8:	091b      	lsreq	r3, r3, #4
 80053fa:	3004      	addeq	r0, #4
 80053fc:	0799      	lsls	r1, r3, #30
 80053fe:	bf04      	itt	eq
 8005400:	089b      	lsreq	r3, r3, #2
 8005402:	3002      	addeq	r0, #2
 8005404:	07d9      	lsls	r1, r3, #31
 8005406:	d403      	bmi.n	8005410 <__lo0bits+0x4e>
 8005408:	085b      	lsrs	r3, r3, #1
 800540a:	f100 0001 	add.w	r0, r0, #1
 800540e:	d003      	beq.n	8005418 <__lo0bits+0x56>
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	4770      	bx	lr
 8005414:	2000      	movs	r0, #0
 8005416:	4770      	bx	lr
 8005418:	2020      	movs	r0, #32
 800541a:	4770      	bx	lr

0800541c <__i2b>:
 800541c:	b510      	push	{r4, lr}
 800541e:	460c      	mov	r4, r1
 8005420:	2101      	movs	r1, #1
 8005422:	f7ff ff07 	bl	8005234 <_Balloc>
 8005426:	4602      	mov	r2, r0
 8005428:	b928      	cbnz	r0, 8005436 <__i2b+0x1a>
 800542a:	f240 1145 	movw	r1, #325	@ 0x145
 800542e:	4b04      	ldr	r3, [pc, #16]	@ (8005440 <__i2b+0x24>)
 8005430:	4804      	ldr	r0, [pc, #16]	@ (8005444 <__i2b+0x28>)
 8005432:	f000 fbc9 	bl	8005bc8 <__assert_func>
 8005436:	2301      	movs	r3, #1
 8005438:	6144      	str	r4, [r0, #20]
 800543a:	6103      	str	r3, [r0, #16]
 800543c:	bd10      	pop	{r4, pc}
 800543e:	bf00      	nop
 8005440:	080060a4 	.word	0x080060a4
 8005444:	080060b5 	.word	0x080060b5

08005448 <__multiply>:
 8005448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800544c:	4614      	mov	r4, r2
 800544e:	690a      	ldr	r2, [r1, #16]
 8005450:	6923      	ldr	r3, [r4, #16]
 8005452:	460f      	mov	r7, r1
 8005454:	429a      	cmp	r2, r3
 8005456:	bfa2      	ittt	ge
 8005458:	4623      	movge	r3, r4
 800545a:	460c      	movge	r4, r1
 800545c:	461f      	movge	r7, r3
 800545e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005462:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005466:	68a3      	ldr	r3, [r4, #8]
 8005468:	6861      	ldr	r1, [r4, #4]
 800546a:	eb0a 0609 	add.w	r6, sl, r9
 800546e:	42b3      	cmp	r3, r6
 8005470:	b085      	sub	sp, #20
 8005472:	bfb8      	it	lt
 8005474:	3101      	addlt	r1, #1
 8005476:	f7ff fedd 	bl	8005234 <_Balloc>
 800547a:	b930      	cbnz	r0, 800548a <__multiply+0x42>
 800547c:	4602      	mov	r2, r0
 800547e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005482:	4b43      	ldr	r3, [pc, #268]	@ (8005590 <__multiply+0x148>)
 8005484:	4843      	ldr	r0, [pc, #268]	@ (8005594 <__multiply+0x14c>)
 8005486:	f000 fb9f 	bl	8005bc8 <__assert_func>
 800548a:	f100 0514 	add.w	r5, r0, #20
 800548e:	462b      	mov	r3, r5
 8005490:	2200      	movs	r2, #0
 8005492:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005496:	4543      	cmp	r3, r8
 8005498:	d321      	bcc.n	80054de <__multiply+0x96>
 800549a:	f107 0114 	add.w	r1, r7, #20
 800549e:	f104 0214 	add.w	r2, r4, #20
 80054a2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80054a6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80054aa:	9302      	str	r3, [sp, #8]
 80054ac:	1b13      	subs	r3, r2, r4
 80054ae:	3b15      	subs	r3, #21
 80054b0:	f023 0303 	bic.w	r3, r3, #3
 80054b4:	3304      	adds	r3, #4
 80054b6:	f104 0715 	add.w	r7, r4, #21
 80054ba:	42ba      	cmp	r2, r7
 80054bc:	bf38      	it	cc
 80054be:	2304      	movcc	r3, #4
 80054c0:	9301      	str	r3, [sp, #4]
 80054c2:	9b02      	ldr	r3, [sp, #8]
 80054c4:	9103      	str	r1, [sp, #12]
 80054c6:	428b      	cmp	r3, r1
 80054c8:	d80c      	bhi.n	80054e4 <__multiply+0x9c>
 80054ca:	2e00      	cmp	r6, #0
 80054cc:	dd03      	ble.n	80054d6 <__multiply+0x8e>
 80054ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d05a      	beq.n	800558c <__multiply+0x144>
 80054d6:	6106      	str	r6, [r0, #16]
 80054d8:	b005      	add	sp, #20
 80054da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054de:	f843 2b04 	str.w	r2, [r3], #4
 80054e2:	e7d8      	b.n	8005496 <__multiply+0x4e>
 80054e4:	f8b1 a000 	ldrh.w	sl, [r1]
 80054e8:	f1ba 0f00 	cmp.w	sl, #0
 80054ec:	d023      	beq.n	8005536 <__multiply+0xee>
 80054ee:	46a9      	mov	r9, r5
 80054f0:	f04f 0c00 	mov.w	ip, #0
 80054f4:	f104 0e14 	add.w	lr, r4, #20
 80054f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80054fc:	f8d9 3000 	ldr.w	r3, [r9]
 8005500:	fa1f fb87 	uxth.w	fp, r7
 8005504:	b29b      	uxth	r3, r3
 8005506:	fb0a 330b 	mla	r3, sl, fp, r3
 800550a:	4463      	add	r3, ip
 800550c:	f8d9 c000 	ldr.w	ip, [r9]
 8005510:	0c3f      	lsrs	r7, r7, #16
 8005512:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005516:	fb0a c707 	mla	r7, sl, r7, ip
 800551a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800551e:	b29b      	uxth	r3, r3
 8005520:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005524:	4572      	cmp	r2, lr
 8005526:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800552a:	f849 3b04 	str.w	r3, [r9], #4
 800552e:	d8e3      	bhi.n	80054f8 <__multiply+0xb0>
 8005530:	9b01      	ldr	r3, [sp, #4]
 8005532:	f845 c003 	str.w	ip, [r5, r3]
 8005536:	9b03      	ldr	r3, [sp, #12]
 8005538:	3104      	adds	r1, #4
 800553a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800553e:	f1b9 0f00 	cmp.w	r9, #0
 8005542:	d021      	beq.n	8005588 <__multiply+0x140>
 8005544:	46ae      	mov	lr, r5
 8005546:	f04f 0a00 	mov.w	sl, #0
 800554a:	682b      	ldr	r3, [r5, #0]
 800554c:	f104 0c14 	add.w	ip, r4, #20
 8005550:	f8bc b000 	ldrh.w	fp, [ip]
 8005554:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005558:	b29b      	uxth	r3, r3
 800555a:	fb09 770b 	mla	r7, r9, fp, r7
 800555e:	4457      	add	r7, sl
 8005560:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005564:	f84e 3b04 	str.w	r3, [lr], #4
 8005568:	f85c 3b04 	ldr.w	r3, [ip], #4
 800556c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005570:	f8be 3000 	ldrh.w	r3, [lr]
 8005574:	4562      	cmp	r2, ip
 8005576:	fb09 330a 	mla	r3, r9, sl, r3
 800557a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800557e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005582:	d8e5      	bhi.n	8005550 <__multiply+0x108>
 8005584:	9f01      	ldr	r7, [sp, #4]
 8005586:	51eb      	str	r3, [r5, r7]
 8005588:	3504      	adds	r5, #4
 800558a:	e79a      	b.n	80054c2 <__multiply+0x7a>
 800558c:	3e01      	subs	r6, #1
 800558e:	e79c      	b.n	80054ca <__multiply+0x82>
 8005590:	080060a4 	.word	0x080060a4
 8005594:	080060b5 	.word	0x080060b5

08005598 <__pow5mult>:
 8005598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800559c:	4615      	mov	r5, r2
 800559e:	f012 0203 	ands.w	r2, r2, #3
 80055a2:	4607      	mov	r7, r0
 80055a4:	460e      	mov	r6, r1
 80055a6:	d007      	beq.n	80055b8 <__pow5mult+0x20>
 80055a8:	4c25      	ldr	r4, [pc, #148]	@ (8005640 <__pow5mult+0xa8>)
 80055aa:	3a01      	subs	r2, #1
 80055ac:	2300      	movs	r3, #0
 80055ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80055b2:	f7ff fea1 	bl	80052f8 <__multadd>
 80055b6:	4606      	mov	r6, r0
 80055b8:	10ad      	asrs	r5, r5, #2
 80055ba:	d03d      	beq.n	8005638 <__pow5mult+0xa0>
 80055bc:	69fc      	ldr	r4, [r7, #28]
 80055be:	b97c      	cbnz	r4, 80055e0 <__pow5mult+0x48>
 80055c0:	2010      	movs	r0, #16
 80055c2:	f7ff fd81 	bl	80050c8 <malloc>
 80055c6:	4602      	mov	r2, r0
 80055c8:	61f8      	str	r0, [r7, #28]
 80055ca:	b928      	cbnz	r0, 80055d8 <__pow5mult+0x40>
 80055cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80055d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005644 <__pow5mult+0xac>)
 80055d2:	481d      	ldr	r0, [pc, #116]	@ (8005648 <__pow5mult+0xb0>)
 80055d4:	f000 faf8 	bl	8005bc8 <__assert_func>
 80055d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80055dc:	6004      	str	r4, [r0, #0]
 80055de:	60c4      	str	r4, [r0, #12]
 80055e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80055e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80055e8:	b94c      	cbnz	r4, 80055fe <__pow5mult+0x66>
 80055ea:	f240 2171 	movw	r1, #625	@ 0x271
 80055ee:	4638      	mov	r0, r7
 80055f0:	f7ff ff14 	bl	800541c <__i2b>
 80055f4:	2300      	movs	r3, #0
 80055f6:	4604      	mov	r4, r0
 80055f8:	f8c8 0008 	str.w	r0, [r8, #8]
 80055fc:	6003      	str	r3, [r0, #0]
 80055fe:	f04f 0900 	mov.w	r9, #0
 8005602:	07eb      	lsls	r3, r5, #31
 8005604:	d50a      	bpl.n	800561c <__pow5mult+0x84>
 8005606:	4631      	mov	r1, r6
 8005608:	4622      	mov	r2, r4
 800560a:	4638      	mov	r0, r7
 800560c:	f7ff ff1c 	bl	8005448 <__multiply>
 8005610:	4680      	mov	r8, r0
 8005612:	4631      	mov	r1, r6
 8005614:	4638      	mov	r0, r7
 8005616:	f7ff fe4d 	bl	80052b4 <_Bfree>
 800561a:	4646      	mov	r6, r8
 800561c:	106d      	asrs	r5, r5, #1
 800561e:	d00b      	beq.n	8005638 <__pow5mult+0xa0>
 8005620:	6820      	ldr	r0, [r4, #0]
 8005622:	b938      	cbnz	r0, 8005634 <__pow5mult+0x9c>
 8005624:	4622      	mov	r2, r4
 8005626:	4621      	mov	r1, r4
 8005628:	4638      	mov	r0, r7
 800562a:	f7ff ff0d 	bl	8005448 <__multiply>
 800562e:	6020      	str	r0, [r4, #0]
 8005630:	f8c0 9000 	str.w	r9, [r0]
 8005634:	4604      	mov	r4, r0
 8005636:	e7e4      	b.n	8005602 <__pow5mult+0x6a>
 8005638:	4630      	mov	r0, r6
 800563a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800563e:	bf00      	nop
 8005640:	08006110 	.word	0x08006110
 8005644:	08006035 	.word	0x08006035
 8005648:	080060b5 	.word	0x080060b5

0800564c <__lshift>:
 800564c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005650:	460c      	mov	r4, r1
 8005652:	4607      	mov	r7, r0
 8005654:	4691      	mov	r9, r2
 8005656:	6923      	ldr	r3, [r4, #16]
 8005658:	6849      	ldr	r1, [r1, #4]
 800565a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800565e:	68a3      	ldr	r3, [r4, #8]
 8005660:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005664:	f108 0601 	add.w	r6, r8, #1
 8005668:	42b3      	cmp	r3, r6
 800566a:	db0b      	blt.n	8005684 <__lshift+0x38>
 800566c:	4638      	mov	r0, r7
 800566e:	f7ff fde1 	bl	8005234 <_Balloc>
 8005672:	4605      	mov	r5, r0
 8005674:	b948      	cbnz	r0, 800568a <__lshift+0x3e>
 8005676:	4602      	mov	r2, r0
 8005678:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800567c:	4b27      	ldr	r3, [pc, #156]	@ (800571c <__lshift+0xd0>)
 800567e:	4828      	ldr	r0, [pc, #160]	@ (8005720 <__lshift+0xd4>)
 8005680:	f000 faa2 	bl	8005bc8 <__assert_func>
 8005684:	3101      	adds	r1, #1
 8005686:	005b      	lsls	r3, r3, #1
 8005688:	e7ee      	b.n	8005668 <__lshift+0x1c>
 800568a:	2300      	movs	r3, #0
 800568c:	f100 0114 	add.w	r1, r0, #20
 8005690:	f100 0210 	add.w	r2, r0, #16
 8005694:	4618      	mov	r0, r3
 8005696:	4553      	cmp	r3, sl
 8005698:	db33      	blt.n	8005702 <__lshift+0xb6>
 800569a:	6920      	ldr	r0, [r4, #16]
 800569c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80056a0:	f104 0314 	add.w	r3, r4, #20
 80056a4:	f019 091f 	ands.w	r9, r9, #31
 80056a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80056ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80056b0:	d02b      	beq.n	800570a <__lshift+0xbe>
 80056b2:	468a      	mov	sl, r1
 80056b4:	2200      	movs	r2, #0
 80056b6:	f1c9 0e20 	rsb	lr, r9, #32
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	fa00 f009 	lsl.w	r0, r0, r9
 80056c0:	4310      	orrs	r0, r2
 80056c2:	f84a 0b04 	str.w	r0, [sl], #4
 80056c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80056ca:	459c      	cmp	ip, r3
 80056cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80056d0:	d8f3      	bhi.n	80056ba <__lshift+0x6e>
 80056d2:	ebac 0304 	sub.w	r3, ip, r4
 80056d6:	3b15      	subs	r3, #21
 80056d8:	f023 0303 	bic.w	r3, r3, #3
 80056dc:	3304      	adds	r3, #4
 80056de:	f104 0015 	add.w	r0, r4, #21
 80056e2:	4584      	cmp	ip, r0
 80056e4:	bf38      	it	cc
 80056e6:	2304      	movcc	r3, #4
 80056e8:	50ca      	str	r2, [r1, r3]
 80056ea:	b10a      	cbz	r2, 80056f0 <__lshift+0xa4>
 80056ec:	f108 0602 	add.w	r6, r8, #2
 80056f0:	3e01      	subs	r6, #1
 80056f2:	4638      	mov	r0, r7
 80056f4:	4621      	mov	r1, r4
 80056f6:	612e      	str	r6, [r5, #16]
 80056f8:	f7ff fddc 	bl	80052b4 <_Bfree>
 80056fc:	4628      	mov	r0, r5
 80056fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005702:	f842 0f04 	str.w	r0, [r2, #4]!
 8005706:	3301      	adds	r3, #1
 8005708:	e7c5      	b.n	8005696 <__lshift+0x4a>
 800570a:	3904      	subs	r1, #4
 800570c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005710:	459c      	cmp	ip, r3
 8005712:	f841 2f04 	str.w	r2, [r1, #4]!
 8005716:	d8f9      	bhi.n	800570c <__lshift+0xc0>
 8005718:	e7ea      	b.n	80056f0 <__lshift+0xa4>
 800571a:	bf00      	nop
 800571c:	080060a4 	.word	0x080060a4
 8005720:	080060b5 	.word	0x080060b5

08005724 <__mcmp>:
 8005724:	4603      	mov	r3, r0
 8005726:	690a      	ldr	r2, [r1, #16]
 8005728:	6900      	ldr	r0, [r0, #16]
 800572a:	b530      	push	{r4, r5, lr}
 800572c:	1a80      	subs	r0, r0, r2
 800572e:	d10e      	bne.n	800574e <__mcmp+0x2a>
 8005730:	3314      	adds	r3, #20
 8005732:	3114      	adds	r1, #20
 8005734:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005738:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800573c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005740:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005744:	4295      	cmp	r5, r2
 8005746:	d003      	beq.n	8005750 <__mcmp+0x2c>
 8005748:	d205      	bcs.n	8005756 <__mcmp+0x32>
 800574a:	f04f 30ff 	mov.w	r0, #4294967295
 800574e:	bd30      	pop	{r4, r5, pc}
 8005750:	42a3      	cmp	r3, r4
 8005752:	d3f3      	bcc.n	800573c <__mcmp+0x18>
 8005754:	e7fb      	b.n	800574e <__mcmp+0x2a>
 8005756:	2001      	movs	r0, #1
 8005758:	e7f9      	b.n	800574e <__mcmp+0x2a>
	...

0800575c <__mdiff>:
 800575c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005760:	4689      	mov	r9, r1
 8005762:	4606      	mov	r6, r0
 8005764:	4611      	mov	r1, r2
 8005766:	4648      	mov	r0, r9
 8005768:	4614      	mov	r4, r2
 800576a:	f7ff ffdb 	bl	8005724 <__mcmp>
 800576e:	1e05      	subs	r5, r0, #0
 8005770:	d112      	bne.n	8005798 <__mdiff+0x3c>
 8005772:	4629      	mov	r1, r5
 8005774:	4630      	mov	r0, r6
 8005776:	f7ff fd5d 	bl	8005234 <_Balloc>
 800577a:	4602      	mov	r2, r0
 800577c:	b928      	cbnz	r0, 800578a <__mdiff+0x2e>
 800577e:	f240 2137 	movw	r1, #567	@ 0x237
 8005782:	4b3e      	ldr	r3, [pc, #248]	@ (800587c <__mdiff+0x120>)
 8005784:	483e      	ldr	r0, [pc, #248]	@ (8005880 <__mdiff+0x124>)
 8005786:	f000 fa1f 	bl	8005bc8 <__assert_func>
 800578a:	2301      	movs	r3, #1
 800578c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005790:	4610      	mov	r0, r2
 8005792:	b003      	add	sp, #12
 8005794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005798:	bfbc      	itt	lt
 800579a:	464b      	movlt	r3, r9
 800579c:	46a1      	movlt	r9, r4
 800579e:	4630      	mov	r0, r6
 80057a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80057a4:	bfba      	itte	lt
 80057a6:	461c      	movlt	r4, r3
 80057a8:	2501      	movlt	r5, #1
 80057aa:	2500      	movge	r5, #0
 80057ac:	f7ff fd42 	bl	8005234 <_Balloc>
 80057b0:	4602      	mov	r2, r0
 80057b2:	b918      	cbnz	r0, 80057bc <__mdiff+0x60>
 80057b4:	f240 2145 	movw	r1, #581	@ 0x245
 80057b8:	4b30      	ldr	r3, [pc, #192]	@ (800587c <__mdiff+0x120>)
 80057ba:	e7e3      	b.n	8005784 <__mdiff+0x28>
 80057bc:	f100 0b14 	add.w	fp, r0, #20
 80057c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80057c4:	f109 0310 	add.w	r3, r9, #16
 80057c8:	60c5      	str	r5, [r0, #12]
 80057ca:	f04f 0c00 	mov.w	ip, #0
 80057ce:	f109 0514 	add.w	r5, r9, #20
 80057d2:	46d9      	mov	r9, fp
 80057d4:	6926      	ldr	r6, [r4, #16]
 80057d6:	f104 0e14 	add.w	lr, r4, #20
 80057da:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80057de:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80057e2:	9301      	str	r3, [sp, #4]
 80057e4:	9b01      	ldr	r3, [sp, #4]
 80057e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80057ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80057ee:	b281      	uxth	r1, r0
 80057f0:	9301      	str	r3, [sp, #4]
 80057f2:	fa1f f38a 	uxth.w	r3, sl
 80057f6:	1a5b      	subs	r3, r3, r1
 80057f8:	0c00      	lsrs	r0, r0, #16
 80057fa:	4463      	add	r3, ip
 80057fc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005800:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005804:	b29b      	uxth	r3, r3
 8005806:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800580a:	4576      	cmp	r6, lr
 800580c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005810:	f849 3b04 	str.w	r3, [r9], #4
 8005814:	d8e6      	bhi.n	80057e4 <__mdiff+0x88>
 8005816:	1b33      	subs	r3, r6, r4
 8005818:	3b15      	subs	r3, #21
 800581a:	f023 0303 	bic.w	r3, r3, #3
 800581e:	3415      	adds	r4, #21
 8005820:	3304      	adds	r3, #4
 8005822:	42a6      	cmp	r6, r4
 8005824:	bf38      	it	cc
 8005826:	2304      	movcc	r3, #4
 8005828:	441d      	add	r5, r3
 800582a:	445b      	add	r3, fp
 800582c:	461e      	mov	r6, r3
 800582e:	462c      	mov	r4, r5
 8005830:	4544      	cmp	r4, r8
 8005832:	d30e      	bcc.n	8005852 <__mdiff+0xf6>
 8005834:	f108 0103 	add.w	r1, r8, #3
 8005838:	1b49      	subs	r1, r1, r5
 800583a:	f021 0103 	bic.w	r1, r1, #3
 800583e:	3d03      	subs	r5, #3
 8005840:	45a8      	cmp	r8, r5
 8005842:	bf38      	it	cc
 8005844:	2100      	movcc	r1, #0
 8005846:	440b      	add	r3, r1
 8005848:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800584c:	b199      	cbz	r1, 8005876 <__mdiff+0x11a>
 800584e:	6117      	str	r7, [r2, #16]
 8005850:	e79e      	b.n	8005790 <__mdiff+0x34>
 8005852:	46e6      	mov	lr, ip
 8005854:	f854 1b04 	ldr.w	r1, [r4], #4
 8005858:	fa1f fc81 	uxth.w	ip, r1
 800585c:	44f4      	add	ip, lr
 800585e:	0c08      	lsrs	r0, r1, #16
 8005860:	4471      	add	r1, lr
 8005862:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005866:	b289      	uxth	r1, r1
 8005868:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800586c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005870:	f846 1b04 	str.w	r1, [r6], #4
 8005874:	e7dc      	b.n	8005830 <__mdiff+0xd4>
 8005876:	3f01      	subs	r7, #1
 8005878:	e7e6      	b.n	8005848 <__mdiff+0xec>
 800587a:	bf00      	nop
 800587c:	080060a4 	.word	0x080060a4
 8005880:	080060b5 	.word	0x080060b5

08005884 <__d2b>:
 8005884:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005888:	2101      	movs	r1, #1
 800588a:	4690      	mov	r8, r2
 800588c:	4699      	mov	r9, r3
 800588e:	9e08      	ldr	r6, [sp, #32]
 8005890:	f7ff fcd0 	bl	8005234 <_Balloc>
 8005894:	4604      	mov	r4, r0
 8005896:	b930      	cbnz	r0, 80058a6 <__d2b+0x22>
 8005898:	4602      	mov	r2, r0
 800589a:	f240 310f 	movw	r1, #783	@ 0x30f
 800589e:	4b23      	ldr	r3, [pc, #140]	@ (800592c <__d2b+0xa8>)
 80058a0:	4823      	ldr	r0, [pc, #140]	@ (8005930 <__d2b+0xac>)
 80058a2:	f000 f991 	bl	8005bc8 <__assert_func>
 80058a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80058aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80058ae:	b10d      	cbz	r5, 80058b4 <__d2b+0x30>
 80058b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	f1b8 0300 	subs.w	r3, r8, #0
 80058ba:	d024      	beq.n	8005906 <__d2b+0x82>
 80058bc:	4668      	mov	r0, sp
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	f7ff fd7f 	bl	80053c2 <__lo0bits>
 80058c4:	e9dd 1200 	ldrd	r1, r2, [sp]
 80058c8:	b1d8      	cbz	r0, 8005902 <__d2b+0x7e>
 80058ca:	f1c0 0320 	rsb	r3, r0, #32
 80058ce:	fa02 f303 	lsl.w	r3, r2, r3
 80058d2:	430b      	orrs	r3, r1
 80058d4:	40c2      	lsrs	r2, r0
 80058d6:	6163      	str	r3, [r4, #20]
 80058d8:	9201      	str	r2, [sp, #4]
 80058da:	9b01      	ldr	r3, [sp, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	bf0c      	ite	eq
 80058e0:	2201      	moveq	r2, #1
 80058e2:	2202      	movne	r2, #2
 80058e4:	61a3      	str	r3, [r4, #24]
 80058e6:	6122      	str	r2, [r4, #16]
 80058e8:	b1ad      	cbz	r5, 8005916 <__d2b+0x92>
 80058ea:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80058ee:	4405      	add	r5, r0
 80058f0:	6035      	str	r5, [r6, #0]
 80058f2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80058f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058f8:	6018      	str	r0, [r3, #0]
 80058fa:	4620      	mov	r0, r4
 80058fc:	b002      	add	sp, #8
 80058fe:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005902:	6161      	str	r1, [r4, #20]
 8005904:	e7e9      	b.n	80058da <__d2b+0x56>
 8005906:	a801      	add	r0, sp, #4
 8005908:	f7ff fd5b 	bl	80053c2 <__lo0bits>
 800590c:	9b01      	ldr	r3, [sp, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	6163      	str	r3, [r4, #20]
 8005912:	3020      	adds	r0, #32
 8005914:	e7e7      	b.n	80058e6 <__d2b+0x62>
 8005916:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800591a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800591e:	6030      	str	r0, [r6, #0]
 8005920:	6918      	ldr	r0, [r3, #16]
 8005922:	f7ff fd2f 	bl	8005384 <__hi0bits>
 8005926:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800592a:	e7e4      	b.n	80058f6 <__d2b+0x72>
 800592c:	080060a4 	.word	0x080060a4
 8005930:	080060b5 	.word	0x080060b5

08005934 <__sflush_r>:
 8005934:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593a:	0716      	lsls	r6, r2, #28
 800593c:	4605      	mov	r5, r0
 800593e:	460c      	mov	r4, r1
 8005940:	d454      	bmi.n	80059ec <__sflush_r+0xb8>
 8005942:	684b      	ldr	r3, [r1, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	dc02      	bgt.n	800594e <__sflush_r+0x1a>
 8005948:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	dd48      	ble.n	80059e0 <__sflush_r+0xac>
 800594e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005950:	2e00      	cmp	r6, #0
 8005952:	d045      	beq.n	80059e0 <__sflush_r+0xac>
 8005954:	2300      	movs	r3, #0
 8005956:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800595a:	682f      	ldr	r7, [r5, #0]
 800595c:	6a21      	ldr	r1, [r4, #32]
 800595e:	602b      	str	r3, [r5, #0]
 8005960:	d030      	beq.n	80059c4 <__sflush_r+0x90>
 8005962:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005964:	89a3      	ldrh	r3, [r4, #12]
 8005966:	0759      	lsls	r1, r3, #29
 8005968:	d505      	bpl.n	8005976 <__sflush_r+0x42>
 800596a:	6863      	ldr	r3, [r4, #4]
 800596c:	1ad2      	subs	r2, r2, r3
 800596e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005970:	b10b      	cbz	r3, 8005976 <__sflush_r+0x42>
 8005972:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005974:	1ad2      	subs	r2, r2, r3
 8005976:	2300      	movs	r3, #0
 8005978:	4628      	mov	r0, r5
 800597a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800597c:	6a21      	ldr	r1, [r4, #32]
 800597e:	47b0      	blx	r6
 8005980:	1c43      	adds	r3, r0, #1
 8005982:	89a3      	ldrh	r3, [r4, #12]
 8005984:	d106      	bne.n	8005994 <__sflush_r+0x60>
 8005986:	6829      	ldr	r1, [r5, #0]
 8005988:	291d      	cmp	r1, #29
 800598a:	d82b      	bhi.n	80059e4 <__sflush_r+0xb0>
 800598c:	4a28      	ldr	r2, [pc, #160]	@ (8005a30 <__sflush_r+0xfc>)
 800598e:	410a      	asrs	r2, r1
 8005990:	07d6      	lsls	r6, r2, #31
 8005992:	d427      	bmi.n	80059e4 <__sflush_r+0xb0>
 8005994:	2200      	movs	r2, #0
 8005996:	6062      	str	r2, [r4, #4]
 8005998:	6922      	ldr	r2, [r4, #16]
 800599a:	04d9      	lsls	r1, r3, #19
 800599c:	6022      	str	r2, [r4, #0]
 800599e:	d504      	bpl.n	80059aa <__sflush_r+0x76>
 80059a0:	1c42      	adds	r2, r0, #1
 80059a2:	d101      	bne.n	80059a8 <__sflush_r+0x74>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	b903      	cbnz	r3, 80059aa <__sflush_r+0x76>
 80059a8:	6560      	str	r0, [r4, #84]	@ 0x54
 80059aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059ac:	602f      	str	r7, [r5, #0]
 80059ae:	b1b9      	cbz	r1, 80059e0 <__sflush_r+0xac>
 80059b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059b4:	4299      	cmp	r1, r3
 80059b6:	d002      	beq.n	80059be <__sflush_r+0x8a>
 80059b8:	4628      	mov	r0, r5
 80059ba:	f7ff fb3d 	bl	8005038 <_free_r>
 80059be:	2300      	movs	r3, #0
 80059c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80059c2:	e00d      	b.n	80059e0 <__sflush_r+0xac>
 80059c4:	2301      	movs	r3, #1
 80059c6:	4628      	mov	r0, r5
 80059c8:	47b0      	blx	r6
 80059ca:	4602      	mov	r2, r0
 80059cc:	1c50      	adds	r0, r2, #1
 80059ce:	d1c9      	bne.n	8005964 <__sflush_r+0x30>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0c6      	beq.n	8005964 <__sflush_r+0x30>
 80059d6:	2b1d      	cmp	r3, #29
 80059d8:	d001      	beq.n	80059de <__sflush_r+0xaa>
 80059da:	2b16      	cmp	r3, #22
 80059dc:	d11d      	bne.n	8005a1a <__sflush_r+0xe6>
 80059de:	602f      	str	r7, [r5, #0]
 80059e0:	2000      	movs	r0, #0
 80059e2:	e021      	b.n	8005a28 <__sflush_r+0xf4>
 80059e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059e8:	b21b      	sxth	r3, r3
 80059ea:	e01a      	b.n	8005a22 <__sflush_r+0xee>
 80059ec:	690f      	ldr	r7, [r1, #16]
 80059ee:	2f00      	cmp	r7, #0
 80059f0:	d0f6      	beq.n	80059e0 <__sflush_r+0xac>
 80059f2:	0793      	lsls	r3, r2, #30
 80059f4:	bf18      	it	ne
 80059f6:	2300      	movne	r3, #0
 80059f8:	680e      	ldr	r6, [r1, #0]
 80059fa:	bf08      	it	eq
 80059fc:	694b      	ldreq	r3, [r1, #20]
 80059fe:	1bf6      	subs	r6, r6, r7
 8005a00:	600f      	str	r7, [r1, #0]
 8005a02:	608b      	str	r3, [r1, #8]
 8005a04:	2e00      	cmp	r6, #0
 8005a06:	ddeb      	ble.n	80059e0 <__sflush_r+0xac>
 8005a08:	4633      	mov	r3, r6
 8005a0a:	463a      	mov	r2, r7
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	6a21      	ldr	r1, [r4, #32]
 8005a10:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005a14:	47e0      	blx	ip
 8005a16:	2800      	cmp	r0, #0
 8005a18:	dc07      	bgt.n	8005a2a <__sflush_r+0xf6>
 8005a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a22:	f04f 30ff 	mov.w	r0, #4294967295
 8005a26:	81a3      	strh	r3, [r4, #12]
 8005a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a2a:	4407      	add	r7, r0
 8005a2c:	1a36      	subs	r6, r6, r0
 8005a2e:	e7e9      	b.n	8005a04 <__sflush_r+0xd0>
 8005a30:	dfbffffe 	.word	0xdfbffffe

08005a34 <_fflush_r>:
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	690b      	ldr	r3, [r1, #16]
 8005a38:	4605      	mov	r5, r0
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	b913      	cbnz	r3, 8005a44 <_fflush_r+0x10>
 8005a3e:	2500      	movs	r5, #0
 8005a40:	4628      	mov	r0, r5
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	b118      	cbz	r0, 8005a4e <_fflush_r+0x1a>
 8005a46:	6a03      	ldr	r3, [r0, #32]
 8005a48:	b90b      	cbnz	r3, 8005a4e <_fflush_r+0x1a>
 8005a4a:	f7fe faa9 	bl	8003fa0 <__sinit>
 8005a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d0f3      	beq.n	8005a3e <_fflush_r+0xa>
 8005a56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005a58:	07d0      	lsls	r0, r2, #31
 8005a5a:	d404      	bmi.n	8005a66 <_fflush_r+0x32>
 8005a5c:	0599      	lsls	r1, r3, #22
 8005a5e:	d402      	bmi.n	8005a66 <_fflush_r+0x32>
 8005a60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a62:	f7fe fc86 	bl	8004372 <__retarget_lock_acquire_recursive>
 8005a66:	4628      	mov	r0, r5
 8005a68:	4621      	mov	r1, r4
 8005a6a:	f7ff ff63 	bl	8005934 <__sflush_r>
 8005a6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a70:	4605      	mov	r5, r0
 8005a72:	07da      	lsls	r2, r3, #31
 8005a74:	d4e4      	bmi.n	8005a40 <_fflush_r+0xc>
 8005a76:	89a3      	ldrh	r3, [r4, #12]
 8005a78:	059b      	lsls	r3, r3, #22
 8005a7a:	d4e1      	bmi.n	8005a40 <_fflush_r+0xc>
 8005a7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a7e:	f7fe fc79 	bl	8004374 <__retarget_lock_release_recursive>
 8005a82:	e7dd      	b.n	8005a40 <_fflush_r+0xc>

08005a84 <__swhatbuf_r>:
 8005a84:	b570      	push	{r4, r5, r6, lr}
 8005a86:	460c      	mov	r4, r1
 8005a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a8c:	4615      	mov	r5, r2
 8005a8e:	2900      	cmp	r1, #0
 8005a90:	461e      	mov	r6, r3
 8005a92:	b096      	sub	sp, #88	@ 0x58
 8005a94:	da0c      	bge.n	8005ab0 <__swhatbuf_r+0x2c>
 8005a96:	89a3      	ldrh	r3, [r4, #12]
 8005a98:	2100      	movs	r1, #0
 8005a9a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005a9e:	bf14      	ite	ne
 8005aa0:	2340      	movne	r3, #64	@ 0x40
 8005aa2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	6031      	str	r1, [r6, #0]
 8005aaa:	602b      	str	r3, [r5, #0]
 8005aac:	b016      	add	sp, #88	@ 0x58
 8005aae:	bd70      	pop	{r4, r5, r6, pc}
 8005ab0:	466a      	mov	r2, sp
 8005ab2:	f000 f849 	bl	8005b48 <_fstat_r>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	dbed      	blt.n	8005a96 <__swhatbuf_r+0x12>
 8005aba:	9901      	ldr	r1, [sp, #4]
 8005abc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005ac0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005ac4:	4259      	negs	r1, r3
 8005ac6:	4159      	adcs	r1, r3
 8005ac8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005acc:	e7eb      	b.n	8005aa6 <__swhatbuf_r+0x22>

08005ace <__smakebuf_r>:
 8005ace:	898b      	ldrh	r3, [r1, #12]
 8005ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ad2:	079d      	lsls	r5, r3, #30
 8005ad4:	4606      	mov	r6, r0
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	d507      	bpl.n	8005aea <__smakebuf_r+0x1c>
 8005ada:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005ade:	6023      	str	r3, [r4, #0]
 8005ae0:	6123      	str	r3, [r4, #16]
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	6163      	str	r3, [r4, #20]
 8005ae6:	b003      	add	sp, #12
 8005ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005aea:	466a      	mov	r2, sp
 8005aec:	ab01      	add	r3, sp, #4
 8005aee:	f7ff ffc9 	bl	8005a84 <__swhatbuf_r>
 8005af2:	9f00      	ldr	r7, [sp, #0]
 8005af4:	4605      	mov	r5, r0
 8005af6:	4639      	mov	r1, r7
 8005af8:	4630      	mov	r0, r6
 8005afa:	f7ff fb0f 	bl	800511c <_malloc_r>
 8005afe:	b948      	cbnz	r0, 8005b14 <__smakebuf_r+0x46>
 8005b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b04:	059a      	lsls	r2, r3, #22
 8005b06:	d4ee      	bmi.n	8005ae6 <__smakebuf_r+0x18>
 8005b08:	f023 0303 	bic.w	r3, r3, #3
 8005b0c:	f043 0302 	orr.w	r3, r3, #2
 8005b10:	81a3      	strh	r3, [r4, #12]
 8005b12:	e7e2      	b.n	8005ada <__smakebuf_r+0xc>
 8005b14:	89a3      	ldrh	r3, [r4, #12]
 8005b16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005b1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b1e:	81a3      	strh	r3, [r4, #12]
 8005b20:	9b01      	ldr	r3, [sp, #4]
 8005b22:	6020      	str	r0, [r4, #0]
 8005b24:	b15b      	cbz	r3, 8005b3e <__smakebuf_r+0x70>
 8005b26:	4630      	mov	r0, r6
 8005b28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b2c:	f000 f81e 	bl	8005b6c <_isatty_r>
 8005b30:	b128      	cbz	r0, 8005b3e <__smakebuf_r+0x70>
 8005b32:	89a3      	ldrh	r3, [r4, #12]
 8005b34:	f023 0303 	bic.w	r3, r3, #3
 8005b38:	f043 0301 	orr.w	r3, r3, #1
 8005b3c:	81a3      	strh	r3, [r4, #12]
 8005b3e:	89a3      	ldrh	r3, [r4, #12]
 8005b40:	431d      	orrs	r5, r3
 8005b42:	81a5      	strh	r5, [r4, #12]
 8005b44:	e7cf      	b.n	8005ae6 <__smakebuf_r+0x18>
	...

08005b48 <_fstat_r>:
 8005b48:	b538      	push	{r3, r4, r5, lr}
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	4d06      	ldr	r5, [pc, #24]	@ (8005b68 <_fstat_r+0x20>)
 8005b4e:	4604      	mov	r4, r0
 8005b50:	4608      	mov	r0, r1
 8005b52:	4611      	mov	r1, r2
 8005b54:	602b      	str	r3, [r5, #0]
 8005b56:	f7fb fe1f 	bl	8001798 <_fstat>
 8005b5a:	1c43      	adds	r3, r0, #1
 8005b5c:	d102      	bne.n	8005b64 <_fstat_r+0x1c>
 8005b5e:	682b      	ldr	r3, [r5, #0]
 8005b60:	b103      	cbz	r3, 8005b64 <_fstat_r+0x1c>
 8005b62:	6023      	str	r3, [r4, #0]
 8005b64:	bd38      	pop	{r3, r4, r5, pc}
 8005b66:	bf00      	nop
 8005b68:	200003b8 	.word	0x200003b8

08005b6c <_isatty_r>:
 8005b6c:	b538      	push	{r3, r4, r5, lr}
 8005b6e:	2300      	movs	r3, #0
 8005b70:	4d05      	ldr	r5, [pc, #20]	@ (8005b88 <_isatty_r+0x1c>)
 8005b72:	4604      	mov	r4, r0
 8005b74:	4608      	mov	r0, r1
 8005b76:	602b      	str	r3, [r5, #0]
 8005b78:	f7fb fe1d 	bl	80017b6 <_isatty>
 8005b7c:	1c43      	adds	r3, r0, #1
 8005b7e:	d102      	bne.n	8005b86 <_isatty_r+0x1a>
 8005b80:	682b      	ldr	r3, [r5, #0]
 8005b82:	b103      	cbz	r3, 8005b86 <_isatty_r+0x1a>
 8005b84:	6023      	str	r3, [r4, #0]
 8005b86:	bd38      	pop	{r3, r4, r5, pc}
 8005b88:	200003b8 	.word	0x200003b8

08005b8c <_sbrk_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	2300      	movs	r3, #0
 8005b90:	4d05      	ldr	r5, [pc, #20]	@ (8005ba8 <_sbrk_r+0x1c>)
 8005b92:	4604      	mov	r4, r0
 8005b94:	4608      	mov	r0, r1
 8005b96:	602b      	str	r3, [r5, #0]
 8005b98:	f7fb fe24 	bl	80017e4 <_sbrk>
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	d102      	bne.n	8005ba6 <_sbrk_r+0x1a>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	b103      	cbz	r3, 8005ba6 <_sbrk_r+0x1a>
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	bd38      	pop	{r3, r4, r5, pc}
 8005ba8:	200003b8 	.word	0x200003b8

08005bac <memcpy>:
 8005bac:	440a      	add	r2, r1
 8005bae:	4291      	cmp	r1, r2
 8005bb0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bb4:	d100      	bne.n	8005bb8 <memcpy+0xc>
 8005bb6:	4770      	bx	lr
 8005bb8:	b510      	push	{r4, lr}
 8005bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bbe:	4291      	cmp	r1, r2
 8005bc0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bc4:	d1f9      	bne.n	8005bba <memcpy+0xe>
 8005bc6:	bd10      	pop	{r4, pc}

08005bc8 <__assert_func>:
 8005bc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005bca:	4614      	mov	r4, r2
 8005bcc:	461a      	mov	r2, r3
 8005bce:	4b09      	ldr	r3, [pc, #36]	@ (8005bf4 <__assert_func+0x2c>)
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68d8      	ldr	r0, [r3, #12]
 8005bd6:	b954      	cbnz	r4, 8005bee <__assert_func+0x26>
 8005bd8:	4b07      	ldr	r3, [pc, #28]	@ (8005bf8 <__assert_func+0x30>)
 8005bda:	461c      	mov	r4, r3
 8005bdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005be0:	9100      	str	r1, [sp, #0]
 8005be2:	462b      	mov	r3, r5
 8005be4:	4905      	ldr	r1, [pc, #20]	@ (8005bfc <__assert_func+0x34>)
 8005be6:	f000 f841 	bl	8005c6c <fiprintf>
 8005bea:	f000 f851 	bl	8005c90 <abort>
 8005bee:	4b04      	ldr	r3, [pc, #16]	@ (8005c00 <__assert_func+0x38>)
 8005bf0:	e7f4      	b.n	8005bdc <__assert_func+0x14>
 8005bf2:	bf00      	nop
 8005bf4:	20000024 	.word	0x20000024
 8005bf8:	08006255 	.word	0x08006255
 8005bfc:	08006227 	.word	0x08006227
 8005c00:	0800621a 	.word	0x0800621a

08005c04 <_calloc_r>:
 8005c04:	b570      	push	{r4, r5, r6, lr}
 8005c06:	fba1 5402 	umull	r5, r4, r1, r2
 8005c0a:	b93c      	cbnz	r4, 8005c1c <_calloc_r+0x18>
 8005c0c:	4629      	mov	r1, r5
 8005c0e:	f7ff fa85 	bl	800511c <_malloc_r>
 8005c12:	4606      	mov	r6, r0
 8005c14:	b928      	cbnz	r0, 8005c22 <_calloc_r+0x1e>
 8005c16:	2600      	movs	r6, #0
 8005c18:	4630      	mov	r0, r6
 8005c1a:	bd70      	pop	{r4, r5, r6, pc}
 8005c1c:	220c      	movs	r2, #12
 8005c1e:	6002      	str	r2, [r0, #0]
 8005c20:	e7f9      	b.n	8005c16 <_calloc_r+0x12>
 8005c22:	462a      	mov	r2, r5
 8005c24:	4621      	mov	r1, r4
 8005c26:	f7fe fb27 	bl	8004278 <memset>
 8005c2a:	e7f5      	b.n	8005c18 <_calloc_r+0x14>

08005c2c <__ascii_mbtowc>:
 8005c2c:	b082      	sub	sp, #8
 8005c2e:	b901      	cbnz	r1, 8005c32 <__ascii_mbtowc+0x6>
 8005c30:	a901      	add	r1, sp, #4
 8005c32:	b142      	cbz	r2, 8005c46 <__ascii_mbtowc+0x1a>
 8005c34:	b14b      	cbz	r3, 8005c4a <__ascii_mbtowc+0x1e>
 8005c36:	7813      	ldrb	r3, [r2, #0]
 8005c38:	600b      	str	r3, [r1, #0]
 8005c3a:	7812      	ldrb	r2, [r2, #0]
 8005c3c:	1e10      	subs	r0, r2, #0
 8005c3e:	bf18      	it	ne
 8005c40:	2001      	movne	r0, #1
 8005c42:	b002      	add	sp, #8
 8005c44:	4770      	bx	lr
 8005c46:	4610      	mov	r0, r2
 8005c48:	e7fb      	b.n	8005c42 <__ascii_mbtowc+0x16>
 8005c4a:	f06f 0001 	mvn.w	r0, #1
 8005c4e:	e7f8      	b.n	8005c42 <__ascii_mbtowc+0x16>

08005c50 <__ascii_wctomb>:
 8005c50:	4603      	mov	r3, r0
 8005c52:	4608      	mov	r0, r1
 8005c54:	b141      	cbz	r1, 8005c68 <__ascii_wctomb+0x18>
 8005c56:	2aff      	cmp	r2, #255	@ 0xff
 8005c58:	d904      	bls.n	8005c64 <__ascii_wctomb+0x14>
 8005c5a:	228a      	movs	r2, #138	@ 0x8a
 8005c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c60:	601a      	str	r2, [r3, #0]
 8005c62:	4770      	bx	lr
 8005c64:	2001      	movs	r0, #1
 8005c66:	700a      	strb	r2, [r1, #0]
 8005c68:	4770      	bx	lr
	...

08005c6c <fiprintf>:
 8005c6c:	b40e      	push	{r1, r2, r3}
 8005c6e:	b503      	push	{r0, r1, lr}
 8005c70:	4601      	mov	r1, r0
 8005c72:	ab03      	add	r3, sp, #12
 8005c74:	4805      	ldr	r0, [pc, #20]	@ (8005c8c <fiprintf+0x20>)
 8005c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c7a:	6800      	ldr	r0, [r0, #0]
 8005c7c:	9301      	str	r3, [sp, #4]
 8005c7e:	f000 f835 	bl	8005cec <_vfiprintf_r>
 8005c82:	b002      	add	sp, #8
 8005c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c88:	b003      	add	sp, #12
 8005c8a:	4770      	bx	lr
 8005c8c:	20000024 	.word	0x20000024

08005c90 <abort>:
 8005c90:	2006      	movs	r0, #6
 8005c92:	b508      	push	{r3, lr}
 8005c94:	f000 f96a 	bl	8005f6c <raise>
 8005c98:	2001      	movs	r0, #1
 8005c9a:	f7fb fd4a 	bl	8001732 <_exit>

08005c9e <__sfputc_r>:
 8005c9e:	6893      	ldr	r3, [r2, #8]
 8005ca0:	b410      	push	{r4}
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	6093      	str	r3, [r2, #8]
 8005ca8:	da07      	bge.n	8005cba <__sfputc_r+0x1c>
 8005caa:	6994      	ldr	r4, [r2, #24]
 8005cac:	42a3      	cmp	r3, r4
 8005cae:	db01      	blt.n	8005cb4 <__sfputc_r+0x16>
 8005cb0:	290a      	cmp	r1, #10
 8005cb2:	d102      	bne.n	8005cba <__sfputc_r+0x1c>
 8005cb4:	bc10      	pop	{r4}
 8005cb6:	f7fe ba4a 	b.w	800414e <__swbuf_r>
 8005cba:	6813      	ldr	r3, [r2, #0]
 8005cbc:	1c58      	adds	r0, r3, #1
 8005cbe:	6010      	str	r0, [r2, #0]
 8005cc0:	7019      	strb	r1, [r3, #0]
 8005cc2:	4608      	mov	r0, r1
 8005cc4:	bc10      	pop	{r4}
 8005cc6:	4770      	bx	lr

08005cc8 <__sfputs_r>:
 8005cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cca:	4606      	mov	r6, r0
 8005ccc:	460f      	mov	r7, r1
 8005cce:	4614      	mov	r4, r2
 8005cd0:	18d5      	adds	r5, r2, r3
 8005cd2:	42ac      	cmp	r4, r5
 8005cd4:	d101      	bne.n	8005cda <__sfputs_r+0x12>
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	e007      	b.n	8005cea <__sfputs_r+0x22>
 8005cda:	463a      	mov	r2, r7
 8005cdc:	4630      	mov	r0, r6
 8005cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ce2:	f7ff ffdc 	bl	8005c9e <__sfputc_r>
 8005ce6:	1c43      	adds	r3, r0, #1
 8005ce8:	d1f3      	bne.n	8005cd2 <__sfputs_r+0xa>
 8005cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005cec <_vfiprintf_r>:
 8005cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf0:	460d      	mov	r5, r1
 8005cf2:	4614      	mov	r4, r2
 8005cf4:	4698      	mov	r8, r3
 8005cf6:	4606      	mov	r6, r0
 8005cf8:	b09d      	sub	sp, #116	@ 0x74
 8005cfa:	b118      	cbz	r0, 8005d04 <_vfiprintf_r+0x18>
 8005cfc:	6a03      	ldr	r3, [r0, #32]
 8005cfe:	b90b      	cbnz	r3, 8005d04 <_vfiprintf_r+0x18>
 8005d00:	f7fe f94e 	bl	8003fa0 <__sinit>
 8005d04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d06:	07d9      	lsls	r1, r3, #31
 8005d08:	d405      	bmi.n	8005d16 <_vfiprintf_r+0x2a>
 8005d0a:	89ab      	ldrh	r3, [r5, #12]
 8005d0c:	059a      	lsls	r2, r3, #22
 8005d0e:	d402      	bmi.n	8005d16 <_vfiprintf_r+0x2a>
 8005d10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d12:	f7fe fb2e 	bl	8004372 <__retarget_lock_acquire_recursive>
 8005d16:	89ab      	ldrh	r3, [r5, #12]
 8005d18:	071b      	lsls	r3, r3, #28
 8005d1a:	d501      	bpl.n	8005d20 <_vfiprintf_r+0x34>
 8005d1c:	692b      	ldr	r3, [r5, #16]
 8005d1e:	b99b      	cbnz	r3, 8005d48 <_vfiprintf_r+0x5c>
 8005d20:	4629      	mov	r1, r5
 8005d22:	4630      	mov	r0, r6
 8005d24:	f7fe fa52 	bl	80041cc <__swsetup_r>
 8005d28:	b170      	cbz	r0, 8005d48 <_vfiprintf_r+0x5c>
 8005d2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d2c:	07dc      	lsls	r4, r3, #31
 8005d2e:	d504      	bpl.n	8005d3a <_vfiprintf_r+0x4e>
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295
 8005d34:	b01d      	add	sp, #116	@ 0x74
 8005d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d3a:	89ab      	ldrh	r3, [r5, #12]
 8005d3c:	0598      	lsls	r0, r3, #22
 8005d3e:	d4f7      	bmi.n	8005d30 <_vfiprintf_r+0x44>
 8005d40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d42:	f7fe fb17 	bl	8004374 <__retarget_lock_release_recursive>
 8005d46:	e7f3      	b.n	8005d30 <_vfiprintf_r+0x44>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d4c:	2320      	movs	r3, #32
 8005d4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d52:	2330      	movs	r3, #48	@ 0x30
 8005d54:	f04f 0901 	mov.w	r9, #1
 8005d58:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d5c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005f08 <_vfiprintf_r+0x21c>
 8005d60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d64:	4623      	mov	r3, r4
 8005d66:	469a      	mov	sl, r3
 8005d68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d6c:	b10a      	cbz	r2, 8005d72 <_vfiprintf_r+0x86>
 8005d6e:	2a25      	cmp	r2, #37	@ 0x25
 8005d70:	d1f9      	bne.n	8005d66 <_vfiprintf_r+0x7a>
 8005d72:	ebba 0b04 	subs.w	fp, sl, r4
 8005d76:	d00b      	beq.n	8005d90 <_vfiprintf_r+0xa4>
 8005d78:	465b      	mov	r3, fp
 8005d7a:	4622      	mov	r2, r4
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f7ff ffa2 	bl	8005cc8 <__sfputs_r>
 8005d84:	3001      	adds	r0, #1
 8005d86:	f000 80a7 	beq.w	8005ed8 <_vfiprintf_r+0x1ec>
 8005d8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d8c:	445a      	add	r2, fp
 8005d8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d90:	f89a 3000 	ldrb.w	r3, [sl]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 809f 	beq.w	8005ed8 <_vfiprintf_r+0x1ec>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005da0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005da4:	f10a 0a01 	add.w	sl, sl, #1
 8005da8:	9304      	str	r3, [sp, #16]
 8005daa:	9307      	str	r3, [sp, #28]
 8005dac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005db0:	931a      	str	r3, [sp, #104]	@ 0x68
 8005db2:	4654      	mov	r4, sl
 8005db4:	2205      	movs	r2, #5
 8005db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dba:	4853      	ldr	r0, [pc, #332]	@ (8005f08 <_vfiprintf_r+0x21c>)
 8005dbc:	f7fe fadb 	bl	8004376 <memchr>
 8005dc0:	9a04      	ldr	r2, [sp, #16]
 8005dc2:	b9d8      	cbnz	r0, 8005dfc <_vfiprintf_r+0x110>
 8005dc4:	06d1      	lsls	r1, r2, #27
 8005dc6:	bf44      	itt	mi
 8005dc8:	2320      	movmi	r3, #32
 8005dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dce:	0713      	lsls	r3, r2, #28
 8005dd0:	bf44      	itt	mi
 8005dd2:	232b      	movmi	r3, #43	@ 0x2b
 8005dd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8005ddc:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dde:	d015      	beq.n	8005e0c <_vfiprintf_r+0x120>
 8005de0:	4654      	mov	r4, sl
 8005de2:	2000      	movs	r0, #0
 8005de4:	f04f 0c0a 	mov.w	ip, #10
 8005de8:	9a07      	ldr	r2, [sp, #28]
 8005dea:	4621      	mov	r1, r4
 8005dec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005df0:	3b30      	subs	r3, #48	@ 0x30
 8005df2:	2b09      	cmp	r3, #9
 8005df4:	d94b      	bls.n	8005e8e <_vfiprintf_r+0x1a2>
 8005df6:	b1b0      	cbz	r0, 8005e26 <_vfiprintf_r+0x13a>
 8005df8:	9207      	str	r2, [sp, #28]
 8005dfa:	e014      	b.n	8005e26 <_vfiprintf_r+0x13a>
 8005dfc:	eba0 0308 	sub.w	r3, r0, r8
 8005e00:	fa09 f303 	lsl.w	r3, r9, r3
 8005e04:	4313      	orrs	r3, r2
 8005e06:	46a2      	mov	sl, r4
 8005e08:	9304      	str	r3, [sp, #16]
 8005e0a:	e7d2      	b.n	8005db2 <_vfiprintf_r+0xc6>
 8005e0c:	9b03      	ldr	r3, [sp, #12]
 8005e0e:	1d19      	adds	r1, r3, #4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	9103      	str	r1, [sp, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	bfbb      	ittet	lt
 8005e18:	425b      	neglt	r3, r3
 8005e1a:	f042 0202 	orrlt.w	r2, r2, #2
 8005e1e:	9307      	strge	r3, [sp, #28]
 8005e20:	9307      	strlt	r3, [sp, #28]
 8005e22:	bfb8      	it	lt
 8005e24:	9204      	strlt	r2, [sp, #16]
 8005e26:	7823      	ldrb	r3, [r4, #0]
 8005e28:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e2a:	d10a      	bne.n	8005e42 <_vfiprintf_r+0x156>
 8005e2c:	7863      	ldrb	r3, [r4, #1]
 8005e2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e30:	d132      	bne.n	8005e98 <_vfiprintf_r+0x1ac>
 8005e32:	9b03      	ldr	r3, [sp, #12]
 8005e34:	3402      	adds	r4, #2
 8005e36:	1d1a      	adds	r2, r3, #4
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	9203      	str	r2, [sp, #12]
 8005e3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e40:	9305      	str	r3, [sp, #20]
 8005e42:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005f0c <_vfiprintf_r+0x220>
 8005e46:	2203      	movs	r2, #3
 8005e48:	4650      	mov	r0, sl
 8005e4a:	7821      	ldrb	r1, [r4, #0]
 8005e4c:	f7fe fa93 	bl	8004376 <memchr>
 8005e50:	b138      	cbz	r0, 8005e62 <_vfiprintf_r+0x176>
 8005e52:	2240      	movs	r2, #64	@ 0x40
 8005e54:	9b04      	ldr	r3, [sp, #16]
 8005e56:	eba0 000a 	sub.w	r0, r0, sl
 8005e5a:	4082      	lsls	r2, r0
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	3401      	adds	r4, #1
 8005e60:	9304      	str	r3, [sp, #16]
 8005e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e66:	2206      	movs	r2, #6
 8005e68:	4829      	ldr	r0, [pc, #164]	@ (8005f10 <_vfiprintf_r+0x224>)
 8005e6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e6e:	f7fe fa82 	bl	8004376 <memchr>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d03f      	beq.n	8005ef6 <_vfiprintf_r+0x20a>
 8005e76:	4b27      	ldr	r3, [pc, #156]	@ (8005f14 <_vfiprintf_r+0x228>)
 8005e78:	bb1b      	cbnz	r3, 8005ec2 <_vfiprintf_r+0x1d6>
 8005e7a:	9b03      	ldr	r3, [sp, #12]
 8005e7c:	3307      	adds	r3, #7
 8005e7e:	f023 0307 	bic.w	r3, r3, #7
 8005e82:	3308      	adds	r3, #8
 8005e84:	9303      	str	r3, [sp, #12]
 8005e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e88:	443b      	add	r3, r7
 8005e8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e8c:	e76a      	b.n	8005d64 <_vfiprintf_r+0x78>
 8005e8e:	460c      	mov	r4, r1
 8005e90:	2001      	movs	r0, #1
 8005e92:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e96:	e7a8      	b.n	8005dea <_vfiprintf_r+0xfe>
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f04f 0c0a 	mov.w	ip, #10
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	3401      	adds	r4, #1
 8005ea2:	9305      	str	r3, [sp, #20]
 8005ea4:	4620      	mov	r0, r4
 8005ea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005eaa:	3a30      	subs	r2, #48	@ 0x30
 8005eac:	2a09      	cmp	r2, #9
 8005eae:	d903      	bls.n	8005eb8 <_vfiprintf_r+0x1cc>
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0c6      	beq.n	8005e42 <_vfiprintf_r+0x156>
 8005eb4:	9105      	str	r1, [sp, #20]
 8005eb6:	e7c4      	b.n	8005e42 <_vfiprintf_r+0x156>
 8005eb8:	4604      	mov	r4, r0
 8005eba:	2301      	movs	r3, #1
 8005ebc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ec0:	e7f0      	b.n	8005ea4 <_vfiprintf_r+0x1b8>
 8005ec2:	ab03      	add	r3, sp, #12
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	462a      	mov	r2, r5
 8005ec8:	4630      	mov	r0, r6
 8005eca:	4b13      	ldr	r3, [pc, #76]	@ (8005f18 <_vfiprintf_r+0x22c>)
 8005ecc:	a904      	add	r1, sp, #16
 8005ece:	f7fd fc1d 	bl	800370c <_printf_float>
 8005ed2:	4607      	mov	r7, r0
 8005ed4:	1c78      	adds	r0, r7, #1
 8005ed6:	d1d6      	bne.n	8005e86 <_vfiprintf_r+0x19a>
 8005ed8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005eda:	07d9      	lsls	r1, r3, #31
 8005edc:	d405      	bmi.n	8005eea <_vfiprintf_r+0x1fe>
 8005ede:	89ab      	ldrh	r3, [r5, #12]
 8005ee0:	059a      	lsls	r2, r3, #22
 8005ee2:	d402      	bmi.n	8005eea <_vfiprintf_r+0x1fe>
 8005ee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ee6:	f7fe fa45 	bl	8004374 <__retarget_lock_release_recursive>
 8005eea:	89ab      	ldrh	r3, [r5, #12]
 8005eec:	065b      	lsls	r3, r3, #25
 8005eee:	f53f af1f 	bmi.w	8005d30 <_vfiprintf_r+0x44>
 8005ef2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ef4:	e71e      	b.n	8005d34 <_vfiprintf_r+0x48>
 8005ef6:	ab03      	add	r3, sp, #12
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	462a      	mov	r2, r5
 8005efc:	4630      	mov	r0, r6
 8005efe:	4b06      	ldr	r3, [pc, #24]	@ (8005f18 <_vfiprintf_r+0x22c>)
 8005f00:	a904      	add	r1, sp, #16
 8005f02:	f7fd fea1 	bl	8003c48 <_printf_i>
 8005f06:	e7e4      	b.n	8005ed2 <_vfiprintf_r+0x1e6>
 8005f08:	08006357 	.word	0x08006357
 8005f0c:	0800635d 	.word	0x0800635d
 8005f10:	08006361 	.word	0x08006361
 8005f14:	0800370d 	.word	0x0800370d
 8005f18:	08005cc9 	.word	0x08005cc9

08005f1c <_raise_r>:
 8005f1c:	291f      	cmp	r1, #31
 8005f1e:	b538      	push	{r3, r4, r5, lr}
 8005f20:	4605      	mov	r5, r0
 8005f22:	460c      	mov	r4, r1
 8005f24:	d904      	bls.n	8005f30 <_raise_r+0x14>
 8005f26:	2316      	movs	r3, #22
 8005f28:	6003      	str	r3, [r0, #0]
 8005f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f2e:	bd38      	pop	{r3, r4, r5, pc}
 8005f30:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005f32:	b112      	cbz	r2, 8005f3a <_raise_r+0x1e>
 8005f34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f38:	b94b      	cbnz	r3, 8005f4e <_raise_r+0x32>
 8005f3a:	4628      	mov	r0, r5
 8005f3c:	f000 f830 	bl	8005fa0 <_getpid_r>
 8005f40:	4622      	mov	r2, r4
 8005f42:	4601      	mov	r1, r0
 8005f44:	4628      	mov	r0, r5
 8005f46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f4a:	f000 b817 	b.w	8005f7c <_kill_r>
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d00a      	beq.n	8005f68 <_raise_r+0x4c>
 8005f52:	1c59      	adds	r1, r3, #1
 8005f54:	d103      	bne.n	8005f5e <_raise_r+0x42>
 8005f56:	2316      	movs	r3, #22
 8005f58:	6003      	str	r3, [r0, #0]
 8005f5a:	2001      	movs	r0, #1
 8005f5c:	e7e7      	b.n	8005f2e <_raise_r+0x12>
 8005f5e:	2100      	movs	r1, #0
 8005f60:	4620      	mov	r0, r4
 8005f62:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005f66:	4798      	blx	r3
 8005f68:	2000      	movs	r0, #0
 8005f6a:	e7e0      	b.n	8005f2e <_raise_r+0x12>

08005f6c <raise>:
 8005f6c:	4b02      	ldr	r3, [pc, #8]	@ (8005f78 <raise+0xc>)
 8005f6e:	4601      	mov	r1, r0
 8005f70:	6818      	ldr	r0, [r3, #0]
 8005f72:	f7ff bfd3 	b.w	8005f1c <_raise_r>
 8005f76:	bf00      	nop
 8005f78:	20000024 	.word	0x20000024

08005f7c <_kill_r>:
 8005f7c:	b538      	push	{r3, r4, r5, lr}
 8005f7e:	2300      	movs	r3, #0
 8005f80:	4d06      	ldr	r5, [pc, #24]	@ (8005f9c <_kill_r+0x20>)
 8005f82:	4604      	mov	r4, r0
 8005f84:	4608      	mov	r0, r1
 8005f86:	4611      	mov	r1, r2
 8005f88:	602b      	str	r3, [r5, #0]
 8005f8a:	f7fb fbc2 	bl	8001712 <_kill>
 8005f8e:	1c43      	adds	r3, r0, #1
 8005f90:	d102      	bne.n	8005f98 <_kill_r+0x1c>
 8005f92:	682b      	ldr	r3, [r5, #0]
 8005f94:	b103      	cbz	r3, 8005f98 <_kill_r+0x1c>
 8005f96:	6023      	str	r3, [r4, #0]
 8005f98:	bd38      	pop	{r3, r4, r5, pc}
 8005f9a:	bf00      	nop
 8005f9c:	200003b8 	.word	0x200003b8

08005fa0 <_getpid_r>:
 8005fa0:	f7fb bbb0 	b.w	8001704 <_getpid>

08005fa4 <_init>:
 8005fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa6:	bf00      	nop
 8005fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005faa:	bc08      	pop	{r3}
 8005fac:	469e      	mov	lr, r3
 8005fae:	4770      	bx	lr

08005fb0 <_fini>:
 8005fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb2:	bf00      	nop
 8005fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb6:	bc08      	pop	{r3}
 8005fb8:	469e      	mov	lr, r3
 8005fba:	4770      	bx	lr
